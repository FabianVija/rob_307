// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doKmean,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=348859,HLS_SYN_TPT=none,HLS_SYN_MEM=7,HLS_SYN_DSP=8,HLS_SYN_FF=3433,HLS_SYN_LUT=5603,HLS_VERSION=2018_2}" *)

module doKmean (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_state8 = 76'd128;
parameter    ap_ST_fsm_state9 = 76'd256;
parameter    ap_ST_fsm_state10 = 76'd512;
parameter    ap_ST_fsm_state11 = 76'd1024;
parameter    ap_ST_fsm_state12 = 76'd2048;
parameter    ap_ST_fsm_state13 = 76'd4096;
parameter    ap_ST_fsm_state14 = 76'd8192;
parameter    ap_ST_fsm_state15 = 76'd16384;
parameter    ap_ST_fsm_state16 = 76'd32768;
parameter    ap_ST_fsm_state17 = 76'd65536;
parameter    ap_ST_fsm_state18 = 76'd131072;
parameter    ap_ST_fsm_state19 = 76'd262144;
parameter    ap_ST_fsm_state20 = 76'd524288;
parameter    ap_ST_fsm_state21 = 76'd1048576;
parameter    ap_ST_fsm_state22 = 76'd2097152;
parameter    ap_ST_fsm_state23 = 76'd4194304;
parameter    ap_ST_fsm_state24 = 76'd8388608;
parameter    ap_ST_fsm_state25 = 76'd16777216;
parameter    ap_ST_fsm_state26 = 76'd33554432;
parameter    ap_ST_fsm_state27 = 76'd67108864;
parameter    ap_ST_fsm_state28 = 76'd134217728;
parameter    ap_ST_fsm_state29 = 76'd268435456;
parameter    ap_ST_fsm_state30 = 76'd536870912;
parameter    ap_ST_fsm_state31 = 76'd1073741824;
parameter    ap_ST_fsm_state32 = 76'd2147483648;
parameter    ap_ST_fsm_state33 = 76'd4294967296;
parameter    ap_ST_fsm_state34 = 76'd8589934592;
parameter    ap_ST_fsm_state35 = 76'd17179869184;
parameter    ap_ST_fsm_state36 = 76'd34359738368;
parameter    ap_ST_fsm_state37 = 76'd68719476736;
parameter    ap_ST_fsm_state38 = 76'd137438953472;
parameter    ap_ST_fsm_state39 = 76'd274877906944;
parameter    ap_ST_fsm_state40 = 76'd549755813888;
parameter    ap_ST_fsm_state41 = 76'd1099511627776;
parameter    ap_ST_fsm_state42 = 76'd2199023255552;
parameter    ap_ST_fsm_state43 = 76'd4398046511104;
parameter    ap_ST_fsm_state44 = 76'd8796093022208;
parameter    ap_ST_fsm_state45 = 76'd17592186044416;
parameter    ap_ST_fsm_state46 = 76'd35184372088832;
parameter    ap_ST_fsm_state47 = 76'd70368744177664;
parameter    ap_ST_fsm_state48 = 76'd140737488355328;
parameter    ap_ST_fsm_state49 = 76'd281474976710656;
parameter    ap_ST_fsm_state50 = 76'd562949953421312;
parameter    ap_ST_fsm_state51 = 76'd1125899906842624;
parameter    ap_ST_fsm_state52 = 76'd2251799813685248;
parameter    ap_ST_fsm_state53 = 76'd4503599627370496;
parameter    ap_ST_fsm_state54 = 76'd9007199254740992;
parameter    ap_ST_fsm_state55 = 76'd18014398509481984;
parameter    ap_ST_fsm_state56 = 76'd36028797018963968;
parameter    ap_ST_fsm_state57 = 76'd72057594037927936;
parameter    ap_ST_fsm_state58 = 76'd144115188075855872;
parameter    ap_ST_fsm_state59 = 76'd288230376151711744;
parameter    ap_ST_fsm_state60 = 76'd576460752303423488;
parameter    ap_ST_fsm_state61 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 76'd37778931862957161709568;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [31:0] gain;
reg   [9:0] points_address0;
reg    points_ce0;
reg    points_we0;
wire   [31:0] points_d0;
wire   [31:0] points_q0;
reg   [9:0] points_address1;
reg    points_ce1;
wire   [31:0] points_q1;
reg   [3:0] valref_keep_V;
reg   [3:0] valref_strb_V;
reg   [1:0] valref_user_V;
reg   [4:0] valref_id_V;
reg   [5:0] valref_dest_V;
reg   [9:0] centroids_address0;
reg    centroids_ce0;
reg    centroids_we0;
wire   [31:0] centroids_d0;
wire   [31:0] centroids_q0;
reg   [9:0] centroids_address1;
reg    centroids_ce1;
reg    centroids_we1;
wire   [31:0] centroids_q1;
reg   [6:0] results_address0;
reg    results_ce0;
reg    results_we0;
reg   [31:0] results_d0;
wire   [31:0] results_q0;
reg   [4:0] np_cluster_address0;
reg    np_cluster_ce0;
reg    np_cluster_we0;
reg   [31:0] np_cluster_d0;
wire   [31:0] np_cluster_q0;
reg   [9:0] new_centroids_address0;
reg    new_centroids_ce0;
reg    new_centroids_we0;
reg   [31:0] new_centroids_d0;
wire   [31:0] new_centroids_q0;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
reg   [31:0] reg_598;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] reg_605;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state47;
reg   [31:0] reg_611;
wire    ap_CS_fsm_state56;
reg   [31:0] gain_read_reg_1187;
wire   [9:0] next_mul_fu_617_p2;
reg   [9:0] next_mul_reg_1192;
wire    ap_CS_fsm_state2;
wire   [4:0] i_1_fu_629_p2;
reg   [4:0] i_1_reg_1200;
wire   [0:0] tmp_fu_635_p2;
reg   [0:0] tmp_reg_1205;
wire   [0:0] exitcond1_fu_623_p2;
wire   [5:0] j_1_fu_646_p2;
reg   [5:0] j_1_reg_1212;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_s_fu_656_p2;
reg   [9:0] tmp_s_reg_1217;
wire   [0:0] exitcond2_fu_640_p2;
wire   [0:0] tmp_4_fu_688_p2;
reg   [0:0] tmp_4_reg_1222;
wire   [9:0] next_mul2_fu_753_p2;
reg   [9:0] next_mul2_reg_1226;
wire    ap_CS_fsm_state5;
wire   [4:0] i_3_fu_765_p2;
reg   [4:0] i_3_reg_1234;
wire   [5:0] j_2_fu_777_p2;
reg   [5:0] j_2_reg_1242;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_15_fu_787_p2;
reg   [9:0] tmp_15_reg_1247;
wire   [0:0] exitcond5_fu_771_p2;
wire   [4:0] i_2_fu_808_p2;
wire    ap_CS_fsm_state8;
wire   [9:0] next_mul6_fu_824_p2;
reg   [9:0] next_mul6_reg_1267;
wire    ap_CS_fsm_state9;
wire   [4:0] i_4_fu_836_p2;
reg   [4:0] i_4_reg_1275;
wire   [63:0] tmp_10_fu_842_p1;
reg   [63:0] tmp_10_reg_1280;
wire   [0:0] exitcond6_fu_830_p2;
wire   [31:0] end_cast_fu_849_p1;
reg   [31:0] end_cast_reg_1285;
wire   [0:0] tmp_9_fu_853_p2;
reg   [0:0] tmp_9_reg_1290;
wire   [9:0] next_mul4_fu_859_p2;
reg   [9:0] next_mul4_reg_1294;
wire    ap_CS_fsm_state10;
wire   [31:0] cluster_1_cast6_fu_865_p1;
reg   [31:0] cluster_1_cast6_reg_1299;
wire   [4:0] c_2_fu_875_p2;
reg   [4:0] c_2_reg_1307;
reg   [6:0] results_addr_1_reg_1312;
wire   [0:0] exitcond1_i_fu_869_p2;
wire   [5:0] j_3_fu_887_p2;
reg   [5:0] j_3_reg_1320;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond_i_fu_881_p2;
reg   [31:0] centroids_load_reg_1337;
reg   [31:0] points_load_2_reg_1342;
reg   [31:0] centroids_load_1_reg_1347;
wire   [31:0] grp_fu_566_p2;
reg   [31:0] tmp_6_i_reg_1352;
wire   [31:0] grp_fu_571_p2;
reg   [31:0] tmp_7_i_reg_1357;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_588_p2;
reg   [31:0] distance_2_reg_1367;
wire    ap_CS_fsm_state37;
wire   [31:0] cluster_2_fu_1002_p3;
wire    ap_CS_fsm_state38;
wire   [31:0] min_distance_1_fu_1009_p3;
reg   [4:0] np_cluster_addr_reg_1387;
wire    ap_CS_fsm_state39;
wire  signed [10:0] tmp_21_fu_1181_p2;
reg  signed [10:0] tmp_21_reg_1392;
wire    ap_CS_fsm_state40;
wire   [5:0] j_4_fu_1049_p2;
reg   [5:0] j_4_reg_1400;
wire    ap_CS_fsm_state41;
reg   [9:0] new_centroids_addr_reg_1405;
wire   [0:0] exitcond8_fu_1043_p2;
wire   [9:0] next_mul8_fu_1084_p2;
reg   [9:0] next_mul8_reg_1415;
wire    ap_CS_fsm_state49;
wire   [4:0] c_1_fu_1096_p2;
reg   [4:0] c_1_reg_1423;
reg   [4:0] np_cluster_addr_1_reg_1428;
wire   [0:0] exitcond7_fu_1090_p2;
wire   [5:0] f_1_fu_1113_p2;
reg   [5:0] f_1_reg_1436;
wire    ap_CS_fsm_state50;
wire   [9:0] tmp_33_fu_1123_p2;
reg   [9:0] tmp_33_reg_1441;
wire   [0:0] exitcond9_fu_1107_p2;
wire    ap_CS_fsm_state51;
wire   [63:0] tmp_43_cast_fu_1129_p1;
reg   [63:0] tmp_43_cast_reg_1451;
wire    ap_CS_fsm_state55;
reg   [9:0] new_centroids_addr_1_reg_1456;
wire   [31:0] grp_fu_579_p1;
reg   [31:0] tmp_18_reg_1461;
wire   [31:0] grp_fu_575_p2;
reg   [31:0] tmp_19_reg_1466;
wire    ap_CS_fsm_state72;
wire   [4:0] idx_1_fu_1139_p2;
reg   [4:0] idx_1_reg_1474;
wire    ap_CS_fsm_state74;
reg    ap_block_state74;
wire   [0:0] exitcond_fu_1133_p2;
wire   [0:0] valOut_last_V_fu_1150_p2;
reg   [0:0] valOut_last_V_reg_1484;
reg   [4:0] i_reg_332;
reg   [9:0] phi_mul_reg_344;
reg   [5:0] j_reg_356;
reg   [4:0] i1_reg_367;
reg   [9:0] phi_mul1_reg_378;
reg   [5:0] j2_reg_390;
wire   [0:0] exitcond3_fu_759_p2;
reg   [4:0] i5_reg_401;
wire   [0:0] exitcond4_fu_802_p2;
reg   [4:0] i6_reg_412;
reg   [9:0] phi_mul5_reg_423;
reg  signed [31:0] cluster_reg_435;
reg   [31:0] min_distance_i_reg_448;
reg   [4:0] cluster_1_reg_460;
reg   [9:0] phi_mul3_reg_471;
reg   [31:0] distance_i_reg_483;
reg   [5:0] j_i_reg_495;
reg   [5:0] j7_reg_506;
wire    ap_CS_fsm_state48;
reg   [4:0] c_reg_517;
reg   [9:0] phi_mul7_reg_528;
reg   [5:0] f_reg_540;
wire    ap_CS_fsm_state73;
reg   [4:0] idx_reg_551;
wire   [63:0] tmp_34_cast_fu_719_p1;
wire   [63:0] tmp_36_cast_fu_798_p1;
wire   [63:0] tmp_6_fu_814_p1;
wire   [63:0] tmp_41_cast_fu_903_p1;
wire   [63:0] tmp_42_cast_fu_914_p1;
wire  signed [63:0] tmp_12_fu_1027_p1;
wire  signed [63:0] tmp_44_cast_fu_1068_p1;
wire   [63:0] tmp_45_cast_fu_1079_p1;
wire   [63:0] tmp_14_fu_1102_p1;
wire   [63:0] tmp_20_fu_1145_p1;
reg   [1:0] end_fu_136;
wire   [0:0] tmp_11_fu_1016_p2;
wire   [31:0] tmp_13_fu_1036_p2;
reg   [31:0] grp_fu_562_p0;
reg   [31:0] grp_fu_562_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state57;
wire   [9:0] tmp_2_cast_fu_652_p1;
wire   [4:0] tmp_2_fu_662_p1;
wire   [0:0] tmp_8_fu_672_p3;
wire   [4:0] tmp_5_fu_666_p2;
wire   [5:0] tmp_3_fu_680_p3;
wire   [9:0] tmp_8_cast_fu_783_p1;
wire   [9:0] tmp_4_i_cast_fu_893_p1;
wire   [9:0] tmp_31_fu_897_p2;
wire   [9:0] tmp_32_fu_908_p2;
wire   [31:0] distance_1_to_int_fu_919_p1;
wire   [31:0] min_distance_i_to_in_fu_936_p1;
wire   [7:0] tmp_22_fu_922_p4;
wire   [22:0] tmp_23_fu_932_p1;
wire   [0:0] notrhs_fu_960_p2;
wire   [0:0] notlhs_fu_954_p2;
wire   [7:0] tmp_24_fu_940_p4;
wire   [22:0] tmp_25_fu_950_p1;
wire   [0:0] notrhs1_fu_978_p2;
wire   [0:0] notlhs1_fu_972_p2;
wire   [0:0] tmp_26_fu_966_p2;
wire   [0:0] tmp_27_fu_984_p2;
wire   [0:0] tmp_28_fu_990_p2;
wire   [0:0] tmp_29_fu_583_p2;
wire   [0:0] tmp_30_fu_996_p2;
wire   [10:0] tmp_15_cast_fu_1059_p1;
(* use_dsp48 = "no" *) wire   [10:0] tmp_34_fu_1063_p2;
wire   [9:0] tmp_15_cast9_fu_1055_p1;
wire   [9:0] tmp_35_fu_1073_p2;
wire   [9:0] tmp_17_cast_fu_1119_p1;
wire   [6:0] tmp_21_fu_1181_p0;
wire  signed [10:0] tmp_21_fu_1181_p1;
reg   [1:0] grp_fu_562_opcode;
reg   [75:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 76'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 valref_keep_V = 4'd0;
#0 valref_strb_V = 4'd0;
#0 valref_user_V = 2'd0;
#0 valref_id_V = 5'd0;
#0 valref_dest_V = 6'd0;
end

doKmean_points #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
points_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(points_address0),
    .ce0(points_ce0),
    .we0(points_we0),
    .d0(points_d0),
    .q0(points_q0),
    .address1(points_address1),
    .ce1(points_ce1),
    .q1(points_q1)
);

doKmean_centroids #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
centroids_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(centroids_address0),
    .ce0(centroids_ce0),
    .we0(centroids_we0),
    .d0(centroids_d0),
    .q0(centroids_q0),
    .address1(centroids_address1),
    .ce1(centroids_ce1),
    .we1(centroids_we1),
    .d1(tmp_19_reg_1466),
    .q1(centroids_q1)
);

doKmean_results #(
    .DataWidth( 32 ),
    .AddressRange( 101 ),
    .AddressWidth( 7 ))
results_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(results_address0),
    .ce0(results_ce0),
    .we0(results_we0),
    .d0(results_d0),
    .q0(results_q0)
);

doKmean_np_cluster #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
np_cluster_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(np_cluster_address0),
    .ce0(np_cluster_ce0),
    .we0(np_cluster_we0),
    .d0(np_cluster_d0),
    .q0(np_cluster_q0)
);

doKmean_new_centrbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
new_centroids_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(new_centroids_address0),
    .ce0(new_centroids_ce0),
    .we0(new_centroids_we0),
    .d0(new_centroids_d0),
    .q0(new_centroids_q0)
);

doKmean_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doKmean_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .gain(gain)
);

doKmean_faddfsub_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_faddfsub_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_562_p0),
    .din1(grp_fu_562_p1),
    .opcode(grp_fu_562_opcode),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

doKmean_fsub_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fsub_32nsdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(points_load_2_reg_1342),
    .din1(centroids_load_1_reg_1347),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

doKmean_fmul_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fmul_32nseOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_605),
    .din1(tmp_6_i_reg_1352),
    .ce(1'b1),
    .dout(grp_fu_571_p2)
);

doKmean_fdiv_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fdiv_32nsfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_611),
    .din1(tmp_18_reg_1461),
    .ce(1'b1),
    .dout(grp_fu_575_p2)
);

doKmean_sitofp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_sitofp_32g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(np_cluster_q0),
    .ce(1'b1),
    .dout(grp_fu_579_p1)
);

doKmean_fcmp_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
doKmean_fcmp_32nshbi_U6(
    .din0(distance_2_reg_1367),
    .din1(min_distance_i_reg_448),
    .opcode(5'd4),
    .dout(tmp_29_fu_583_p2)
);

doKmean_fsqrt_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fsqrt_32nibs_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(distance_i_reg_483),
    .ce(1'b1),
    .dout(grp_fu_588_p2)
);

doKmean_mul_mul_7jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 11 ))
doKmean_mul_mul_7jbC_U8(
    .din0(tmp_21_fu_1181_p0),
    .din1(tmp_21_fu_1181_p1),
    .dout(tmp_21_fu_1181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_state == 2'd2)) | ((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_state == 2'd3)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1) & (inStream_V_data_V_0_state == 2'd3)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_vld_in == 1'b1) & (inStream_V_data_V_0_state == 2'd2)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_state == 2'd2)) | ((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_state == 2'd3)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_state == 2'd1)) | ((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1) & (inStream_V_dest_V_0_state == 2'd3)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_state == 2'd1)) | ((inStream_V_dest_V_0_vld_in == 1'b1) & (inStream_V_dest_V_0_state == 2'd2)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_state == 2'd2)) | ((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_state == 2'd3)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_state == 2'd1)) | ((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1) & (inStream_V_id_V_0_state == 2'd3)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_state == 2'd1)) | ((inStream_V_id_V_0_vld_in == 1'b1) & (inStream_V_id_V_0_state == 2'd2)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_state == 2'd2)) | ((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_state == 2'd3)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_state == 2'd1)) | ((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_state == 2'd3)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_state == 2'd1)) | ((inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_state == 2'd2)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_state == 2'd2)) | ((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_state == 2'd3)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_state == 2'd1)) | ((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1) & (inStream_V_strb_V_0_state == 2'd3)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_state == 2'd1)) | ((inStream_V_strb_V_0_vld_in == 1'b1) & (inStream_V_strb_V_0_state == 2'd2)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_state == 2'd2)) | ((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_state == 2'd3)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_state == 2'd1)) | ((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1) & (inStream_V_user_V_0_state == 2'd3)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_state == 2'd1)) | ((inStream_V_user_V_0_vld_in == 1'b1) & (inStream_V_user_V_0_state == 2'd2)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_state == 2'd2)) | ((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_state == 2'd3)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_state == 2'd1)) | ((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1) & (outStream_V_data_V_1_state == 2'd3)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_state == 2'd1)) | ((outStream_V_data_V_1_vld_in == 1'b1) & (outStream_V_data_V_1_state == 2'd2)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_state == 2'd2)) | ((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_state == 2'd3)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_state == 2'd1)) | ((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1) & (outStream_V_dest_V_1_state == 2'd3)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_state == 2'd1)) | ((outStream_V_dest_V_1_vld_in == 1'b1) & (outStream_V_dest_V_1_state == 2'd2)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_state == 2'd2)) | ((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_state == 2'd3)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_state == 2'd1)) | ((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1) & (outStream_V_id_V_1_state == 2'd3)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_state == 2'd1)) | ((outStream_V_id_V_1_vld_in == 1'b1) & (outStream_V_id_V_1_state == 2'd2)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_state == 2'd2)) | ((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_state == 2'd3)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_state == 2'd1)) | ((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1) & (outStream_V_keep_V_1_state == 2'd3)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_state == 2'd1)) | ((outStream_V_keep_V_1_vld_in == 1'b1) & (outStream_V_keep_V_1_state == 2'd2)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_state == 2'd2)) | ((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_state == 2'd3)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_state == 2'd1)) | ((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1) & (outStream_V_last_V_1_state == 2'd3)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_state == 2'd1)) | ((outStream_V_last_V_1_vld_in == 1'b1) & (outStream_V_last_V_1_state == 2'd2)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_state == 2'd2)) | ((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_state == 2'd3)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_state == 2'd1)) | ((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1) & (outStream_V_strb_V_1_state == 2'd3)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_state == 2'd1)) | ((outStream_V_strb_V_1_vld_in == 1'b1) & (outStream_V_strb_V_1_state == 2'd2)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_state == 2'd2)) | ((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_state == 2'd3)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_state == 2'd1)) | ((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1) & (outStream_V_user_V_1_state == 2'd3)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_state == 2'd1)) | ((outStream_V_user_V_1_vld_in == 1'b1) & (outStream_V_user_V_1_state == 2'd2)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_9_fu_853_p2 == 1'd1) & (exitcond6_fu_830_p2 == 1'd1))) begin
        c_reg_517 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1))) begin
        c_reg_517 <= c_1_reg_1423;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        cluster_1_reg_460 <= c_2_reg_1307;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd0))) begin
        cluster_1_reg_460 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        cluster_reg_435 <= cluster_2_fu_1002_p3;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd0))) begin
        cluster_reg_435 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond1_i_fu_869_p2 == 1'd0))) begin
        distance_i_reg_483 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        distance_i_reg_483 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state39) & (tmp_11_fu_1016_p2 == 1'd0))) begin
                end_fu_136[0] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((exitcond4_fu_802_p2 == 1'd1) | (tmp_reg_1205 == 1'd0)))) begin
                end_fu_136[0] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (tmp_9_reg_1290 == 1'd1) & (exitcond7_fu_1090_p2 == 1'd0))) begin
        f_reg_540 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        f_reg_540 <= f_1_reg_1436;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_623_p2 == 1'd1) & (tmp_fu_635_p2 == 1'd1))) begin
        i1_reg_367 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_771_p2 == 1'd1))) begin
        i1_reg_367 <= i_3_reg_1234;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_759_p2 == 1'd1))) begin
        i5_reg_401 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (tmp_reg_1205 == 1'd1) & (exitcond4_fu_802_p2 == 1'd0))) begin
        i5_reg_401 <= i_2_fu_808_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (exitcond8_fu_1043_p2 == 1'd1))) begin
        i6_reg_412 <= i_4_reg_1275;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((exitcond4_fu_802_p2 == 1'd1) | (tmp_reg_1205 == 1'd0)))) begin
        i6_reg_412 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_640_p2 == 1'd1))) begin
        i_reg_332 <= i_1_reg_1200;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_332 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        idx_reg_551 <= idx_1_reg_1474;
    end else if (((1'b1 == ap_CS_fsm_state49) & ((exitcond7_fu_1090_p2 == 1'd1) | (tmp_9_reg_1290 == 1'd0)))) begin
        idx_reg_551 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_759_p2 == 1'd0))) begin
        j2_reg_390 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        j2_reg_390 <= j_2_reg_1242;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        j7_reg_506 <= j_4_reg_1400;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        j7_reg_506 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond1_i_fu_869_p2 == 1'd0))) begin
        j_i_reg_495 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        j_i_reg_495 <= j_3_reg_1320;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_623_p2 == 1'd0))) begin
        j_reg_356 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        j_reg_356 <= j_1_reg_1212;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        min_distance_i_reg_448 <= min_distance_1_fu_1009_p3;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd0))) begin
        min_distance_i_reg_448 <= 32'd1371161527;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_623_p2 == 1'd1) & (tmp_fu_635_p2 == 1'd1))) begin
        phi_mul1_reg_378 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_771_p2 == 1'd1))) begin
        phi_mul1_reg_378 <= next_mul2_reg_1226;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        phi_mul3_reg_471 <= next_mul4_reg_1294;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd0))) begin
        phi_mul3_reg_471 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (exitcond8_fu_1043_p2 == 1'd1))) begin
        phi_mul5_reg_423 <= next_mul6_reg_1267;
    end else if (((1'b1 == ap_CS_fsm_state8) & ((exitcond4_fu_802_p2 == 1'd1) | (tmp_reg_1205 == 1'd0)))) begin
        phi_mul5_reg_423 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_9_fu_853_p2 == 1'd1) & (exitcond6_fu_830_p2 == 1'd1))) begin
        phi_mul7_reg_528 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1))) begin
        phi_mul7_reg_528 <= next_mul8_reg_1415;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_640_p2 == 1'd1))) begin
        phi_mul_reg_344 <= next_mul_reg_1192;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_344 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        reg_598 <= points_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_598 <= points_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (tmp_9_reg_1290 == 1'd1))) begin
        c_1_reg_1423 <= c_1_fu_1096_p2;
        next_mul8_reg_1415 <= next_mul8_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_2_reg_1307 <= c_2_fu_875_p2;
        cluster_1_cast6_reg_1299[4 : 0] <= cluster_1_cast6_fu_865_p1[4 : 0];
        next_mul4_reg_1294 <= next_mul4_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        centroids_load_1_reg_1347 <= centroids_q1;
        centroids_load_reg_1337 <= centroids_q0;
        points_load_2_reg_1342 <= points_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        distance_2_reg_1367 <= grp_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd1))) begin
        end_cast_reg_1285[0] <= end_cast_fu_849_p1[0];
        tmp_9_reg_1290 <= tmp_9_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        f_1_reg_1436 <= f_1_fu_1113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gain_read_reg_1187 <= gain;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1200 <= i_1_fu_629_p2;
        next_mul_reg_1192 <= next_mul_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_3_reg_1234 <= i_3_fu_765_p2;
        next_mul2_reg_1226 <= next_mul2_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_4_reg_1275 <= i_4_fu_836_p2;
        next_mul6_reg_1267 <= next_mul6_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74))) begin
        idx_1_reg_1474 <= idx_1_fu_1139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_1212 <= j_1_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_1242 <= j_2_fu_777_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_3_reg_1320 <= j_3_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        j_4_reg_1400 <= j_4_fu_1049_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        new_centroids_addr_1_reg_1456 <= tmp_43_cast_fu_1129_p1;
        tmp_43_cast_reg_1451[9 : 0] <= tmp_43_cast_fu_1129_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (exitcond8_fu_1043_p2 == 1'd0))) begin
        new_centroids_addr_reg_1405 <= tmp_44_cast_fu_1068_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (tmp_9_reg_1290 == 1'd1) & (exitcond7_fu_1090_p2 == 1'd0))) begin
        np_cluster_addr_1_reg_1428 <= tmp_14_fu_1102_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        np_cluster_addr_reg_1387 <= tmp_12_fu_1027_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= results_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= results_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= valref_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= valref_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= valref_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= valref_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= valref_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= valref_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= valOut_last_V_reg_1484;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= valOut_last_V_reg_1484;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= valref_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= valref_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= valref_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= valref_user_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_605 <= grp_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state42))) begin
        reg_611 <= new_centroids_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond1_i_fu_869_p2 == 1'd1))) begin
        results_addr_1_reg_1312[4 : 0] <= tmp_10_reg_1280[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd0))) begin
        tmp_10_reg_1280[4 : 0] <= tmp_10_fu_842_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_771_p2 == 1'd0))) begin
        tmp_15_reg_1247 <= tmp_15_fu_787_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        tmp_18_reg_1461 <= grp_fu_579_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        tmp_19_reg_1466 <= grp_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_21_reg_1392 <= tmp_21_fu_1181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd0))) begin
        tmp_33_reg_1441 <= tmp_33_fu_1123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_640_p2 == 1'd0))) begin
        tmp_4_reg_1222 <= tmp_4_fu_688_p2;
        tmp_s_reg_1217 <= tmp_s_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_6_i_reg_1352 <= grp_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_7_i_reg_1357 <= grp_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_623_p2 == 1'd1))) begin
        tmp_reg_1205 <= tmp_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74) & (exitcond_fu_1133_p2 == 1'd0))) begin
        valOut_last_V_reg_1484 <= valOut_last_V_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_4_reg_1222 == 1'd1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        valref_dest_V <= inStream_V_dest_V_0_data_out;
        valref_id_V <= inStream_V_id_V_0_data_out;
        valref_keep_V <= inStream_V_keep_V_0_data_out;
        valref_strb_V <= inStream_V_strb_V_0_data_out;
        valref_user_V <= inStream_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74) & (exitcond_fu_1133_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74) & (exitcond_fu_1133_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        centroids_address0 = tmp_41_cast_fu_903_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_address0 = tmp_36_cast_fu_798_p1;
    end else begin
        centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        centroids_address1 = tmp_43_cast_reg_1451;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        centroids_address1 = tmp_41_cast_fu_903_p1;
    end else begin
        centroids_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        centroids_ce0 = 1'b1;
    end else begin
        centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state11))) begin
        centroids_ce1 = 1'b1;
    end else begin
        centroids_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        centroids_we0 = 1'b1;
    end else begin
        centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        centroids_we1 = 1'b1;
    end else begin
        centroids_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_562_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_562_opcode = 2'd0;
    end else begin
        grp_fu_562_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_562_p0 = reg_611;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_562_p0 = distance_i_reg_483;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_562_p0 = reg_598;
    end else begin
        grp_fu_562_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_562_p1 = reg_598;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_562_p1 = tmp_7_i_reg_1357;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_562_p1 = centroids_load_reg_1337;
    end else begin
        grp_fu_562_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        new_centroids_address0 = new_centroids_addr_1_reg_1456;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        new_centroids_address0 = tmp_43_cast_fu_1129_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        new_centroids_address0 = new_centroids_addr_reg_1405;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        new_centroids_address0 = tmp_44_cast_fu_1068_p1;
    end else begin
        new_centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state56))) begin
        new_centroids_ce0 = 1'b1;
    end else begin
        new_centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        new_centroids_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        new_centroids_d0 = reg_605;
    end else begin
        new_centroids_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state56))) begin
        new_centroids_we0 = 1'b1;
    end else begin
        new_centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd0)))) begin
        np_cluster_address0 = np_cluster_addr_1_reg_1428;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        np_cluster_address0 = np_cluster_addr_reg_1387;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        np_cluster_address0 = tmp_12_fu_1027_p1;
    end else begin
        np_cluster_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | ((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd0)))) begin
        np_cluster_ce0 = 1'b1;
    end else begin
        np_cluster_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1))) begin
        np_cluster_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        np_cluster_d0 = tmp_13_fu_1036_p2;
    end else begin
        np_cluster_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1)))) begin
        np_cluster_we0 = 1'b1;
    end else begin
        np_cluster_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        points_address0 = tmp_42_cast_fu_914_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        points_address0 = tmp_34_cast_fu_719_p1;
    end else begin
        points_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        points_address1 = tmp_45_cast_fu_1079_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        points_address1 = tmp_42_cast_fu_914_p1;
    end else begin
        points_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state11))) begin
        points_ce1 = 1'b1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        points_we0 = 1'b1;
    end else begin
        points_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        results_address0 = tmp_20_fu_1145_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        results_address0 = 7'd20;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        results_address0 = results_addr_1_reg_1312;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        results_address0 = tmp_10_reg_1280;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        results_address0 = tmp_6_fu_814_p1;
    end else begin
        results_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74)))) begin
        results_ce0 = 1'b1;
    end else begin
        results_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        results_d0 = end_cast_reg_1285;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        results_d0 = cluster_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        results_d0 = 32'd0;
    end else begin
        results_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state49) & ((exitcond7_fu_1090_p2 == 1'd1) | (tmp_9_reg_1290 == 1'd0))) | ((1'b1 == ap_CS_fsm_state39) & (tmp_11_fu_1016_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (tmp_reg_1205 == 1'd1) & (exitcond4_fu_802_p2 == 1'd0)))) begin
        results_we0 = 1'b1;
    end else begin
        results_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_623_p2 == 1'd1) & (tmp_fu_635_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_623_p2 == 1'd1) & (tmp_fu_635_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_759_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_771_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ((exitcond4_fu_802_p2 == 1'd1) | (tmp_reg_1205 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond6_fu_830_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond1_i_fu_869_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond_i_fu_881_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (exitcond8_fu_1043_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & ((exitcond7_fu_1090_p2 == 1'd1) | (tmp_9_reg_1290 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            if (((1'b1 == ap_CS_fsm_state50) & (exitcond9_fu_1107_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state74 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74) & (exitcond_fu_1133_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state74) & (exitcond_fu_1133_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state74 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_1096_p2 = (c_reg_517 + 5'd1);

assign c_2_fu_875_p2 = (cluster_1_reg_460 + 5'd1);

assign centroids_d0 = inStream_V_data_V_0_data_out;

assign cluster_1_cast6_fu_865_p1 = cluster_1_reg_460;

assign cluster_2_fu_1002_p3 = ((tmp_30_fu_996_p2[0:0] === 1'b1) ? cluster_1_cast6_reg_1299 : cluster_reg_435);

assign distance_1_to_int_fu_919_p1 = distance_2_reg_1367;

assign end_cast_fu_849_p1 = end_fu_136;

assign exitcond1_fu_623_p2 = ((i_reg_332 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_869_p2 = ((cluster_1_reg_460 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond2_fu_640_p2 = ((j_reg_356 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond3_fu_759_p2 = ((i1_reg_367 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond4_fu_802_p2 = ((i5_reg_401 == 5'd21) ? 1'b1 : 1'b0);

assign exitcond5_fu_771_p2 = ((j2_reg_390 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond6_fu_830_p2 = ((i6_reg_412 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond7_fu_1090_p2 = ((c_reg_517 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond8_fu_1043_p2 = ((j7_reg_506 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond9_fu_1107_p2 = ((f_reg_540 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond_fu_1133_p2 = ((idx_reg_551 == 5'd21) ? 1'b1 : 1'b0);

assign exitcond_i_fu_881_p2 = ((j_i_reg_495 == 6'd50) ? 1'b1 : 1'b0);

assign f_1_fu_1113_p2 = (f_reg_540 + 6'd1);

assign i_1_fu_629_p2 = (i_reg_332 + 5'd1);

assign i_2_fu_808_p2 = (i5_reg_401 + 5'd1);

assign i_3_fu_765_p2 = (i1_reg_367 + 5'd1);

assign i_4_fu_836_p2 = (i6_reg_412 + 5'd1);

assign idx_1_fu_1139_p2 = (idx_reg_551 + 5'd1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign j_1_fu_646_p2 = (j_reg_356 + 6'd1);

assign j_2_fu_777_p2 = (j2_reg_390 + 6'd1);

assign j_3_fu_887_p2 = (j_i_reg_495 + 6'd1);

assign j_4_fu_1049_p2 = (j7_reg_506 + 6'd1);

assign min_distance_1_fu_1009_p3 = ((tmp_30_fu_996_p2[0:0] === 1'b1) ? distance_2_reg_1367 : min_distance_i_reg_448);

assign min_distance_i_to_in_fu_936_p1 = min_distance_i_reg_448;

assign next_mul2_fu_753_p2 = (phi_mul1_reg_378 + 10'd50);

assign next_mul4_fu_859_p2 = (phi_mul3_reg_471 + 10'd50);

assign next_mul6_fu_824_p2 = (phi_mul5_reg_423 + 10'd50);

assign next_mul8_fu_1084_p2 = (phi_mul7_reg_528 + 10'd50);

assign next_mul_fu_617_p2 = (phi_mul_reg_344 + 10'd50);

assign notlhs1_fu_972_p2 = ((tmp_24_fu_940_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_954_p2 = ((tmp_22_fu_922_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_978_p2 = ((tmp_25_fu_950_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_960_p2 = ((tmp_23_fu_932_p1 == 23'd0) ? 1'b1 : 1'b0);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign points_d0 = inStream_V_data_V_0_data_out;

assign tmp_10_fu_842_p1 = i6_reg_412;

assign tmp_11_fu_1016_p2 = ((cluster_reg_435 == results_q0) ? 1'b1 : 1'b0);

assign tmp_12_fu_1027_p1 = cluster_reg_435;

assign tmp_13_fu_1036_p2 = (32'd1 + np_cluster_q0);

assign tmp_14_fu_1102_p1 = c_reg_517;

assign tmp_15_cast9_fu_1055_p1 = j7_reg_506;

assign tmp_15_cast_fu_1059_p1 = j7_reg_506;

assign tmp_15_fu_787_p2 = (phi_mul1_reg_378 + tmp_8_cast_fu_783_p1);

assign tmp_17_cast_fu_1119_p1 = f_reg_540;

assign tmp_20_fu_1145_p1 = idx_reg_551;

assign tmp_21_fu_1181_p0 = 11'd50;

assign tmp_21_fu_1181_p1 = cluster_reg_435[10:0];

assign tmp_22_fu_922_p4 = {{distance_1_to_int_fu_919_p1[30:23]}};

assign tmp_23_fu_932_p1 = distance_1_to_int_fu_919_p1[22:0];

assign tmp_24_fu_940_p4 = {{min_distance_i_to_in_fu_936_p1[30:23]}};

assign tmp_25_fu_950_p1 = min_distance_i_to_in_fu_936_p1[22:0];

assign tmp_26_fu_966_p2 = (notrhs_fu_960_p2 | notlhs_fu_954_p2);

assign tmp_27_fu_984_p2 = (notrhs1_fu_978_p2 | notlhs1_fu_972_p2);

assign tmp_28_fu_990_p2 = (tmp_27_fu_984_p2 & tmp_26_fu_966_p2);

assign tmp_2_cast_fu_652_p1 = j_reg_356;

assign tmp_2_fu_662_p1 = j_reg_356[4:0];

assign tmp_30_fu_996_p2 = (tmp_29_fu_583_p2 & tmp_28_fu_990_p2);

assign tmp_31_fu_897_p2 = (phi_mul3_reg_471 + tmp_4_i_cast_fu_893_p1);

assign tmp_32_fu_908_p2 = (phi_mul5_reg_423 + tmp_4_i_cast_fu_893_p1);

assign tmp_33_fu_1123_p2 = (phi_mul7_reg_528 + tmp_17_cast_fu_1119_p1);

assign tmp_34_cast_fu_719_p1 = tmp_s_reg_1217;

assign tmp_34_fu_1063_p2 = ($signed(tmp_21_reg_1392) + $signed(tmp_15_cast_fu_1059_p1));

assign tmp_35_fu_1073_p2 = (phi_mul5_reg_423 + tmp_15_cast9_fu_1055_p1);

assign tmp_36_cast_fu_798_p1 = tmp_15_reg_1247;

assign tmp_3_fu_680_p3 = {{tmp_8_fu_672_p3}, {tmp_5_fu_666_p2}};

assign tmp_41_cast_fu_903_p1 = tmp_31_fu_897_p2;

assign tmp_42_cast_fu_914_p1 = tmp_32_fu_908_p2;

assign tmp_43_cast_fu_1129_p1 = tmp_33_reg_1441;

assign tmp_44_cast_fu_1068_p1 = $signed(tmp_34_fu_1063_p2);

assign tmp_45_cast_fu_1079_p1 = tmp_35_fu_1073_p2;

assign tmp_4_fu_688_p2 = ((tmp_3_fu_680_p3 == 6'd0) ? 1'b1 : 1'b0);

assign tmp_4_i_cast_fu_893_p1 = j_i_reg_495;

assign tmp_5_fu_666_p2 = (tmp_2_fu_662_p1 | i_reg_332);

assign tmp_6_fu_814_p1 = i5_reg_401;

assign tmp_8_cast_fu_783_p1 = j2_reg_390;

assign tmp_8_fu_672_p3 = j_reg_356[32'd5];

assign tmp_9_fu_853_p2 = ((end_fu_136 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_fu_635_p2 = ((gain_read_reg_1187 == 32'd1) ? 1'b1 : 1'b0);

assign tmp_s_fu_656_p2 = (phi_mul_reg_344 + tmp_2_cast_fu_652_p1);

assign valOut_last_V_fu_1150_p2 = ((idx_reg_551 == 5'd20) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_10_reg_1280[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    end_cast_reg_1285[31:1] <= 31'b0000000000000000000000000000000;
    cluster_1_cast6_reg_1299[31:5] <= 27'b000000000000000000000000000;
    results_addr_1_reg_1312[6:5] <= 2'b00;
    tmp_43_cast_reg_1451[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    end_fu_136[1] <= 1'b0;
end

endmodule //doKmean
