// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doKmean,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=16407143,HLS_SYN_TPT=none,HLS_SYN_MEM=134,HLS_SYN_DSP=8,HLS_SYN_FF=3554,HLS_SYN_LUT=5807,HLS_VERSION=2018_2}" *)

module doKmean (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 80'd1;
parameter    ap_ST_fsm_state2 = 80'd2;
parameter    ap_ST_fsm_state3 = 80'd4;
parameter    ap_ST_fsm_state4 = 80'd8;
parameter    ap_ST_fsm_state5 = 80'd16;
parameter    ap_ST_fsm_state6 = 80'd32;
parameter    ap_ST_fsm_state7 = 80'd64;
parameter    ap_ST_fsm_state8 = 80'd128;
parameter    ap_ST_fsm_state9 = 80'd256;
parameter    ap_ST_fsm_state10 = 80'd512;
parameter    ap_ST_fsm_state11 = 80'd1024;
parameter    ap_ST_fsm_state12 = 80'd2048;
parameter    ap_ST_fsm_state13 = 80'd4096;
parameter    ap_ST_fsm_state14 = 80'd8192;
parameter    ap_ST_fsm_state15 = 80'd16384;
parameter    ap_ST_fsm_state16 = 80'd32768;
parameter    ap_ST_fsm_state17 = 80'd65536;
parameter    ap_ST_fsm_state18 = 80'd131072;
parameter    ap_ST_fsm_state19 = 80'd262144;
parameter    ap_ST_fsm_state20 = 80'd524288;
parameter    ap_ST_fsm_state21 = 80'd1048576;
parameter    ap_ST_fsm_state22 = 80'd2097152;
parameter    ap_ST_fsm_state23 = 80'd4194304;
parameter    ap_ST_fsm_state24 = 80'd8388608;
parameter    ap_ST_fsm_state25 = 80'd16777216;
parameter    ap_ST_fsm_state26 = 80'd33554432;
parameter    ap_ST_fsm_state27 = 80'd67108864;
parameter    ap_ST_fsm_state28 = 80'd134217728;
parameter    ap_ST_fsm_state29 = 80'd268435456;
parameter    ap_ST_fsm_state30 = 80'd536870912;
parameter    ap_ST_fsm_state31 = 80'd1073741824;
parameter    ap_ST_fsm_state32 = 80'd2147483648;
parameter    ap_ST_fsm_state33 = 80'd4294967296;
parameter    ap_ST_fsm_state34 = 80'd8589934592;
parameter    ap_ST_fsm_state35 = 80'd17179869184;
parameter    ap_ST_fsm_state36 = 80'd34359738368;
parameter    ap_ST_fsm_state37 = 80'd68719476736;
parameter    ap_ST_fsm_state38 = 80'd137438953472;
parameter    ap_ST_fsm_state39 = 80'd274877906944;
parameter    ap_ST_fsm_state40 = 80'd549755813888;
parameter    ap_ST_fsm_state41 = 80'd1099511627776;
parameter    ap_ST_fsm_state42 = 80'd2199023255552;
parameter    ap_ST_fsm_state43 = 80'd4398046511104;
parameter    ap_ST_fsm_state44 = 80'd8796093022208;
parameter    ap_ST_fsm_state45 = 80'd17592186044416;
parameter    ap_ST_fsm_state46 = 80'd35184372088832;
parameter    ap_ST_fsm_state47 = 80'd70368744177664;
parameter    ap_ST_fsm_state48 = 80'd140737488355328;
parameter    ap_ST_fsm_state49 = 80'd281474976710656;
parameter    ap_ST_fsm_state50 = 80'd562949953421312;
parameter    ap_ST_fsm_state51 = 80'd1125899906842624;
parameter    ap_ST_fsm_state52 = 80'd2251799813685248;
parameter    ap_ST_fsm_state53 = 80'd4503599627370496;
parameter    ap_ST_fsm_state54 = 80'd9007199254740992;
parameter    ap_ST_fsm_state55 = 80'd18014398509481984;
parameter    ap_ST_fsm_state56 = 80'd36028797018963968;
parameter    ap_ST_fsm_state57 = 80'd72057594037927936;
parameter    ap_ST_fsm_state58 = 80'd144115188075855872;
parameter    ap_ST_fsm_state59 = 80'd288230376151711744;
parameter    ap_ST_fsm_state60 = 80'd576460752303423488;
parameter    ap_ST_fsm_state61 = 80'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 80'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 80'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 80'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 80'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 80'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 80'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 80'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 80'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 80'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 80'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 80'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 80'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 80'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 80'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 80'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 80'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 80'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 80'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 80'd604462909807314587353088;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [79:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [31:0] gain;
reg   [15:0] points_address0;
reg    points_ce0;
reg    points_we0;
wire   [31:0] points_d0;
wire   [31:0] points_q0;
reg   [15:0] points_address1;
reg    points_ce1;
wire   [31:0] points_q1;
reg   [3:0] valref_keep_V;
reg   [3:0] valref_strb_V;
reg   [1:0] valref_user_V;
reg   [4:0] valref_id_V;
reg   [5:0] valref_dest_V;
reg   [9:0] centroids_address0;
reg    centroids_ce0;
reg    centroids_we0;
wire   [31:0] centroids_d0;
wire   [31:0] centroids_q0;
reg   [9:0] centroids_address1;
reg    centroids_ce1;
reg    centroids_we1;
wire   [31:0] centroids_q1;
reg   [9:0] results_address0;
reg    results_ce0;
reg    results_we0;
reg   [31:0] results_d0;
wire   [31:0] results_q0;
reg   [4:0] np_cluster_address0;
reg    np_cluster_ce0;
reg    np_cluster_we0;
reg   [31:0] np_cluster_d0;
wire   [31:0] np_cluster_q0;
reg   [9:0] new_centroids_address0;
reg    new_centroids_ce0;
reg    new_centroids_we0;
reg   [31:0] new_centroids_d0;
wire   [31:0] new_centroids_q0;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
reg   [31:0] reg_671;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_631_p2;
reg   [31:0] reg_678;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state51;
reg   [31:0] reg_684;
wire    ap_CS_fsm_state60;
reg   [31:0] gain_read_reg_1318;
wire   [15:0] next_mul_fu_690_p2;
reg   [15:0] next_mul_reg_1324;
wire    ap_CS_fsm_state2;
wire   [9:0] i_1_fu_702_p2;
reg   [9:0] i_1_reg_1332;
wire   [5:0] tmp_4_fu_708_p1;
reg   [5:0] tmp_4_reg_1337;
wire   [0:0] exitcond1_fu_696_p2;
wire   [0:0] icmp_fu_727_p2;
reg   [0:0] icmp_reg_1342;
wire   [5:0] j_1_fu_739_p2;
reg   [5:0] j_1_reg_1349;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_6_fu_749_p2;
reg   [15:0] tmp_6_reg_1354;
wire   [0:0] exitcond2_fu_733_p2;
wire   [0:0] tmp_3_fu_778_p2;
reg   [0:0] tmp_3_reg_1359;
wire   [9:0] next_mul2_fu_843_p2;
reg   [9:0] next_mul2_reg_1363;
wire    ap_CS_fsm_state5;
wire   [4:0] i_2_fu_855_p2;
reg   [4:0] i_2_reg_1371;
wire   [5:0] j_2_fu_867_p2;
reg   [5:0] j_2_reg_1379;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_22_fu_877_p2;
reg   [9:0] tmp_22_reg_1384;
wire   [0:0] exitcond4_fu_861_p2;
wire   [9:0] i_3_fu_898_p2;
reg   [9:0] i_3_reg_1392;
wire    ap_CS_fsm_state8;
wire   [15:0] next_mul6_fu_914_p2;
reg   [15:0] next_mul6_reg_1404;
wire    ap_CS_fsm_state10;
wire   [9:0] i_4_fu_926_p2;
reg   [9:0] i_4_reg_1412;
wire   [63:0] tmp_8_fu_932_p1;
reg   [63:0] tmp_8_reg_1417;
wire   [0:0] exitcond6_fu_920_p2;
wire   [31:0] end_cast_fu_936_p1;
reg   [31:0] end_cast_reg_1422;
wire   [9:0] next_mul4_fu_940_p2;
reg   [9:0] next_mul4_reg_1427;
wire    ap_CS_fsm_state11;
wire   [31:0] cluster_1_cast7_fu_946_p1;
reg   [31:0] cluster_1_cast7_reg_1432;
wire   [4:0] c_2_fu_956_p2;
reg   [4:0] c_2_reg_1440;
reg   [9:0] results_addr_1_reg_1445;
wire   [0:0] exitcond1_i_fu_950_p2;
wire   [5:0] j_4_fu_968_p2;
reg   [5:0] j_4_reg_1453;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_i_fu_962_p2;
reg   [31:0] centroids_load_reg_1470;
reg   [31:0] points_load_2_reg_1475;
reg   [31:0] centroids_load_1_reg_1480;
wire   [31:0] grp_fu_635_p2;
reg   [31:0] tmp_6_i_reg_1485;
wire   [31:0] grp_fu_640_p2;
reg   [31:0] tmp_7_i_reg_1490;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_657_p2;
reg   [31:0] distance_2_reg_1500;
wire    ap_CS_fsm_state38;
wire   [31:0] cluster_2_fu_1087_p3;
wire    ap_CS_fsm_state39;
wire   [31:0] min_distance_1_fu_1094_p3;
reg   [4:0] np_cluster_addr_reg_1520;
wire    ap_CS_fsm_state40;
wire   [9:0] next_mul8_fu_1124_p2;
reg   [9:0] next_mul8_reg_1525;
wire    ap_CS_fsm_state42;
wire   [4:0] i_5_fu_1136_p2;
reg   [4:0] i_5_reg_1533;
reg   [9:0] results_addr_2_reg_1538;
wire   [0:0] exitcond7_fu_1130_p2;
wire   [0:0] tmp_10_fu_1147_p2;
reg   [0:0] tmp_10_reg_1543;
wire   [0:0] icmp1_fu_1168_p2;
reg   [0:0] icmp1_reg_1547;
wire   [5:0] j_3_fu_1180_p2;
reg   [5:0] j_3_reg_1554;
wire    ap_CS_fsm_state43;
wire  signed [10:0] tmp_27_fu_1186_p1;
reg  signed [10:0] tmp_27_reg_1559;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg   [9:0] new_centroids_addr_reg_1569;
wire   [9:0] next_mul1_fu_1213_p2;
reg   [9:0] next_mul1_reg_1574;
wire    ap_CS_fsm_state53;
wire   [4:0] c_1_fu_1225_p2;
reg   [4:0] c_1_reg_1582;
reg   [4:0] np_cluster_addr_1_reg_1587;
wire   [0:0] exitcond9_fu_1219_p2;
wire   [5:0] f_1_fu_1242_p2;
reg   [5:0] f_1_reg_1595;
wire    ap_CS_fsm_state54;
wire   [9:0] tmp_41_fu_1252_p2;
reg   [9:0] tmp_41_reg_1600;
wire   [0:0] exitcond10_fu_1236_p2;
wire    ap_CS_fsm_state55;
wire   [63:0] tmp_51_cast_fu_1258_p1;
reg   [63:0] tmp_51_cast_reg_1610;
wire    ap_CS_fsm_state59;
reg   [9:0] new_centroids_addr_1_reg_1615;
wire   [31:0] grp_fu_648_p1;
reg   [31:0] tmp_19_reg_1620;
wire   [31:0] grp_fu_644_p2;
reg   [31:0] tmp_20_reg_1625;
wire    ap_CS_fsm_state76;
wire   [4:0] idx_1_fu_1268_p2;
reg   [4:0] idx_1_reg_1633;
wire    ap_CS_fsm_state78;
reg    ap_block_state78;
wire   [0:0] exitcond_fu_1262_p2;
wire   [0:0] valOut_last_V_fu_1279_p2;
reg   [0:0] valOut_last_V_reg_1643;
reg   [9:0] i_reg_376;
reg   [15:0] phi_mul_reg_388;
reg   [5:0] j_reg_400;
reg   [4:0] i1_reg_411;
reg   [9:0] phi_mul1_reg_422;
reg   [5:0] j2_reg_434;
wire   [0:0] exitcond3_fu_849_p2;
reg   [9:0] i5_reg_445;
reg   [9:0] i7_reg_457;
wire    ap_CS_fsm_state41;
wire   [0:0] exitcond5_fu_892_p2;
reg   [15:0] phi_mul5_reg_468;
reg  signed [31:0] cluster_reg_480;
reg   [31:0] min_distance_i_reg_493;
reg   [4:0] cluster_1_reg_505;
reg   [9:0] phi_mul3_reg_516;
reg   [31:0] distance_i_reg_528;
reg   [5:0] j_i_reg_540;
reg   [4:0] i8_reg_551;
wire   [0:0] exitcond8_fu_1174_p2;
reg   [9:0] phi_mul7_reg_562;
reg   [5:0] j9_reg_574;
wire    ap_CS_fsm_state52;
reg   [4:0] c_reg_586;
reg   [9:0] phi_mul9_reg_597;
reg   [5:0] f_reg_609;
wire    ap_CS_fsm_state77;
reg   [4:0] idx_reg_620;
wire   [63:0] tmp_39_cast_fu_809_p1;
wire   [63:0] tmp_41_cast_fu_888_p1;
wire   [63:0] tmp_7_fu_909_p1;
wire   [63:0] tmp_48_cast_fu_988_p1;
wire   [63:0] tmp_49_cast_fu_999_p1;
wire  signed [63:0] tmp_12_fu_1112_p1;
wire   [63:0] tmp_11_fu_1142_p1;
wire   [63:0] tmp_45_cast_fu_1204_p1;
wire  signed [63:0] tmp_47_cast_fu_1209_p1;
wire   [63:0] tmp_17_fu_1231_p1;
wire   [63:0] tmp_21_fu_1274_p1;
reg   [1:0] end_fu_174;
wire   [0:0] tmp_9_fu_1101_p2;
wire   [31:0] tmp_13_fu_1117_p2;
reg   [31:0] grp_fu_631_p0;
reg   [31:0] grp_fu_631_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state61;
wire   [31:0] gain_off_fu_712_p2;
wire   [30:0] tmp_fu_717_p4;
wire   [15:0] tmp_1_cast_fu_745_p1;
wire   [3:0] tmp_15_fu_760_p4;
wire   [5:0] tmp_14_fu_755_p2;
wire   [9:0] tmp_2_fu_770_p3;
wire   [9:0] tmp_6_cast_fu_873_p1;
wire   [9:0] tmp_4_i_cast_fu_978_p1;
wire   [9:0] tmp_39_fu_982_p2;
wire   [15:0] tmp_4_i_cast1_fu_974_p1;
wire   [15:0] tmp_40_fu_993_p2;
wire   [31:0] distance_1_to_int_fu_1004_p1;
wire   [31:0] min_distance_i_to_in_fu_1021_p1;
wire   [7:0] tmp_29_fu_1007_p4;
wire   [22:0] tmp_32_fu_1017_p1;
wire   [0:0] notrhs_fu_1045_p2;
wire   [0:0] notlhs_fu_1039_p2;
wire   [7:0] tmp_31_fu_1025_p4;
wire   [22:0] tmp_38_fu_1035_p1;
wire   [0:0] notrhs1_fu_1063_p2;
wire   [0:0] notlhs1_fu_1057_p2;
wire   [0:0] tmp_33_fu_1051_p2;
wire   [0:0] tmp_34_fu_1069_p2;
wire   [0:0] tmp_35_fu_1075_p2;
wire   [0:0] tmp_36_fu_652_p2;
wire   [0:0] tmp_37_fu_1081_p2;
wire   [31:0] gain_off1_fu_1153_p2;
wire   [30:0] tmp_24_fu_1158_p4;
wire   [9:0] tmp_14_cast_fu_1194_p1;
wire   [9:0] tmp_26_fu_1198_p2;
wire  signed [10:0] grp_fu_1310_p3;
wire   [9:0] tmp_18_cast_fu_1248_p1;
wire   [6:0] grp_fu_1310_p0;
wire   [5:0] grp_fu_1310_p2;
reg   [1:0] grp_fu_631_opcode;
reg   [79:0] ap_NS_fsm;
wire   [10:0] grp_fu_1310_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 80'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 valref_keep_V = 4'd0;
#0 valref_strb_V = 4'd0;
#0 valref_user_V = 2'd0;
#0 valref_id_V = 5'd0;
#0 valref_dest_V = 6'd0;
end

doKmean_points #(
    .DataWidth( 32 ),
    .AddressRange( 50000 ),
    .AddressWidth( 16 ))
points_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(points_address0),
    .ce0(points_ce0),
    .we0(points_we0),
    .d0(points_d0),
    .q0(points_q0),
    .address1(points_address1),
    .ce1(points_ce1),
    .q1(points_q1)
);

doKmean_centroids #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
centroids_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(centroids_address0),
    .ce0(centroids_ce0),
    .we0(centroids_we0),
    .d0(centroids_d0),
    .q0(centroids_q0),
    .address1(centroids_address1),
    .ce1(centroids_ce1),
    .we1(centroids_we1),
    .d1(tmp_20_reg_1625),
    .q1(centroids_q1)
);

doKmean_results #(
    .DataWidth( 32 ),
    .AddressRange( 1001 ),
    .AddressWidth( 10 ))
results_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(results_address0),
    .ce0(results_ce0),
    .we0(results_we0),
    .d0(results_d0),
    .q0(results_q0)
);

doKmean_np_cluster #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
np_cluster_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(np_cluster_address0),
    .ce0(np_cluster_ce0),
    .we0(np_cluster_we0),
    .d0(np_cluster_d0),
    .q0(np_cluster_q0)
);

doKmean_new_centrbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
new_centroids_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(new_centroids_address0),
    .ce0(new_centroids_ce0),
    .we0(new_centroids_we0),
    .d0(new_centroids_d0),
    .q0(new_centroids_q0)
);

doKmean_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doKmean_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .gain(gain)
);

doKmean_faddfsub_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_faddfsub_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_631_p0),
    .din1(grp_fu_631_p1),
    .opcode(grp_fu_631_opcode),
    .ce(1'b1),
    .dout(grp_fu_631_p2)
);

doKmean_fsub_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fsub_32nsdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(points_load_2_reg_1475),
    .din1(centroids_load_1_reg_1480),
    .ce(1'b1),
    .dout(grp_fu_635_p2)
);

doKmean_fmul_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fmul_32nseOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_678),
    .din1(tmp_6_i_reg_1485),
    .ce(1'b1),
    .dout(grp_fu_640_p2)
);

doKmean_fdiv_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fdiv_32nsfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_684),
    .din1(tmp_19_reg_1620),
    .ce(1'b1),
    .dout(grp_fu_644_p2)
);

doKmean_sitofp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_sitofp_32g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(np_cluster_q0),
    .ce(1'b1),
    .dout(grp_fu_648_p1)
);

doKmean_fcmp_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
doKmean_fcmp_32nshbi_U6(
    .din0(distance_2_reg_1500),
    .din1(min_distance_i_reg_493),
    .opcode(5'd4),
    .dout(tmp_36_fu_652_p2)
);

doKmean_fsqrt_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fsqrt_32nibs_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(distance_i_reg_528),
    .ce(1'b1),
    .dout(grp_fu_657_p2)
);

doKmean_mac_muladjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
doKmean_mac_muladjbC_U8(
    .din0(grp_fu_1310_p0),
    .din1(tmp_27_reg_1559),
    .din2(grp_fu_1310_p2),
    .dout(grp_fu_1310_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_state == 2'd2)) | ((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_state == 2'd3)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1) & (inStream_V_data_V_0_state == 2'd3)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_vld_in == 1'b1) & (inStream_V_data_V_0_state == 2'd2)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_state == 2'd2)) | ((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_state == 2'd3)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_state == 2'd1)) | ((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1) & (inStream_V_dest_V_0_state == 2'd3)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_state == 2'd1)) | ((inStream_V_dest_V_0_vld_in == 1'b1) & (inStream_V_dest_V_0_state == 2'd2)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_state == 2'd2)) | ((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_state == 2'd3)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_state == 2'd1)) | ((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1) & (inStream_V_id_V_0_state == 2'd3)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_state == 2'd1)) | ((inStream_V_id_V_0_vld_in == 1'b1) & (inStream_V_id_V_0_state == 2'd2)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_state == 2'd2)) | ((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_state == 2'd3)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_state == 2'd1)) | ((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_state == 2'd3)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_state == 2'd1)) | ((inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_state == 2'd2)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_state == 2'd2)) | ((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_state == 2'd3)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_state == 2'd1)) | ((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1) & (inStream_V_strb_V_0_state == 2'd3)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_state == 2'd1)) | ((inStream_V_strb_V_0_vld_in == 1'b1) & (inStream_V_strb_V_0_state == 2'd2)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_state == 2'd2)) | ((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_state == 2'd3)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_state == 2'd1)) | ((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1) & (inStream_V_user_V_0_state == 2'd3)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_state == 2'd1)) | ((inStream_V_user_V_0_vld_in == 1'b1) & (inStream_V_user_V_0_state == 2'd2)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_state == 2'd2)) | ((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_state == 2'd3)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_state == 2'd1)) | ((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1) & (outStream_V_data_V_1_state == 2'd3)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_state == 2'd1)) | ((outStream_V_data_V_1_vld_in == 1'b1) & (outStream_V_data_V_1_state == 2'd2)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_state == 2'd2)) | ((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_state == 2'd3)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_state == 2'd1)) | ((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1) & (outStream_V_dest_V_1_state == 2'd3)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_state == 2'd1)) | ((outStream_V_dest_V_1_vld_in == 1'b1) & (outStream_V_dest_V_1_state == 2'd2)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_state == 2'd2)) | ((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_state == 2'd3)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_state == 2'd1)) | ((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1) & (outStream_V_id_V_1_state == 2'd3)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_state == 2'd1)) | ((outStream_V_id_V_1_vld_in == 1'b1) & (outStream_V_id_V_1_state == 2'd2)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_state == 2'd2)) | ((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_state == 2'd3)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_state == 2'd1)) | ((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1) & (outStream_V_keep_V_1_state == 2'd3)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_state == 2'd1)) | ((outStream_V_keep_V_1_vld_in == 1'b1) & (outStream_V_keep_V_1_state == 2'd2)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_state == 2'd2)) | ((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_state == 2'd3)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_state == 2'd1)) | ((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1) & (outStream_V_last_V_1_state == 2'd3)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_state == 2'd1)) | ((outStream_V_last_V_1_vld_in == 1'b1) & (outStream_V_last_V_1_state == 2'd2)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_state == 2'd2)) | ((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_state == 2'd3)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_state == 2'd1)) | ((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1) & (outStream_V_strb_V_1_state == 2'd3)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_state == 2'd1)) | ((outStream_V_strb_V_1_vld_in == 1'b1) & (outStream_V_strb_V_1_state == 2'd2)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_state == 2'd2)) | ((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_state == 2'd3)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_state == 2'd1)) | ((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1) & (outStream_V_user_V_1_state == 2'd3)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_state == 2'd1)) | ((outStream_V_user_V_1_vld_in == 1'b1) & (outStream_V_user_V_1_state == 2'd2)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (icmp1_fu_1168_p2 == 1'd1) & (tmp_10_fu_1147_p2 == 1'd1) & (exitcond7_fu_1130_p2 == 1'd1))) begin
        c_reg_586 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1))) begin
        c_reg_586 <= c_1_reg_1582;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        cluster_1_reg_505 <= c_2_reg_1440;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd0))) begin
        cluster_1_reg_505 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        cluster_reg_480 <= cluster_2_fu_1087_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd0))) begin
        cluster_reg_480 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_950_p2 == 1'd0))) begin
        distance_i_reg_528 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        distance_i_reg_528 <= grp_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_9_fu_1101_p2 == 1'd0))) begin
                end_fu_174[0] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_892_p2 == 1'd1))) begin
                end_fu_174[0] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        f_reg_609 <= f_1_reg_1595;
    end else if (((1'b1 == ap_CS_fsm_state53) & (icmp1_reg_1547 == 1'd1) & (tmp_10_reg_1543 == 1'd1) & (exitcond9_fu_1219_p2 == 1'd0))) begin
        f_reg_609 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_727_p2 == 1'd1) & (exitcond1_fu_696_p2 == 1'd1))) begin
        i1_reg_411 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_861_p2 == 1'd1))) begin
        i1_reg_411 <= i_2_reg_1371;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        i5_reg_445 <= i_3_reg_1392;
    end else if (((1'b1 == ap_CS_fsm_state5) & ((exitcond3_fu_849_p2 == 1'd1) | (icmp_reg_1342 == 1'd0)))) begin
        i5_reg_445 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_892_p2 == 1'd1))) begin
        i7_reg_457 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        i7_reg_457 <= i_4_reg_1412;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd1))) begin
        i8_reg_551 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (exitcond8_fu_1174_p2 == 1'd1))) begin
        i8_reg_551 <= i_5_reg_1533;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_733_p2 == 1'd1))) begin
        i_reg_376 <= i_1_reg_1332;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_376 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
        idx_reg_620 <= idx_1_reg_1633;
    end else if (((1'b1 == ap_CS_fsm_state53) & ((exitcond9_fu_1219_p2 == 1'd1) | (icmp1_reg_1547 == 1'd0) | (tmp_10_reg_1543 == 1'd0)))) begin
        idx_reg_620 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        j2_reg_434 <= j_2_reg_1379;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1342 == 1'd1) & (exitcond3_fu_849_p2 == 1'd0))) begin
        j2_reg_434 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j9_reg_574 <= j_3_reg_1554;
    end else if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1130_p2 == 1'd0))) begin
        j9_reg_574 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_950_p2 == 1'd0))) begin
        j_i_reg_540 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_i_reg_540 <= j_4_reg_1453;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        j_reg_400 <= j_1_reg_1349;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_696_p2 == 1'd0))) begin
        j_reg_400 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        min_distance_i_reg_493 <= min_distance_1_fu_1094_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd0))) begin
        min_distance_i_reg_493 <= 32'd1371161527;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_727_p2 == 1'd1) & (exitcond1_fu_696_p2 == 1'd1))) begin
        phi_mul1_reg_422 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_861_p2 == 1'd1))) begin
        phi_mul1_reg_422 <= next_mul2_reg_1363;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        phi_mul3_reg_516 <= next_mul4_reg_1427;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd0))) begin
        phi_mul3_reg_516 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_892_p2 == 1'd1))) begin
        phi_mul5_reg_468 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        phi_mul5_reg_468 <= next_mul6_reg_1404;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd1))) begin
        phi_mul7_reg_562 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (exitcond8_fu_1174_p2 == 1'd1))) begin
        phi_mul7_reg_562 <= next_mul8_reg_1525;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (icmp1_fu_1168_p2 == 1'd1) & (tmp_10_fu_1147_p2 == 1'd1) & (exitcond7_fu_1130_p2 == 1'd1))) begin
        phi_mul9_reg_597 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1))) begin
        phi_mul9_reg_597 <= next_mul1_reg_1574;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_733_p2 == 1'd1))) begin
        phi_mul_reg_388 <= next_mul_reg_1324;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_388 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_671 <= points_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_671 <= points_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp1_reg_1547 == 1'd1) & (tmp_10_reg_1543 == 1'd1))) begin
        c_1_reg_1582 <= c_1_fu_1225_p2;
        next_mul1_reg_1574 <= next_mul1_fu_1213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_2_reg_1440 <= c_2_fu_956_p2;
        cluster_1_cast7_reg_1432[4 : 0] <= cluster_1_cast7_fu_946_p1[4 : 0];
        next_mul4_reg_1427 <= next_mul4_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        centroids_load_1_reg_1480 <= centroids_q1;
        centroids_load_reg_1470 <= centroids_q0;
        points_load_2_reg_1475 <= points_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        distance_2_reg_1500 <= grp_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd1))) begin
        end_cast_reg_1422[0] <= end_cast_fu_936_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        f_1_reg_1595 <= f_1_fu_1242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gain_read_reg_1318 <= gain;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1332 <= i_1_fu_702_p2;
        next_mul_reg_1324 <= next_mul_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1342 == 1'd1))) begin
        i_2_reg_1371 <= i_2_fu_855_p2;
        next_mul2_reg_1363 <= next_mul2_fu_843_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_1392 <= i_3_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_1412 <= i_4_fu_926_p2;
        next_mul6_reg_1404 <= next_mul6_fu_914_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_5_reg_1533 <= i_5_fu_1136_p2;
        next_mul8_reg_1525 <= next_mul8_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_10_fu_1147_p2 == 1'd1) & (exitcond7_fu_1130_p2 == 1'd1))) begin
        icmp1_reg_1547 <= icmp1_fu_1168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_696_p2 == 1'd1))) begin
        icmp_reg_1342 <= icmp_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
        idx_1_reg_1633 <= idx_1_fu_1268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_1349 <= j_1_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_1379 <= j_2_fu_867_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j_3_reg_1554 <= j_3_fu_1180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_4_reg_1453 <= j_4_fu_968_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        new_centroids_addr_1_reg_1615 <= tmp_51_cast_fu_1258_p1;
        tmp_51_cast_reg_1610[9 : 0] <= tmp_51_cast_fu_1258_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        new_centroids_addr_reg_1569 <= tmp_47_cast_fu_1209_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp1_reg_1547 == 1'd1) & (tmp_10_reg_1543 == 1'd1) & (exitcond9_fu_1219_p2 == 1'd0))) begin
        np_cluster_addr_1_reg_1587 <= tmp_17_fu_1231_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        np_cluster_addr_reg_1520 <= tmp_12_fu_1112_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= results_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= results_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= valref_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= valref_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= valref_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= valref_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= valref_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= valref_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= valOut_last_V_reg_1643;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= valOut_last_V_reg_1643;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= valref_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= valref_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= valref_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= valref_user_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_678 <= grp_fu_631_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state46))) begin
        reg_684 <= new_centroids_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_950_p2 == 1'd1))) begin
        results_addr_1_reg_1445 <= tmp_8_reg_1417;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1130_p2 == 1'd0))) begin
        results_addr_2_reg_1538[4 : 0] <= tmp_11_fu_1142_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1130_p2 == 1'd1))) begin
        tmp_10_reg_1543 <= tmp_10_fu_1147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp_19_reg_1620 <= grp_fu_648_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_20_reg_1625 <= grp_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_861_p2 == 1'd0))) begin
        tmp_22_reg_1384 <= tmp_22_fu_877_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_27_reg_1559 <= tmp_27_fu_1186_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_733_p2 == 1'd0))) begin
        tmp_3_reg_1359 <= tmp_3_fu_778_p2;
        tmp_6_reg_1354 <= tmp_6_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd0))) begin
        tmp_41_reg_1600 <= tmp_41_fu_1252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_696_p2 == 1'd0))) begin
        tmp_4_reg_1337 <= tmp_4_fu_708_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_6_i_reg_1485 <= grp_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_7_i_reg_1490 <= grp_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd0))) begin
        tmp_8_reg_1417[9 : 0] <= tmp_8_fu_932_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond_fu_1262_p2 == 1'd0))) begin
        valOut_last_V_reg_1643 <= valOut_last_V_fu_1279_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_3_reg_1359 == 1'd1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        valref_dest_V <= inStream_V_dest_V_0_data_out;
        valref_id_V <= inStream_V_id_V_0_data_out;
        valref_keep_V <= inStream_V_keep_V_0_data_out;
        valref_strb_V <= inStream_V_strb_V_0_data_out;
        valref_user_V <= inStream_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond_fu_1262_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond_fu_1262_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        centroids_address0 = tmp_48_cast_fu_988_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_address0 = tmp_41_cast_fu_888_p1;
    end else begin
        centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        centroids_address1 = tmp_51_cast_reg_1610;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        centroids_address1 = tmp_48_cast_fu_988_p1;
    end else begin
        centroids_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        centroids_ce0 = 1'b1;
    end else begin
        centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state12))) begin
        centroids_ce1 = 1'b1;
    end else begin
        centroids_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        centroids_we0 = 1'b1;
    end else begin
        centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        centroids_we1 = 1'b1;
    end else begin
        centroids_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_631_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_631_opcode = 2'd0;
    end else begin
        grp_fu_631_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_631_p0 = reg_684;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_631_p0 = distance_i_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_631_p0 = reg_671;
    end else begin
        grp_fu_631_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_631_p1 = reg_671;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_631_p1 = tmp_7_i_reg_1490;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_631_p1 = centroids_load_reg_1470;
    end else begin
        grp_fu_631_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        new_centroids_address0 = new_centroids_addr_1_reg_1615;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        new_centroids_address0 = tmp_51_cast_fu_1258_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        new_centroids_address0 = new_centroids_addr_reg_1569;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        new_centroids_address0 = tmp_47_cast_fu_1209_p1;
    end else begin
        new_centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state60))) begin
        new_centroids_ce0 = 1'b1;
    end else begin
        new_centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        new_centroids_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        new_centroids_d0 = reg_678;
    end else begin
        new_centroids_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state60))) begin
        new_centroids_we0 = 1'b1;
    end else begin
        new_centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd0)))) begin
        np_cluster_address0 = np_cluster_addr_1_reg_1587;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        np_cluster_address0 = np_cluster_addr_reg_1520;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        np_cluster_address0 = tmp_12_fu_1112_p1;
    end else begin
        np_cluster_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd0)))) begin
        np_cluster_ce0 = 1'b1;
    end else begin
        np_cluster_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1))) begin
        np_cluster_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        np_cluster_d0 = tmp_13_fu_1117_p2;
    end else begin
        np_cluster_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1)))) begin
        np_cluster_we0 = 1'b1;
    end else begin
        np_cluster_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        points_address0 = tmp_49_cast_fu_999_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        points_address0 = tmp_39_cast_fu_809_p1;
    end else begin
        points_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        points_address1 = tmp_45_cast_fu_1204_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        points_address1 = tmp_49_cast_fu_999_p1;
    end else begin
        points_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state12))) begin
        points_ce1 = 1'b1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        points_we0 = 1'b1;
    end else begin
        points_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        results_address0 = tmp_21_fu_1274_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        results_address0 = results_addr_2_reg_1538;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        results_address0 = 10'd20;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        results_address0 = results_addr_1_reg_1445;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        results_address0 = tmp_8_reg_1417;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        results_address0 = tmp_7_fu_909_p1;
    end else begin
        results_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | (~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78)))) begin
        results_ce0 = 1'b1;
    end else begin
        results_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        results_d0 = end_cast_reg_1422;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        results_d0 = cluster_reg_480;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        results_d0 = inStream_V_data_V_0_data_out;
    end else begin
        results_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1130_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state40) & (tmp_9_fu_1101_p2 == 1'd0)))) begin
        results_we0 = 1'b1;
    end else begin
        results_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_696_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_733_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((exitcond3_fu_849_p2 == 1'd1) | (icmp_reg_1342 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_861_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_892_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_920_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_950_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_i_fu_962_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1130_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (exitcond8_fu_1174_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & ((exitcond9_fu_1219_p2 == 1'd1) | (icmp1_reg_1547 == 1'd0) | (tmp_10_reg_1543 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state78 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond_fu_1262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (exitcond_fu_1262_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state78 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_1225_p2 = (c_reg_586 + 5'd1);

assign c_2_fu_956_p2 = (cluster_1_reg_505 + 5'd1);

assign centroids_d0 = inStream_V_data_V_0_data_out;

assign cluster_1_cast7_fu_946_p1 = cluster_1_reg_505;

assign cluster_2_fu_1087_p3 = ((tmp_37_fu_1081_p2[0:0] === 1'b1) ? cluster_1_cast7_reg_1432 : cluster_reg_480);

assign distance_1_to_int_fu_1004_p1 = distance_2_reg_1500;

assign end_cast_fu_936_p1 = end_fu_174;

assign exitcond10_fu_1236_p2 = ((f_reg_609 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond1_fu_696_p2 = ((i_reg_376 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_950_p2 = ((cluster_1_reg_505 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond2_fu_733_p2 = ((j_reg_400 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond3_fu_849_p2 = ((i1_reg_411 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond4_fu_861_p2 = ((j2_reg_434 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond5_fu_892_p2 = ((i5_reg_445 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond6_fu_920_p2 = ((i7_reg_457 == 10'd1000) ? 1'b1 : 1'b0);

assign exitcond7_fu_1130_p2 = ((i8_reg_551 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond8_fu_1174_p2 = ((j9_reg_574 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond9_fu_1219_p2 = ((c_reg_586 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond_fu_1262_p2 = ((idx_reg_620 == 5'd21) ? 1'b1 : 1'b0);

assign exitcond_i_fu_962_p2 = ((j_i_reg_540 == 6'd50) ? 1'b1 : 1'b0);

assign f_1_fu_1242_p2 = (f_reg_609 + 6'd1);

assign gain_off1_fu_1153_p2 = ($signed(gain_read_reg_1318) + $signed(32'd4294967294));

assign gain_off_fu_712_p2 = ($signed(gain_read_reg_1318) + $signed(32'd4294967295));

assign grp_fu_1310_p0 = 11'd50;

assign grp_fu_1310_p2 = grp_fu_1310_p20;

assign grp_fu_1310_p20 = j9_reg_574;

assign i_1_fu_702_p2 = (i_reg_376 + 10'd1);

assign i_2_fu_855_p2 = (i1_reg_411 + 5'd1);

assign i_3_fu_898_p2 = (i5_reg_445 + 10'd1);

assign i_4_fu_926_p2 = (i7_reg_457 + 10'd1);

assign i_5_fu_1136_p2 = (i8_reg_551 + 5'd1);

assign icmp1_fu_1168_p2 = ((tmp_24_fu_1158_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_fu_727_p2 = ((tmp_fu_717_p4 == 31'd0) ? 1'b1 : 1'b0);

assign idx_1_fu_1268_p2 = (idx_reg_620 + 5'd1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign j_1_fu_739_p2 = (j_reg_400 + 6'd1);

assign j_2_fu_867_p2 = (j2_reg_434 + 6'd1);

assign j_3_fu_1180_p2 = (j9_reg_574 + 6'd1);

assign j_4_fu_968_p2 = (j_i_reg_540 + 6'd1);

assign min_distance_1_fu_1094_p3 = ((tmp_37_fu_1081_p2[0:0] === 1'b1) ? distance_2_reg_1500 : min_distance_i_reg_493);

assign min_distance_i_to_in_fu_1021_p1 = min_distance_i_reg_493;

assign next_mul1_fu_1213_p2 = (phi_mul9_reg_597 + 10'd50);

assign next_mul2_fu_843_p2 = (phi_mul1_reg_422 + 10'd50);

assign next_mul4_fu_940_p2 = (phi_mul3_reg_516 + 10'd50);

assign next_mul6_fu_914_p2 = (phi_mul5_reg_468 + 16'd50);

assign next_mul8_fu_1124_p2 = (phi_mul7_reg_562 + 10'd50);

assign next_mul_fu_690_p2 = (phi_mul_reg_388 + 16'd50);

assign notlhs1_fu_1057_p2 = ((tmp_31_fu_1025_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_1039_p2 = ((tmp_29_fu_1007_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_1063_p2 = ((tmp_38_fu_1035_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_1045_p2 = ((tmp_32_fu_1017_p1 == 23'd0) ? 1'b1 : 1'b0);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign points_d0 = inStream_V_data_V_0_data_out;

assign tmp_10_fu_1147_p2 = ((end_fu_174 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_11_fu_1142_p1 = i8_reg_551;

assign tmp_12_fu_1112_p1 = cluster_reg_480;

assign tmp_13_fu_1117_p2 = (np_cluster_q0 + 32'd1);

assign tmp_14_cast_fu_1194_p1 = j9_reg_574;

assign tmp_14_fu_755_p2 = (tmp_4_reg_1337 | j_reg_400);

assign tmp_15_fu_760_p4 = {{i_reg_376[9:6]}};

assign tmp_17_fu_1231_p1 = c_reg_586;

assign tmp_18_cast_fu_1248_p1 = f_reg_609;

assign tmp_1_cast_fu_745_p1 = j_reg_400;

assign tmp_21_fu_1274_p1 = idx_reg_620;

assign tmp_22_fu_877_p2 = (phi_mul1_reg_422 + tmp_6_cast_fu_873_p1);

assign tmp_24_fu_1158_p4 = {{gain_off1_fu_1153_p2[31:1]}};

assign tmp_26_fu_1198_p2 = (tmp_14_cast_fu_1194_p1 + phi_mul7_reg_562);

assign tmp_27_fu_1186_p1 = results_q0[10:0];

assign tmp_29_fu_1007_p4 = {{distance_1_to_int_fu_1004_p1[30:23]}};

assign tmp_2_fu_770_p3 = {{tmp_15_fu_760_p4}, {tmp_14_fu_755_p2}};

assign tmp_31_fu_1025_p4 = {{min_distance_i_to_in_fu_1021_p1[30:23]}};

assign tmp_32_fu_1017_p1 = distance_1_to_int_fu_1004_p1[22:0];

assign tmp_33_fu_1051_p2 = (notrhs_fu_1045_p2 | notlhs_fu_1039_p2);

assign tmp_34_fu_1069_p2 = (notrhs1_fu_1063_p2 | notlhs1_fu_1057_p2);

assign tmp_35_fu_1075_p2 = (tmp_34_fu_1069_p2 & tmp_33_fu_1051_p2);

assign tmp_37_fu_1081_p2 = (tmp_36_fu_652_p2 & tmp_35_fu_1075_p2);

assign tmp_38_fu_1035_p1 = min_distance_i_to_in_fu_1021_p1[22:0];

assign tmp_39_cast_fu_809_p1 = tmp_6_reg_1354;

assign tmp_39_fu_982_p2 = (phi_mul3_reg_516 + tmp_4_i_cast_fu_978_p1);

assign tmp_3_fu_778_p2 = ((tmp_2_fu_770_p3 == 10'd0) ? 1'b1 : 1'b0);

assign tmp_40_fu_993_p2 = (phi_mul5_reg_468 + tmp_4_i_cast1_fu_974_p1);

assign tmp_41_cast_fu_888_p1 = tmp_22_reg_1384;

assign tmp_41_fu_1252_p2 = (phi_mul9_reg_597 + tmp_18_cast_fu_1248_p1);

assign tmp_45_cast_fu_1204_p1 = tmp_26_fu_1198_p2;

assign tmp_47_cast_fu_1209_p1 = grp_fu_1310_p3;

assign tmp_48_cast_fu_988_p1 = tmp_39_fu_982_p2;

assign tmp_49_cast_fu_999_p1 = tmp_40_fu_993_p2;

assign tmp_4_fu_708_p1 = i_reg_376[5:0];

assign tmp_4_i_cast1_fu_974_p1 = j_i_reg_540;

assign tmp_4_i_cast_fu_978_p1 = j_i_reg_540;

assign tmp_51_cast_fu_1258_p1 = tmp_41_reg_1600;

assign tmp_6_cast_fu_873_p1 = j2_reg_434;

assign tmp_6_fu_749_p2 = (phi_mul_reg_388 + tmp_1_cast_fu_745_p1);

assign tmp_7_fu_909_p1 = i5_reg_445;

assign tmp_8_fu_932_p1 = i7_reg_457;

assign tmp_9_fu_1101_p2 = ((cluster_reg_480 == results_q0) ? 1'b1 : 1'b0);

assign tmp_fu_717_p4 = {{gain_off_fu_712_p2[31:1]}};

assign valOut_last_V_fu_1279_p2 = ((idx_reg_620 == 5'd20) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_8_reg_1417[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    end_cast_reg_1422[31:1] <= 31'b0000000000000000000000000000000;
    cluster_1_cast7_reg_1432[31:5] <= 27'b000000000000000000000000000;
    results_addr_2_reg_1538[9:5] <= 5'b00000;
    tmp_51_cast_reg_1610[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    end_fu_174[1] <= 1'b0;
end

endmodule //doKmean
