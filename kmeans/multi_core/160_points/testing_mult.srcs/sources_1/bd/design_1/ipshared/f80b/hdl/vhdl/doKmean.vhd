-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doKmean is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of doKmean is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "doKmean,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=348425,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=8,HLS_SYN_FF=3600,HLS_SYN_LUT=6045,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (86 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (86 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (86 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (86 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (86 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (86 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (86 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (86 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (86 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (86 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (86 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (86 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (86 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_51BA43B7 : STD_LOGIC_VECTOR (31 downto 0) := "01010001101110100100001110110111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv10_32 : STD_LOGIC_VECTOR (9 downto 0) := "0000110010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv11_32 : STD_LOGIC_VECTOR (10 downto 0) := "00000110010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal gain : STD_LOGIC_VECTOR (31 downto 0);
    signal points_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal points_ce0 : STD_LOGIC;
    signal points_we0 : STD_LOGIC;
    signal points_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal points_ce1 : STD_LOGIC;
    signal points_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal valref_keep_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal valref_strb_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal valref_user_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal valref_id_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal valref_dest_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal centroids_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal centroids_ce0 : STD_LOGIC;
    signal centroids_we0 : STD_LOGIC;
    signal centroids_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal centroids_ce1 : STD_LOGIC;
    signal centroids_we1 : STD_LOGIC;
    signal centroids_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal endip_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal results_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal results_ce0 : STD_LOGIC;
    signal results_we0 : STD_LOGIC;
    signal results_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal results_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal np_cluster_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal np_cluster_ce0 : STD_LOGIC;
    signal np_cluster_we0 : STD_LOGIC;
    signal np_cluster_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal np_cluster_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_centroids_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal new_centroids_ce0 : STD_LOGIC;
    signal new_centroids_we0 : STD_LOGIC;
    signal new_centroids_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_centroids_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal endip_1 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal reg_775 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal gain_read_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_fu_806_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1537 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_818_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_1545 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1550 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_851_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_1557 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_861_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1562 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1567 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_958_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_reg_1571 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_2_fu_970_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1579 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_2_fu_988_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1587 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_24_fu_998_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_reg_1592 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond4_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1019_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1600 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal next_mul6_fu_1035_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul6_reg_1613 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_4_fu_1047_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1621 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1626 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul4_fu_1057_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul4_reg_1631 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal cluster_1_cast_fu_1063_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cluster_1_cast_reg_1636 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_2_fu_1073_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_2_reg_1644 : STD_LOGIC_VECTOR (4 downto 0);
    signal results_addr_1_reg_1649 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_i_fu_1067_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_1085_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_4_reg_1657 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_i_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal centroids_load_1_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal points_load_2_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_load_2_reg_1684 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_1689 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_2_reg_1704 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal cluster_2_fu_1200_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal min_distance_1_fu_1207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal np_cluster_addr_reg_1724 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal next_mul8_fu_1237_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul8_reg_1729 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal i_5_fu_1249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_1737 : STD_LOGIC_VECTOR (4 downto 0);
    signal results_addr_2_reg_1742 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_1243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1750 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_1296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_1754 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_1308_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_3_reg_1761 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal tmp_29_fu_1322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_reg_1766 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal new_centroids_addr_reg_1771 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal next_mul1_fu_1340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul1_reg_1781 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal c_1_fu_1352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_1_reg_1789 : STD_LOGIC_VECTOR (4 downto 0);
    signal np_cluster_addr_1_reg_1794 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_1_fu_1375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_1_reg_1802 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_46_fu_1385_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_reg_1807 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond10_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal tmp_58_cast_fu_1391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_reg_1817 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal new_centroids_addr_1_reg_1822 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal idx_1_fu_1401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_1_reg_1840 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal exitcond11_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_reg_1850 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1855 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_2_fu_1429_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal idx_2_reg_1867 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal exitcond12_fu_1423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1435_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_1_fu_1443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_1_reg_1885 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_4_fu_1449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_fu_1454_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul3_reg_1895 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_block_state84 : BOOLEAN;
    signal i_6_fu_1466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1903 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_1472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1908 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond13_fu_1460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_1484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_5_reg_1916 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal exitcond_fu_1478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_2_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_2_reg_1926 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_5_fu_1516_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_384 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_396 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_408 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_419 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul1_reg_430 : STD_LOGIC_VECTOR (9 downto 0);
    signal j2_reg_442 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i5_reg_453 : STD_LOGIC_VECTOR (4 downto 0);
    signal i7_reg_465 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal exitcond5_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul5_reg_476 : STD_LOGIC_VECTOR (9 downto 0);
    signal cluster_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_i_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal cluster_1_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul3_reg_524 : STD_LOGIC_VECTOR (9 downto 0);
    signal distance_i_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_reg_548 : STD_LOGIC_VECTOR (5 downto 0);
    signal i8_reg_559 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond8_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul7_reg_570 : STD_LOGIC_VECTOR (9 downto 0);
    signal j9_reg_582 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal c_reg_594 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul9_reg_605 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_reg_617 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal idx_reg_628 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx2_reg_639 : STD_LOGIC_VECTOR (1 downto 0);
    signal val_assign_1_in_reg_650 : STD_LOGIC_VECTOR (1 downto 0);
    signal i6_reg_659 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul2_reg_670 : STD_LOGIC_VECTOR (9 downto 0);
    signal j5_reg_682 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_cast_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_1030_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_cast_fu_1112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_1225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_1336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_1358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_1407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_1500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal end_fu_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_693_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_693_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal gain_off_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_829_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_cast_fu_857_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_867_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_877_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_871_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_885_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_cast_fu_994_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_i_cast_fu_1091_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_44_fu_1095_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_fu_1106_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal distance_1_to_int_fu_1117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_i_to_in_fu_1134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_1120_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_1130_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_1138_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_fu_1148_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gain_off1_fu_1281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1286_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_cast_fu_1318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1521_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_cast_fu_1381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_cast_fu_1490_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_fu_1494_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_28_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1521_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1521_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1521_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_693_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (86 downto 0);
    signal grp_fu_1521_p20 : STD_LOGIC_VECTOR (10 downto 0);

    component doKmean_faddfsub_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_fsub_32nsdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_fmul_32nseOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_fdiv_32nsfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_sitofp_32g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_fcmp_32nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component doKmean_fsqrt_32nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_mac_muladjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component doKmean_points IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_centroids IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_results IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_new_centrbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doKmean_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        gain : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    points_U : component doKmean_points
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => points_address0,
        ce0 => points_ce0,
        we0 => points_we0,
        d0 => points_d0,
        q0 => points_q0,
        address1 => points_address1,
        ce1 => points_ce1,
        q1 => points_q1);

    centroids_U : component doKmean_centroids
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => centroids_address0,
        ce0 => centroids_ce0,
        we0 => centroids_we0,
        d0 => centroids_d0,
        q0 => centroids_q0,
        address1 => centroids_address1,
        ce1 => centroids_ce1,
        we1 => centroids_we1,
        d1 => tmp_21_reg_1832,
        q1 => centroids_q1);

    results_U : component doKmean_results
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => results_address0,
        ce0 => results_ce0,
        we0 => results_we0,
        d0 => results_d0,
        q0 => results_q0);

    np_cluster_U : component doKmean_results
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => np_cluster_address0,
        ce0 => np_cluster_ce0,
        we0 => np_cluster_we0,
        d0 => np_cluster_d0,
        q0 => np_cluster_q0);

    new_centroids_U : component doKmean_new_centrbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => new_centroids_address0,
        ce0 => new_centroids_ce0,
        we0 => new_centroids_we0,
        d0 => new_centroids_d0,
        q0 => new_centroids_q0);

    doKmean_CRTL_BUS_s_axi_U : component doKmean_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        gain => gain);

    doKmean_faddfsub_cud_U1 : component doKmean_faddfsub_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_693_p0,
        din1 => grp_fu_693_p1,
        opcode => grp_fu_693_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_693_p2);

    doKmean_fsub_32nsdEe_U2 : component doKmean_fsub_32nsdEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => points_load_2_reg_1679,
        din1 => centroids_load_2_reg_1684,
        ce => ap_const_logic_1,
        dout => grp_fu_697_p2);

    doKmean_fmul_32nseOg_U3 : component doKmean_fmul_32nseOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_769,
        din1 => tmp_6_i_reg_1689,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p2);

    doKmean_fdiv_32nsfYi_U4 : component doKmean_fdiv_32nsfYi
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_775,
        din1 => tmp_20_reg_1827,
        ce => ap_const_logic_1,
        dout => grp_fu_706_p2);

    doKmean_sitofp_32g8j_U5 : component doKmean_sitofp_32g8j
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => np_cluster_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_710_p1);

    doKmean_fcmp_32nshbi_U6 : component doKmean_fcmp_32nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => distance_2_reg_1704,
        din1 => min_distance_i_reg_501,
        opcode => ap_const_lv5_4,
        dout => tmp_42_fu_714_p2);

    doKmean_fsqrt_32nibs_U7 : component doKmean_fsqrt_32nibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => distance_i_reg_536,
        ce => ap_const_logic_1,
        dout => grp_fu_719_p2);

    doKmean_mac_muladjbC_U8 : component doKmean_mac_muladjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 11,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1521_p0,
        din1 => grp_fu_1521_p1,
        din2 => grp_fu_1521_p2,
        dout => grp_fu_1521_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_in = ap_const_logic_1) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_state = ap_const_lv2_2)) or ((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_state = ap_const_lv2_1)) or ((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1) and (inStream_V_data_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_state = ap_const_lv2_1)) or ((inStream_V_data_V_0_vld_in = ap_const_logic_1) and (inStream_V_data_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_state = ap_const_lv2_2)) or ((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_state = ap_const_lv2_1)) or ((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1) and (inStream_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_state = ap_const_lv2_1)) or ((inStream_V_dest_V_0_vld_in = ap_const_logic_1) and (inStream_V_dest_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_state = ap_const_lv2_2)) or ((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_state = ap_const_lv2_1)) or ((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1) and (inStream_V_id_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_state = ap_const_lv2_1)) or ((inStream_V_id_V_0_vld_in = ap_const_logic_1) and (inStream_V_id_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_state = ap_const_lv2_2)) or ((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_state = ap_const_lv2_1)) or ((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1) and (inStream_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_state = ap_const_lv2_1)) or ((inStream_V_keep_V_0_vld_in = ap_const_logic_1) and (inStream_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_state = ap_const_lv2_2)) or ((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_state = ap_const_lv2_1)) or ((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1) and (inStream_V_strb_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_state = ap_const_lv2_1)) or ((inStream_V_strb_V_0_vld_in = ap_const_logic_1) and (inStream_V_strb_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_state = ap_const_lv2_2)) or ((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_state = ap_const_lv2_1)) or ((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1) and (inStream_V_user_V_0_state = ap_const_lv2_3)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_state = ap_const_lv2_1)) or ((inStream_V_user_V_0_vld_in = ap_const_logic_1) and (inStream_V_user_V_0_state = ap_const_lv2_2)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_state = ap_const_lv2_2)) or ((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_state = ap_const_lv2_1)) or ((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1) and (outStream_V_data_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outStream_V_data_V_1_state = ap_const_lv2_3)) or ((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_state = ap_const_lv2_1)) or ((outStream_V_data_V_1_vld_in = ap_const_logic_1) and (outStream_V_data_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_state = ap_const_lv2_2)) or ((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_state = ap_const_lv2_1)) or ((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1) and (outStream_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_state = ap_const_lv2_1)) or ((outStream_V_dest_V_1_vld_in = ap_const_logic_1) and (outStream_V_dest_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_state = ap_const_lv2_2)) or ((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_state = ap_const_lv2_1)) or ((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1) and (outStream_V_id_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_state = ap_const_lv2_1)) or ((outStream_V_id_V_1_vld_in = ap_const_logic_1) and (outStream_V_id_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_state = ap_const_lv2_2)) or ((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_state = ap_const_lv2_1)) or ((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1) and (outStream_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_state = ap_const_lv2_1)) or ((outStream_V_keep_V_1_vld_in = ap_const_logic_1) and (outStream_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_state = ap_const_lv2_2)) or ((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_state = ap_const_lv2_1)) or ((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1) and (outStream_V_last_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_state = ap_const_lv2_1)) or ((outStream_V_last_V_1_vld_in = ap_const_logic_1) and (outStream_V_last_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_state = ap_const_lv2_2)) or ((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_state = ap_const_lv2_1)) or ((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1) and (outStream_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_state = ap_const_lv2_1)) or ((outStream_V_strb_V_1_vld_in = ap_const_logic_1) and (outStream_V_strb_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_state = ap_const_lv2_2)) or ((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_state = ap_const_lv2_1)) or ((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1) and (outStream_V_user_V_1_state = ap_const_lv2_3)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_state = ap_const_lv2_1)) or ((outStream_V_user_V_1_vld_in = ap_const_logic_1) and (outStream_V_user_V_1_state = ap_const_lv2_2)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    c_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp1_fu_1296_p2 = ap_const_lv1_1) and (tmp_14_fu_1275_p2 = ap_const_lv1_1) and (exitcond7_fu_1243_p2 = ap_const_lv1_1))) then 
                c_reg_594 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1))) then 
                c_reg_594 <= c_1_reg_1789;
            end if; 
        end if;
    end process;

    cluster_1_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                cluster_1_reg_513 <= c_2_reg_1644;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_0))) then 
                cluster_1_reg_513 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    cluster_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                cluster_reg_488 <= cluster_2_fu_1200_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_0))) then 
                cluster_reg_488 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    distance_i_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_i_fu_1067_p2 = ap_const_lv1_0))) then 
                distance_i_reg_536 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                distance_i_reg_536 <= grp_fu_693_p2;
            end if; 
        end if;
    end process;

    end_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_9_fu_1214_p2 = ap_const_lv1_0))) then 
                end_fu_176(0) <= '0';
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_1013_p2 = ap_const_lv1_1))) then 
                end_fu_176(0) <= '1';
            end if; 
        end if;
    end process;

    endip_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_10_fu_1260_p2 = ap_const_lv1_1) and (exitcond7_fu_1243_p2 = ap_const_lv1_1))) then 
                                endip_0(0) <= end_fu_176(0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_964_p2 = ap_const_lv1_1) and (icmp_reg_1550 = ap_const_lv1_1))) then 
                endip_0(0) <= '1';
            end if; 
        end if;
    end process;

    f_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
                f_reg_617 <= f_1_reg_1802;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp1_reg_1754 = ap_const_lv1_1) and (tmp_14_reg_1750 = ap_const_lv1_1) and (exitcond9_fu_1346_p2 = ap_const_lv1_0))) then 
                f_reg_617 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i1_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_812_p2 = ap_const_lv1_1) and (icmp_fu_839_p2 = ap_const_lv1_1))) then 
                i1_reg_419 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_982_p2 = ap_const_lv1_1))) then 
                i1_reg_419 <= i_2_reg_1579;
            end if; 
        end if;
    end process;

    i5_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i5_reg_453 <= i_3_reg_1600;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((exitcond3_fu_964_p2 = ap_const_lv1_1) or (icmp_reg_1550 = ap_const_lv1_0)))) then 
                i5_reg_453 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i6_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond12_fu_1423_p2 = ap_const_lv1_1))) then 
                i6_reg_659 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1478_p2 = ap_const_lv1_1))) then 
                i6_reg_659 <= i_6_reg_1903;
            end if; 
        end if;
    end process;

    i7_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_1013_p2 = ap_const_lv1_1))) then 
                i7_reg_465 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i7_reg_465 <= i_4_reg_1621;
            end if; 
        end if;
    end process;

    i8_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_1))) then 
                i8_reg_559 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond8_fu_1302_p2 = ap_const_lv1_1))) then 
                i8_reg_559 <= i_5_reg_1737;
            end if; 
        end if;
    end process;

    i_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_845_p2 = ap_const_lv1_1))) then 
                i_reg_384 <= i_1_reg_1545;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_384 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    idx2_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (tmp_22_fu_1418_p2 = ap_const_lv1_1) and (exitcond11_fu_1395_p2 = ap_const_lv1_1))) then 
                idx2_reg_639 <= ap_const_lv2_0;
            elsif (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then 
                idx2_reg_639 <= idx_2_reg_1867;
            end if; 
        end if;
    end process;

    idx_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then 
                idx_reg_628 <= idx_1_reg_1840;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state53) and ((exitcond9_fu_1346_p2 = ap_const_lv1_1) or (icmp1_reg_1754 = ap_const_lv1_0) or (tmp_14_reg_1750 = ap_const_lv1_0)))) then 
                idx_reg_628 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j2_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                j2_reg_442 <= j_2_reg_1587;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1550 = ap_const_lv1_1) and (exitcond3_fu_964_p2 = ap_const_lv1_0))) then 
                j2_reg_442 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j5_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                j5_reg_682 <= j_5_reg_1916;
            elsif ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and (tmp_22_reg_1855 = ap_const_lv1_1) and (exitcond13_fu_1460_p2 = ap_const_lv1_0))) then 
                j5_reg_682 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j9_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                j9_reg_582 <= j_3_reg_1761;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_1243_p2 = ap_const_lv1_0))) then 
                j9_reg_582 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_i_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_i_fu_1067_p2 = ap_const_lv1_0))) then 
                j_i_reg_548 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_i_reg_548 <= j_4_reg_1657;
            end if; 
        end if;
    end process;

    j_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                j_reg_408 <= j_1_reg_1557;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_812_p2 = ap_const_lv1_0))) then 
                j_reg_408 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    min_distance_i_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                min_distance_i_reg_501 <= min_distance_1_fu_1207_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_0))) then 
                min_distance_i_reg_501 <= ap_const_lv32_51BA43B7;
            end if; 
        end if;
    end process;

    phi_mul1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_812_p2 = ap_const_lv1_1) and (icmp_fu_839_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_430 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_982_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_430 <= next_mul2_reg_1571;
            end if; 
        end if;
    end process;

    phi_mul2_reg_670_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond12_fu_1423_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_670 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1478_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_670 <= next_mul3_reg_1895;
            end if; 
        end if;
    end process;

    phi_mul3_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                phi_mul3_reg_524 <= next_mul4_reg_1631;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_0))) then 
                phi_mul3_reg_524 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_1013_p2 = ap_const_lv1_1))) then 
                phi_mul5_reg_476 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                phi_mul5_reg_476 <= next_mul6_reg_1613;
            end if; 
        end if;
    end process;

    phi_mul7_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_1))) then 
                phi_mul7_reg_570 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond8_fu_1302_p2 = ap_const_lv1_1))) then 
                phi_mul7_reg_570 <= next_mul8_reg_1729;
            end if; 
        end if;
    end process;

    phi_mul9_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (icmp1_fu_1296_p2 = ap_const_lv1_1) and (tmp_14_fu_1275_p2 = ap_const_lv1_1) and (exitcond7_fu_1243_p2 = ap_const_lv1_1))) then 
                phi_mul9_reg_605 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1))) then 
                phi_mul9_reg_605 <= next_mul1_reg_1781;
            end if; 
        end if;
    end process;

    phi_mul_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_845_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_396 <= next_mul_reg_1537;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_396 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    reg_762_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_762 <= points_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_762 <= points_q0;
            end if; 
        end if;
    end process;

    val_assign_1_in_reg_650_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond12_fu_1423_p2 = ap_const_lv1_0))) then
                if ((tmp_47_fu_1435_p1 = ap_const_lv1_1)) then 
                                        val_assign_1_in_reg_650(0) <= endip_1(0);
                elsif ((tmp_47_fu_1435_p1 = ap_const_lv1_0)) then 
                                        val_assign_1_in_reg_650(0) <= endip_0(0);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp1_reg_1754 = ap_const_lv1_1) and (tmp_14_reg_1750 = ap_const_lv1_1))) then
                c_1_reg_1789 <= c_1_fu_1352_p2;
                next_mul1_reg_1781 <= next_mul1_fu_1340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                c_2_reg_1644 <= c_2_fu_1073_p2;
                    cluster_1_cast_reg_1636(4 downto 0) <= cluster_1_cast_fu_1063_p1(4 downto 0);
                next_mul4_reg_1631 <= next_mul4_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                centroids_load_1_reg_1674 <= centroids_q0;
                centroids_load_2_reg_1684 <= centroids_q1;
                points_load_2_reg_1679 <= points_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                distance_2_reg_1704 <= grp_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and ((exitcond9_fu_1346_p2 = ap_const_lv1_1) or (icmp1_reg_1754 = ap_const_lv1_0) or (tmp_14_reg_1750 = ap_const_lv1_0)))) then
                    endip_1(0) <= end_fu_176(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                f_1_reg_1802 <= f_1_fu_1375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gain_read_reg_1530 <= gain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1545 <= i_1_fu_818_p2;
                next_mul_reg_1537 <= next_mul_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_reg_1550 = ap_const_lv1_1))) then
                i_2_reg_1579 <= i_2_fu_970_p2;
                next_mul2_reg_1571 <= next_mul2_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_3_reg_1600 <= i_3_fu_1019_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_4_reg_1621 <= i_4_fu_1047_p2;
                next_mul6_reg_1613 <= next_mul6_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                i_5_reg_1737 <= i_5_fu_1249_p2;
                next_mul8_reg_1729 <= next_mul8_fu_1237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and (tmp_22_reg_1855 = ap_const_lv1_1))) then
                i_6_reg_1903 <= i_6_fu_1466_p2;
                next_mul3_reg_1895 <= next_mul3_fu_1454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_14_fu_1275_p2 = ap_const_lv1_1) and (exitcond7_fu_1243_p2 = ap_const_lv1_1))) then
                icmp1_reg_1754 <= icmp1_fu_1296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_812_p2 = ap_const_lv1_1))) then
                icmp_reg_1550 <= icmp_fu_839_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                idx_1_reg_1840 <= idx_1_fu_1401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                idx_2_reg_1867 <= idx_2_fu_1429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_1557 <= j_1_fu_851_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_1587 <= j_2_fu_988_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                j_3_reg_1761 <= j_3_fu_1308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                j_4_reg_1657 <= j_4_fu_1085_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                j_5_reg_1916 <= j_5_fu_1484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                new_centroids_addr_1_reg_1822 <= tmp_58_cast_fu_1391_p1(10 - 1 downto 0);
                    tmp_58_cast_reg_1817(9 downto 0) <= tmp_58_cast_fu_1391_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                new_centroids_addr_reg_1771 <= tmp_54_cast_fu_1332_p1(10 - 1 downto 0);
                tmp_29_reg_1766 <= tmp_29_fu_1322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp1_reg_1754 = ap_const_lv1_1) and (tmp_14_reg_1750 = ap_const_lv1_1) and (exitcond9_fu_1346_p2 = ap_const_lv1_0))) then
                np_cluster_addr_1_reg_1794 <= tmp_18_fu_1358_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                np_cluster_addr_reg_1724 <= tmp_12_fu_1225_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= valref_dest_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= valref_dest_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= valref_id_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= valref_id_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= valref_keep_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= valref_keep_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= valref_strb_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= valref_strb_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= valref_user_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= valref_user_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 = ap_CS_fsm_state18))) then
                reg_769 <= grp_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
                reg_775 <= new_centroids_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_i_fu_1067_p2 = ap_const_lv1_1))) then
                results_addr_1_reg_1649 <= tmp_8_reg_1626(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_1243_p2 = ap_const_lv1_0))) then
                results_addr_2_reg_1742 <= tmp_11_fu_1255_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_1243_p2 = ap_const_lv1_1))) then
                tmp_14_reg_1750 <= tmp_14_fu_1275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                tmp_20_reg_1827 <= grp_fu_710_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                tmp_21_reg_1832 <= grp_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond11_fu_1395_p2 = ap_const_lv1_1))) then
                tmp_22_reg_1855 <= tmp_22_fu_1418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_982_p2 = ap_const_lv1_0))) then
                tmp_24_reg_1592 <= tmp_24_fu_998_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and (tmp_22_reg_1855 = ap_const_lv1_1) and (exitcond13_fu_1460_p2 = ap_const_lv1_0))) then
                tmp_26_reg_1908 <= tmp_26_fu_1472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_845_p2 = ap_const_lv1_0))) then
                tmp_3_reg_1567 <= tmp_3_fu_893_p2;
                tmp_4_reg_1562 <= tmp_4_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_0))) then
                tmp_46_reg_1807 <= tmp_46_fu_1385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_6_i_reg_1689 <= grp_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_7_i_reg_1694 <= grp_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_0))) then
                    tmp_8_reg_1626(4 downto 0) <= tmp_8_fu_1053_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond12_fu_1423_p2 = ap_const_lv1_0))) then
                valOut_last_V_1_reg_1885 <= valOut_last_V_1_fu_1443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1478_p2 = ap_const_lv1_0))) then
                valOut_last_V_2_reg_1926 <= valOut_last_V_2_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond11_fu_1395_p2 = ap_const_lv1_0))) then
                valOut_last_V_reg_1850 <= valOut_last_V_fu_1412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_3_reg_1567 = ap_const_lv1_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then
                valref_dest_V <= inStream_V_dest_V_0_data_out;
                valref_id_V <= inStream_V_id_V_0_data_out;
                valref_keep_V <= inStream_V_keep_V_0_data_out;
                valref_strb_V <= inStream_V_strb_V_0_data_out;
                valref_user_V <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    endip_0(1) <= '0';
    endip_1(1) <= '0';
    tmp_8_reg_1626(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    cluster_1_cast_reg_1636(31 downto 5) <= "000000000000000000000000000";
    tmp_58_cast_reg_1817(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    val_assign_1_in_reg_650(1) <= '0';
    end_fu_176(1) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state2, icmp_reg_1550, exitcond1_fu_812_p2, ap_CS_fsm_state3, exitcond2_fu_845_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond4_fu_982_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, exitcond6_fu_1041_p2, ap_CS_fsm_state11, exitcond1_i_fu_1067_p2, ap_CS_fsm_state12, exitcond_i_fu_1079_p2, ap_CS_fsm_state42, exitcond7_fu_1243_p2, tmp_14_reg_1750, icmp1_reg_1754, ap_CS_fsm_state43, ap_CS_fsm_state53, exitcond9_fu_1346_p2, ap_CS_fsm_state54, exitcond10_fu_1369_p2, ap_CS_fsm_state78, exitcond11_fu_1395_p2, tmp_22_fu_1418_p2, tmp_22_reg_1855, ap_CS_fsm_state81, exitcond12_fu_1423_p2, ap_CS_fsm_state84, exitcond13_fu_1460_p2, ap_CS_fsm_state85, exitcond_fu_1478_p2, exitcond3_fu_964_p2, exitcond5_fu_1013_p2, exitcond8_fu_1302_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_812_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_845_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((exitcond3_fu_964_p2 = ap_const_lv1_1) or (icmp_reg_1550 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond4_fu_982_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_1013_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_1041_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond1_i_fu_1067_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond_i_fu_1079_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (exitcond7_fu_1243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (exitcond8_fu_1302_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and ((exitcond9_fu_1346_p2 = ap_const_lv1_1) or (icmp1_reg_1754 = ap_const_lv1_0) or (tmp_14_reg_1750 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state55;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state78 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state78) and (tmp_22_fu_1418_p2 = ap_const_lv1_1) and (exitcond11_fu_1395_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state78) and (exitcond11_fu_1395_p2 = ap_const_lv1_1) and (tmp_22_fu_1418_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state79 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state80;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when ap_ST_fsm_state80 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state81) and (exitcond12_fu_1423_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state83))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state83;
                end if;
            when ap_ST_fsm_state84 => 
                if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and ((exitcond13_fu_1460_p2 = ap_const_lv1_1) or (tmp_22_reg_1855 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and (tmp_22_reg_1855 = ap_const_lv1_1) and (exitcond13_fu_1460_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when ap_ST_fsm_state85 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state85) and (exitcond_fu_1478_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state84_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_block_state84 <= ((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, tmp_22_reg_1855, ap_CS_fsm_state84, exitcond13_fu_1460_p2)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and ((exitcond13_fu_1460_p2 = ap_const_lv1_1) or (tmp_22_reg_1855 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, tmp_22_reg_1855, ap_CS_fsm_state84, exitcond13_fu_1460_p2)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state84) and ((exitcond13_fu_1460_p2 = ap_const_lv1_1) or (tmp_22_reg_1855 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_1_fu_1352_p2 <= std_logic_vector(unsigned(c_reg_594) + unsigned(ap_const_lv5_1));
    c_2_fu_1073_p2 <= std_logic_vector(unsigned(cluster_1_reg_513) + unsigned(ap_const_lv5_1));

    centroids_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state85, tmp_48_cast_fu_1009_p1, tmp_55_cast_fu_1101_p1, tmp_60_cast_fu_1500_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            centroids_address0 <= tmp_60_cast_fu_1500_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            centroids_address0 <= tmp_55_cast_fu_1101_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_address0 <= tmp_48_cast_fu_1009_p1(10 - 1 downto 0);
        else 
            centroids_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    centroids_address1_assign_proc : process(ap_CS_fsm_state12, tmp_58_cast_reg_1817, ap_CS_fsm_state77, tmp_55_cast_fu_1101_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            centroids_address1 <= tmp_58_cast_reg_1817(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            centroids_address1 <= tmp_55_cast_fu_1101_p1(10 - 1 downto 0);
        else 
            centroids_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    centroids_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state85)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            centroids_ce0 <= ap_const_logic_1;
        else 
            centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state77)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            centroids_ce1 <= ap_const_logic_1;
        else 
            centroids_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_d0 <= inStream_V_data_V_0_data_out;

    centroids_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
            centroids_we0 <= ap_const_logic_1;
        else 
            centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_we1_assign_proc : process(ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            centroids_we1 <= ap_const_logic_1;
        else 
            centroids_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cluster_1_cast_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cluster_1_reg_513),32));
    cluster_2_fu_1200_p3 <= 
        cluster_1_cast_reg_1636 when (tmp_43_fu_1194_p2(0) = '1') else 
        cluster_reg_488;
    distance_1_to_int_fu_1117_p1 <= distance_2_reg_1704;
    exitcond10_fu_1369_p2 <= "1" when (f_reg_617 = ap_const_lv6_32) else "0";
    exitcond11_fu_1395_p2 <= "1" when (idx_reg_628 = ap_const_lv5_14) else "0";
    exitcond12_fu_1423_p2 <= "1" when (idx2_reg_639 = ap_const_lv2_2) else "0";
    exitcond13_fu_1460_p2 <= "1" when (i6_reg_659 = ap_const_lv5_14) else "0";
    exitcond1_fu_812_p2 <= "1" when (i_reg_384 = ap_const_lv5_14) else "0";
    exitcond1_i_fu_1067_p2 <= "1" when (cluster_1_reg_513 = ap_const_lv5_14) else "0";
    exitcond2_fu_845_p2 <= "1" when (j_reg_408 = ap_const_lv6_32) else "0";
    exitcond3_fu_964_p2 <= "1" when (i1_reg_419 = ap_const_lv5_14) else "0";
    exitcond4_fu_982_p2 <= "1" when (j2_reg_442 = ap_const_lv6_32) else "0";
    exitcond5_fu_1013_p2 <= "1" when (i5_reg_453 = ap_const_lv5_14) else "0";
    exitcond6_fu_1041_p2 <= "1" when (i7_reg_465 = ap_const_lv5_14) else "0";
    exitcond7_fu_1243_p2 <= "1" when (i8_reg_559 = ap_const_lv5_14) else "0";
    exitcond8_fu_1302_p2 <= "1" when (j9_reg_582 = ap_const_lv6_32) else "0";
    exitcond9_fu_1346_p2 <= "1" when (c_reg_594 = ap_const_lv5_14) else "0";
    exitcond_fu_1478_p2 <= "1" when (j5_reg_682 = ap_const_lv6_32) else "0";
    exitcond_i_fu_1079_p2 <= "1" when (j_i_reg_548 = ap_const_lv6_32) else "0";
    f_1_fu_1375_p2 <= std_logic_vector(unsigned(f_reg_617) + unsigned(ap_const_lv6_1));
    gain_off1_fu_1281_p2 <= std_logic_vector(unsigned(gain_read_reg_1530) + unsigned(ap_const_lv32_FFFFFFFE));
    gain_off_fu_824_p2 <= std_logic_vector(unsigned(gain_read_reg_1530) + unsigned(ap_const_lv32_FFFFFFFF));
    grp_fu_1521_p0 <= ap_const_lv11_32(7 - 1 downto 0);
    grp_fu_1521_p1 <= results_q0(11 - 1 downto 0);
    grp_fu_1521_p2 <= grp_fu_1521_p20(6 - 1 downto 0);
    grp_fu_1521_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j9_reg_582),11));

    grp_fu_693_opcode_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_693_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_693_opcode <= ap_const_lv2_0;
        else 
            grp_fu_693_opcode <= "XX";
        end if; 
    end process;


    grp_fu_693_p0_assign_proc : process(reg_762, reg_775, distance_i_reg_536, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_693_p0 <= reg_775;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_693_p0 <= distance_i_reg_536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_693_p0 <= reg_762;
        else 
            grp_fu_693_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_693_p1_assign_proc : process(reg_762, centroids_load_1_reg_1674, tmp_7_i_reg_1694, ap_CS_fsm_state14, ap_CS_fsm_state23, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_693_p1 <= reg_762;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_693_p1 <= tmp_7_i_reg_1694;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_693_p1 <= centroids_load_1_reg_1674;
        else 
            grp_fu_693_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_818_p2 <= std_logic_vector(unsigned(i_reg_384) + unsigned(ap_const_lv5_1));
    i_2_fu_970_p2 <= std_logic_vector(unsigned(i1_reg_419) + unsigned(ap_const_lv5_1));
    i_3_fu_1019_p2 <= std_logic_vector(unsigned(i5_reg_453) + unsigned(ap_const_lv5_1));
    i_4_fu_1047_p2 <= std_logic_vector(unsigned(i7_reg_465) + unsigned(ap_const_lv5_1));
    i_5_fu_1249_p2 <= std_logic_vector(unsigned(i8_reg_559) + unsigned(ap_const_lv5_1));
    i_6_fu_1466_p2 <= std_logic_vector(unsigned(i6_reg_659) + unsigned(ap_const_lv5_1));
    icmp1_fu_1296_p2 <= "1" when (tmp_27_fu_1286_p4 = ap_const_lv31_0) else "0";
    icmp_fu_839_p2 <= "1" when (tmp_fu_829_p4 = ap_const_lv31_0) else "0";
    idx_1_fu_1401_p2 <= std_logic_vector(unsigned(idx_reg_628) + unsigned(ap_const_lv5_1));
    idx_2_fu_1429_p2 <= std_logic_vector(unsigned(idx2_reg_639) + unsigned(ap_const_lv2_1));

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_V_0_state, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            inStream_TDATA_blk_n <= inStream_V_data_V_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            inStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((inStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_state_cmp_full and inStream_V_data_V_0_sel_wr);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    j_1_fu_851_p2 <= std_logic_vector(unsigned(j_reg_408) + unsigned(ap_const_lv6_1));
    j_2_fu_988_p2 <= std_logic_vector(unsigned(j2_reg_442) + unsigned(ap_const_lv6_1));
    j_3_fu_1308_p2 <= std_logic_vector(unsigned(j9_reg_582) + unsigned(ap_const_lv6_1));
    j_4_fu_1085_p2 <= std_logic_vector(unsigned(j_i_reg_548) + unsigned(ap_const_lv6_1));
    j_5_fu_1484_p2 <= std_logic_vector(unsigned(j5_reg_682) + unsigned(ap_const_lv6_1));
    min_distance_1_fu_1207_p3 <= 
        distance_2_reg_1704 when (tmp_43_fu_1194_p2(0) = '1') else 
        min_distance_i_reg_501;
    min_distance_i_to_in_fu_1134_p1 <= min_distance_i_reg_501;

    new_centroids_address0_assign_proc : process(ap_CS_fsm_state60, new_centroids_addr_reg_1771, ap_CS_fsm_state45, tmp_58_cast_fu_1391_p1, ap_CS_fsm_state59, new_centroids_addr_1_reg_1822, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            new_centroids_address0 <= new_centroids_addr_1_reg_1822;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            new_centroids_address0 <= tmp_58_cast_fu_1391_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            new_centroids_address0 <= new_centroids_addr_reg_1771;
        else 
            new_centroids_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    new_centroids_ce0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state45, ap_CS_fsm_state59, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            new_centroids_ce0 <= ap_const_logic_1;
        else 
            new_centroids_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    new_centroids_d0_assign_proc : process(reg_769, ap_CS_fsm_state60, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            new_centroids_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            new_centroids_d0 <= reg_769;
        else 
            new_centroids_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    new_centroids_we0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state52)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            new_centroids_we0 <= ap_const_logic_1;
        else 
            new_centroids_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul1_fu_1340_p2 <= std_logic_vector(unsigned(phi_mul9_reg_605) + unsigned(ap_const_lv10_32));
    next_mul2_fu_958_p2 <= std_logic_vector(unsigned(phi_mul1_reg_430) + unsigned(ap_const_lv10_32));
    next_mul3_fu_1454_p2 <= std_logic_vector(unsigned(phi_mul2_reg_670) + unsigned(ap_const_lv10_32));
    next_mul4_fu_1057_p2 <= std_logic_vector(unsigned(phi_mul3_reg_524) + unsigned(ap_const_lv10_32));
    next_mul6_fu_1035_p2 <= std_logic_vector(unsigned(phi_mul5_reg_476) + unsigned(ap_const_lv10_32));
    next_mul8_fu_1237_p2 <= std_logic_vector(unsigned(phi_mul7_reg_570) + unsigned(ap_const_lv10_32));
    next_mul_fu_806_p2 <= std_logic_vector(unsigned(phi_mul_reg_396) + unsigned(ap_const_lv10_32));
    notlhs1_fu_1170_p2 <= "0" when (tmp_37_fu_1138_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1152_p2 <= "0" when (tmp_35_fu_1120_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_1176_p2 <= "1" when (tmp_38_fu_1148_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1158_p2 <= "1" when (tmp_36_fu_1130_p1 = ap_const_lv23_0) else "0";

    np_cluster_address0_assign_proc : process(np_cluster_addr_reg_1724, ap_CS_fsm_state40, np_cluster_addr_1_reg_1794, ap_CS_fsm_state54, exitcond10_fu_1369_p2, ap_CS_fsm_state41, tmp_12_fu_1225_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_0)))) then 
            np_cluster_address0 <= np_cluster_addr_1_reg_1794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            np_cluster_address0 <= np_cluster_addr_reg_1724;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            np_cluster_address0 <= tmp_12_fu_1225_p1(5 - 1 downto 0);
        else 
            np_cluster_address0 <= "XXXXX";
        end if; 
    end process;


    np_cluster_ce0_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_state54, exitcond10_fu_1369_p2, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_0)))) then 
            np_cluster_ce0 <= ap_const_logic_1;
        else 
            np_cluster_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    np_cluster_d0_assign_proc : process(ap_CS_fsm_state54, exitcond10_fu_1369_p2, ap_CS_fsm_state41, tmp_13_fu_1230_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1))) then 
            np_cluster_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            np_cluster_d0 <= tmp_13_fu_1230_p2;
        else 
            np_cluster_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    np_cluster_we0_assign_proc : process(ap_CS_fsm_state54, exitcond10_fu_1369_p2, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((ap_const_logic_1 = ap_CS_fsm_state54) and (exitcond10_fu_1369_p2 = ap_const_lv1_1)))) then 
            np_cluster_we0 <= ap_const_logic_1;
        else 
            np_cluster_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_V_1_state, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state86, ap_CS_fsm_state87)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            outStream_TDATA_blk_n <= outStream_V_data_V_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_in_assign_proc : process(results_q0, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, tmp_data_V_4_fu_1449_p1, tmp_data_V_5_fu_1516_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            outStream_V_data_V_1_data_in <= tmp_data_V_5_fu_1516_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            outStream_V_data_V_1_data_in <= tmp_data_V_4_fu_1449_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            outStream_V_data_V_1_data_in <= results_q0;
        else 
            outStream_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((outStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_state_cmp_full and outStream_V_data_V_1_sel_wr);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_in_assign_proc : process(ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86, valOut_last_V_reg_1850, valOut_last_V_1_reg_1885, valOut_last_V_2_reg_1926)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            outStream_V_last_V_1_data_in <= valOut_last_V_2_reg_1926;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            outStream_V_last_V_1_data_in <= valOut_last_V_1_reg_1885;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            outStream_V_last_V_1_data_in <= valOut_last_V_reg_1850;
        else 
            outStream_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(outStream_V_data_V_1_ack_in, ap_CS_fsm_state79, ap_CS_fsm_state82, ap_CS_fsm_state86)
    begin
        if ((((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state79)))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);

    points_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_46_cast_fu_924_p1, tmp_56_cast_fu_1112_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            points_address0 <= tmp_56_cast_fu_1112_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            points_address0 <= tmp_46_cast_fu_924_p1(10 - 1 downto 0);
        else 
            points_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    points_address1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state45, tmp_56_cast_fu_1112_p1, tmp_52_cast_fu_1336_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            points_address1 <= tmp_52_cast_fu_1336_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            points_address1 <= tmp_56_cast_fu_1112_p1(10 - 1 downto 0);
        else 
            points_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    points_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            points_ce0 <= ap_const_logic_1;
        else 
            points_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    points_ce1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            points_ce1 <= ap_const_logic_1;
        else 
            points_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    points_d0 <= inStream_V_data_V_0_data_out;

    points_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
            points_we0 <= ap_const_logic_1;
        else 
            points_we0 <= ap_const_logic_0;
        end if; 
    end process;


    results_address0_assign_proc : process(ap_CS_fsm_state9, tmp_8_reg_1626, ap_CS_fsm_state11, results_addr_1_reg_1649, ap_CS_fsm_state40, results_addr_2_reg_1742, ap_CS_fsm_state43, ap_CS_fsm_state78, tmp_7_fu_1030_p1, tmp_23_fu_1407_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            results_address0 <= tmp_23_fu_1407_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            results_address0 <= results_addr_2_reg_1742;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            results_address0 <= results_addr_1_reg_1649;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            results_address0 <= tmp_8_reg_1626(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            results_address0 <= tmp_7_fu_1030_p1(5 - 1 downto 0);
        else 
            results_address0 <= "XXXXX";
        end if; 
    end process;


    results_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state40, ap_CS_fsm_state43, ap_CS_fsm_state78)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            results_ce0 <= ap_const_logic_1;
        else 
            results_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    results_d0_assign_proc : process(inStream_V_data_V_0_data_out, ap_CS_fsm_state9, ap_CS_fsm_state40, cluster_reg_488)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            results_d0 <= cluster_reg_488;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            results_d0 <= inStream_V_data_V_0_data_out;
        else 
            results_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    results_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state9, ap_CS_fsm_state40, tmp_9_fu_1214_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state40) and (tmp_9_fu_1214_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (inStream_V_data_V_0_vld_out = ap_const_logic_1)))) then 
            results_we0 <= ap_const_logic_1;
        else 
            results_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1260_p2 <= "1" when (endip_0 = ap_const_lv2_1) else "0";
    tmp_11_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i8_reg_559),64));
        tmp_12_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cluster_reg_488),64));

    tmp_13_fu_1230_p2 <= std_logic_vector(unsigned(np_cluster_q0) + unsigned(ap_const_lv32_1));
    tmp_14_fu_1275_p2 <= "1" when (end_fu_176 = ap_const_lv2_0) else "0";
    tmp_15_cast_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j9_reg_582),10));
    tmp_15_fu_871_p2 <= (tmp_6_fu_867_p1 or i_reg_384);
    tmp_16_fu_877_p3 <= j_reg_408(5 downto 5);
    tmp_18_fu_1358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_594),64));
    tmp_19_cast_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_617),10));
    tmp_1_cast_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_408),10));
    tmp_22_fu_1418_p2 <= "1" when (gain_read_reg_1530 = ap_const_lv32_3) else "0";
    tmp_23_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_reg_628),64));
    tmp_24_fu_998_p2 <= std_logic_vector(unsigned(phi_mul1_reg_430) + unsigned(tmp_6_cast_fu_994_p1));
    tmp_26_fu_1472_p2 <= "1" when (i6_reg_659 = ap_const_lv5_13) else "0";
    tmp_27_cast_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_reg_682),10));
    tmp_27_fu_1286_p4 <= gain_off1_fu_1281_p2(31 downto 1);
    tmp_28_fu_1505_p2 <= "1" when (j5_reg_682 = ap_const_lv6_31) else "0";
    tmp_29_fu_1322_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_1318_p1) + unsigned(phi_mul7_reg_570));
    tmp_2_fu_885_p3 <= (tmp_16_fu_877_p3 & tmp_15_fu_871_p2);
    tmp_35_fu_1120_p4 <= distance_1_to_int_fu_1117_p1(30 downto 23);
    tmp_36_fu_1130_p1 <= distance_1_to_int_fu_1117_p1(23 - 1 downto 0);
    tmp_37_fu_1138_p4 <= min_distance_i_to_in_fu_1134_p1(30 downto 23);
    tmp_38_fu_1148_p1 <= min_distance_i_to_in_fu_1134_p1(23 - 1 downto 0);
    tmp_39_fu_1164_p2 <= (notrhs_fu_1158_p2 or notlhs_fu_1152_p2);
    tmp_3_fu_893_p2 <= "1" when (tmp_2_fu_885_p3 = ap_const_lv6_0) else "0";
    tmp_40_fu_1182_p2 <= (notrhs1_fu_1176_p2 or notlhs1_fu_1170_p2);
    tmp_41_fu_1188_p2 <= (tmp_40_fu_1182_p2 and tmp_39_fu_1164_p2);
    tmp_43_fu_1194_p2 <= (tmp_42_fu_714_p2 and tmp_41_fu_1188_p2);
    tmp_44_fu_1095_p2 <= std_logic_vector(unsigned(phi_mul3_reg_524) + unsigned(tmp_4_i_cast_fu_1091_p1));
    tmp_45_fu_1106_p2 <= std_logic_vector(unsigned(phi_mul5_reg_476) + unsigned(tmp_4_i_cast_fu_1091_p1));
    tmp_46_cast_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_1562),64));
    tmp_46_fu_1385_p2 <= std_logic_vector(unsigned(phi_mul9_reg_605) + unsigned(tmp_19_cast_fu_1381_p1));
    tmp_47_fu_1435_p1 <= idx2_reg_639(1 - 1 downto 0);
    tmp_48_cast_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1592),64));
    tmp_48_fu_1494_p2 <= std_logic_vector(unsigned(phi_mul2_reg_670) + unsigned(tmp_27_cast_fu_1490_p1));
    tmp_4_fu_861_p2 <= std_logic_vector(unsigned(phi_mul_reg_396) + unsigned(tmp_1_cast_fu_857_p1));
    tmp_4_i_cast_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_548),10));
    tmp_52_cast_fu_1336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_1766),64));
        tmp_54_cast_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1521_p3),64));

    tmp_55_cast_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1095_p2),64));
    tmp_56_cast_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_1106_p2),64));
    tmp_58_cast_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_reg_1807),64));
    tmp_60_cast_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_1494_p2),64));
    tmp_6_cast_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_reg_442),10));
    tmp_6_fu_867_p1 <= j_reg_408(5 - 1 downto 0);
    tmp_7_fu_1030_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_453),64));
    tmp_8_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i7_reg_465),64));
    tmp_9_fu_1214_p2 <= "1" when (cluster_reg_488 = results_q0) else "0";
    tmp_data_V_4_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_1_in_reg_650),32));
    tmp_data_V_5_fu_1516_p1 <= centroids_q0;
    tmp_fu_829_p4 <= gain_off_fu_824_p2(31 downto 1);
    valOut_last_V_1_fu_1443_p2 <= "1" when (idx2_reg_639 = ap_const_lv2_1) else "0";
    valOut_last_V_2_fu_1511_p2 <= (tmp_28_fu_1505_p2 and tmp_26_reg_1908);
    valOut_last_V_fu_1412_p2 <= "1" when (idx_reg_628 = ap_const_lv5_13) else "0";
end behav;
