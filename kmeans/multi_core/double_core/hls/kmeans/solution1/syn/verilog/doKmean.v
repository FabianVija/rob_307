// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="doKmean,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=4233815,HLS_SYN_TPT=none,HLS_SYN_MEM=37,HLS_SYN_DSP=8,HLS_SYN_FF=3610,HLS_SYN_LUT=6072,HLS_VERSION=2018_2}" *)

module doKmean (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 87'd1;
parameter    ap_ST_fsm_state2 = 87'd2;
parameter    ap_ST_fsm_state3 = 87'd4;
parameter    ap_ST_fsm_state4 = 87'd8;
parameter    ap_ST_fsm_state5 = 87'd16;
parameter    ap_ST_fsm_state6 = 87'd32;
parameter    ap_ST_fsm_state7 = 87'd64;
parameter    ap_ST_fsm_state8 = 87'd128;
parameter    ap_ST_fsm_state9 = 87'd256;
parameter    ap_ST_fsm_state10 = 87'd512;
parameter    ap_ST_fsm_state11 = 87'd1024;
parameter    ap_ST_fsm_state12 = 87'd2048;
parameter    ap_ST_fsm_state13 = 87'd4096;
parameter    ap_ST_fsm_state14 = 87'd8192;
parameter    ap_ST_fsm_state15 = 87'd16384;
parameter    ap_ST_fsm_state16 = 87'd32768;
parameter    ap_ST_fsm_state17 = 87'd65536;
parameter    ap_ST_fsm_state18 = 87'd131072;
parameter    ap_ST_fsm_state19 = 87'd262144;
parameter    ap_ST_fsm_state20 = 87'd524288;
parameter    ap_ST_fsm_state21 = 87'd1048576;
parameter    ap_ST_fsm_state22 = 87'd2097152;
parameter    ap_ST_fsm_state23 = 87'd4194304;
parameter    ap_ST_fsm_state24 = 87'd8388608;
parameter    ap_ST_fsm_state25 = 87'd16777216;
parameter    ap_ST_fsm_state26 = 87'd33554432;
parameter    ap_ST_fsm_state27 = 87'd67108864;
parameter    ap_ST_fsm_state28 = 87'd134217728;
parameter    ap_ST_fsm_state29 = 87'd268435456;
parameter    ap_ST_fsm_state30 = 87'd536870912;
parameter    ap_ST_fsm_state31 = 87'd1073741824;
parameter    ap_ST_fsm_state32 = 87'd2147483648;
parameter    ap_ST_fsm_state33 = 87'd4294967296;
parameter    ap_ST_fsm_state34 = 87'd8589934592;
parameter    ap_ST_fsm_state35 = 87'd17179869184;
parameter    ap_ST_fsm_state36 = 87'd34359738368;
parameter    ap_ST_fsm_state37 = 87'd68719476736;
parameter    ap_ST_fsm_state38 = 87'd137438953472;
parameter    ap_ST_fsm_state39 = 87'd274877906944;
parameter    ap_ST_fsm_state40 = 87'd549755813888;
parameter    ap_ST_fsm_state41 = 87'd1099511627776;
parameter    ap_ST_fsm_state42 = 87'd2199023255552;
parameter    ap_ST_fsm_state43 = 87'd4398046511104;
parameter    ap_ST_fsm_state44 = 87'd8796093022208;
parameter    ap_ST_fsm_state45 = 87'd17592186044416;
parameter    ap_ST_fsm_state46 = 87'd35184372088832;
parameter    ap_ST_fsm_state47 = 87'd70368744177664;
parameter    ap_ST_fsm_state48 = 87'd140737488355328;
parameter    ap_ST_fsm_state49 = 87'd281474976710656;
parameter    ap_ST_fsm_state50 = 87'd562949953421312;
parameter    ap_ST_fsm_state51 = 87'd1125899906842624;
parameter    ap_ST_fsm_state52 = 87'd2251799813685248;
parameter    ap_ST_fsm_state53 = 87'd4503599627370496;
parameter    ap_ST_fsm_state54 = 87'd9007199254740992;
parameter    ap_ST_fsm_state55 = 87'd18014398509481984;
parameter    ap_ST_fsm_state56 = 87'd36028797018963968;
parameter    ap_ST_fsm_state57 = 87'd72057594037927936;
parameter    ap_ST_fsm_state58 = 87'd144115188075855872;
parameter    ap_ST_fsm_state59 = 87'd288230376151711744;
parameter    ap_ST_fsm_state60 = 87'd576460752303423488;
parameter    ap_ST_fsm_state61 = 87'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 87'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 87'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 87'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 87'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 87'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 87'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 87'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 87'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 87'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 87'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 87'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 87'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 87'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 87'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 87'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 87'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 87'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 87'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 87'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 87'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 87'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 87'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 87'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 87'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 87'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 87'd77371252455336267181195264;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [86:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_V_1_data_in;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_in;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [31:0] gain;
reg   [13:0] points_address0;
reg    points_ce0;
reg    points_we0;
wire   [31:0] points_d0;
wire   [31:0] points_q0;
reg   [13:0] points_address1;
reg    points_ce1;
wire   [31:0] points_q1;
reg   [3:0] valref_keep_V;
reg   [3:0] valref_strb_V;
reg   [1:0] valref_user_V;
reg   [4:0] valref_id_V;
reg   [5:0] valref_dest_V;
reg   [9:0] centroids_address0;
reg    centroids_ce0;
reg    centroids_we0;
wire   [31:0] centroids_d0;
wire   [31:0] centroids_q0;
reg   [9:0] centroids_address1;
reg    centroids_ce1;
reg    centroids_we1;
wire   [31:0] centroids_q1;
reg   [1:0] endip_0;
reg   [7:0] results_address0;
reg    results_ce0;
reg    results_we0;
reg   [31:0] results_d0;
wire   [31:0] results_q0;
reg   [4:0] np_cluster_address0;
reg    np_cluster_ce0;
reg    np_cluster_we0;
reg   [31:0] np_cluster_d0;
wire   [31:0] np_cluster_q0;
reg   [9:0] new_centroids_address0;
reg    new_centroids_ce0;
reg    new_centroids_we0;
reg   [31:0] new_centroids_d0;
wire   [31:0] new_centroids_q0;
reg   [1:0] endip_1;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
reg   [31:0] reg_779;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_710_p2;
reg   [31:0] reg_786;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state51;
reg   [31:0] reg_792;
wire    ap_CS_fsm_state60;
reg   [31:0] gain_read_reg_1552;
wire   [13:0] next_mul_fu_823_p2;
reg   [13:0] next_mul_reg_1559;
wire    ap_CS_fsm_state2;
wire   [7:0] i_1_fu_835_p2;
reg   [7:0] i_1_reg_1567;
wire   [5:0] tmp_4_fu_841_p1;
reg   [5:0] tmp_4_reg_1572;
wire   [0:0] exitcond1_fu_829_p2;
wire   [0:0] icmp_fu_860_p2;
reg   [0:0] icmp_reg_1577;
wire   [5:0] j_1_fu_872_p2;
reg   [5:0] j_1_reg_1584;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_6_fu_882_p2;
reg   [13:0] tmp_6_reg_1589;
wire   [0:0] exitcond2_fu_866_p2;
wire   [0:0] tmp_3_fu_911_p2;
reg   [0:0] tmp_3_reg_1594;
wire   [9:0] next_mul2_fu_976_p2;
reg   [9:0] next_mul2_reg_1598;
wire    ap_CS_fsm_state5;
wire   [4:0] i_2_fu_988_p2;
reg   [4:0] i_2_reg_1606;
wire   [5:0] j_2_fu_1006_p2;
reg   [5:0] j_2_reg_1614;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_24_fu_1016_p2;
reg   [9:0] tmp_24_reg_1619;
wire   [0:0] exitcond4_fu_1000_p2;
wire   [7:0] i_3_fu_1037_p2;
reg   [7:0] i_3_reg_1627;
wire    ap_CS_fsm_state8;
wire   [13:0] next_mul6_fu_1053_p2;
reg   [13:0] next_mul6_reg_1640;
wire    ap_CS_fsm_state10;
wire   [7:0] i_4_fu_1065_p2;
reg   [7:0] i_4_reg_1648;
wire   [63:0] tmp_8_fu_1071_p1;
reg   [63:0] tmp_8_reg_1653;
wire   [0:0] exitcond6_fu_1059_p2;
wire   [9:0] next_mul4_fu_1075_p2;
reg   [9:0] next_mul4_reg_1658;
wire    ap_CS_fsm_state11;
wire   [31:0] cluster_1_cast_fu_1081_p1;
reg   [31:0] cluster_1_cast_reg_1663;
wire   [4:0] c_2_fu_1091_p2;
reg   [4:0] c_2_reg_1671;
reg   [7:0] results_addr_1_reg_1676;
wire   [0:0] exitcond1_i_fu_1085_p2;
wire   [5:0] j_4_fu_1103_p2;
reg   [5:0] j_4_reg_1684;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_i_fu_1097_p2;
reg   [31:0] centroids_load_1_reg_1701;
reg   [31:0] points_load_2_reg_1706;
reg   [31:0] centroids_load_2_reg_1711;
wire   [31:0] grp_fu_714_p2;
reg   [31:0] tmp_6_i_reg_1716;
wire   [31:0] grp_fu_719_p2;
reg   [31:0] tmp_7_i_reg_1721;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_736_p2;
reg   [31:0] distance_2_reg_1731;
wire    ap_CS_fsm_state38;
wire   [31:0] cluster_2_fu_1222_p3;
wire    ap_CS_fsm_state39;
wire   [31:0] min_distance_1_fu_1229_p3;
reg   [4:0] np_cluster_addr_reg_1751;
wire    ap_CS_fsm_state40;
wire   [13:0] next_mul8_fu_1259_p2;
reg   [13:0] next_mul8_reg_1756;
wire    ap_CS_fsm_state42;
wire   [7:0] i_5_fu_1271_p2;
reg   [7:0] i_5_reg_1764;
reg   [7:0] results_addr_2_reg_1769;
wire   [0:0] exitcond7_fu_1265_p2;
wire   [0:0] tmp_14_fu_1297_p2;
reg   [0:0] tmp_14_reg_1777;
wire   [0:0] icmp1_fu_1318_p2;
reg   [0:0] icmp1_reg_1781;
wire   [5:0] j_3_fu_1330_p2;
reg   [5:0] j_3_reg_1788;
wire    ap_CS_fsm_state43;
wire  signed [10:0] tmp_30_fu_1336_p1;
reg  signed [10:0] tmp_30_reg_1793;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg   [9:0] new_centroids_addr_reg_1803;
wire   [9:0] next_mul1_fu_1363_p2;
reg   [9:0] next_mul1_reg_1808;
wire    ap_CS_fsm_state53;
wire   [4:0] c_1_fu_1375_p2;
reg   [4:0] c_1_reg_1816;
reg   [4:0] np_cluster_addr_1_reg_1821;
wire   [0:0] exitcond9_fu_1369_p2;
wire   [5:0] f_1_fu_1398_p2;
reg   [5:0] f_1_reg_1829;
wire    ap_CS_fsm_state54;
wire   [9:0] tmp_46_fu_1408_p2;
reg   [9:0] tmp_46_reg_1834;
wire   [0:0] exitcond10_fu_1392_p2;
wire    ap_CS_fsm_state55;
wire   [63:0] tmp_58_cast_fu_1414_p1;
reg   [63:0] tmp_58_cast_reg_1844;
wire    ap_CS_fsm_state59;
reg   [9:0] new_centroids_addr_1_reg_1849;
wire   [31:0] grp_fu_727_p1;
reg   [31:0] tmp_20_reg_1854;
wire   [31:0] grp_fu_723_p2;
reg   [31:0] tmp_21_reg_1859;
wire    ap_CS_fsm_state76;
wire   [7:0] idx_1_fu_1424_p2;
reg   [7:0] idx_1_reg_1867;
wire    ap_CS_fsm_state78;
wire   [0:0] exitcond11_fu_1418_p2;
wire   [0:0] valOut_last_V_fu_1435_p2;
reg   [0:0] valOut_last_V_reg_1877;
wire   [0:0] tmp_22_fu_1441_p2;
reg   [0:0] tmp_22_reg_1882;
wire   [1:0] idx_2_fu_1452_p2;
reg   [1:0] idx_2_reg_1894;
wire    ap_CS_fsm_state81;
wire   [0:0] exitcond12_fu_1446_p2;
wire   [0:0] tmp_47_fu_1458_p1;
wire   [0:0] valOut_last_V_1_fu_1466_p2;
reg   [0:0] valOut_last_V_1_reg_1912;
wire   [31:0] tmp_data_V_4_fu_1472_p1;
wire   [9:0] next_mul3_fu_1477_p2;
reg   [9:0] next_mul3_reg_1922;
wire    ap_CS_fsm_state84;
reg    ap_block_state84;
wire   [4:0] i_6_fu_1489_p2;
reg   [4:0] i_6_reg_1930;
wire   [0:0] tmp_26_fu_1495_p2;
reg   [0:0] tmp_26_reg_1935;
wire   [0:0] exitcond13_fu_1483_p2;
wire   [5:0] j_5_fu_1507_p2;
reg   [5:0] j_5_reg_1943;
wire    ap_CS_fsm_state85;
wire   [0:0] exitcond_fu_1501_p2;
wire   [0:0] valOut_last_V_2_fu_1534_p2;
reg   [0:0] valOut_last_V_2_reg_1953;
wire   [31:0] tmp_data_V_5_fu_1539_p1;
reg   [7:0] i_reg_401;
reg   [13:0] phi_mul_reg_413;
reg   [5:0] j_reg_425;
reg   [4:0] i1_reg_436;
reg   [9:0] phi_mul1_reg_447;
reg   [5:0] j2_reg_459;
wire   [0:0] exitcond3_fu_982_p2;
reg   [7:0] i5_reg_470;
reg   [7:0] i7_reg_482;
wire    ap_CS_fsm_state41;
wire   [0:0] exitcond5_fu_1031_p2;
reg   [13:0] phi_mul5_reg_493;
reg  signed [31:0] cluster_reg_505;
reg   [31:0] min_distance_i_reg_518;
reg   [4:0] cluster_1_reg_530;
reg   [9:0] phi_mul3_reg_541;
reg   [31:0] distance_i_reg_553;
reg   [5:0] j_i_reg_565;
reg   [7:0] i8_reg_576;
wire   [0:0] exitcond8_fu_1324_p2;
reg   [13:0] phi_mul7_reg_587;
reg   [5:0] j9_reg_599;
wire    ap_CS_fsm_state52;
reg   [4:0] c_reg_611;
reg   [9:0] phi_mul9_reg_622;
reg   [5:0] f_reg_634;
wire    ap_CS_fsm_state77;
reg   [7:0] idx_reg_645;
reg   [1:0] idx2_reg_656;
reg   [1:0] val_assign_1_in_reg_667;
reg   [4:0] i6_reg_676;
reg   [9:0] phi_mul2_reg_687;
reg   [5:0] j5_reg_699;
wire   [63:0] tmp_46_cast_fu_942_p1;
wire   [63:0] tmp_48_cast_fu_1027_p1;
wire   [63:0] tmp_7_fu_1048_p1;
wire   [63:0] tmp_55_cast_fu_1123_p1;
wire   [63:0] tmp_56_cast_fu_1134_p1;
wire  signed [63:0] tmp_12_fu_1247_p1;
wire   [63:0] tmp_11_fu_1277_p1;
wire   [63:0] tmp_52_cast_fu_1354_p1;
wire  signed [63:0] tmp_54_cast_fu_1359_p1;
wire   [63:0] tmp_18_fu_1381_p1;
wire   [63:0] tmp_23_fu_1430_p1;
wire   [63:0] tmp_60_cast_fu_1523_p1;
wire   [0:0] tmp_10_fu_1282_p2;
reg   [1:0] end_fu_192;
wire   [0:0] tmp_9_fu_1236_p2;
wire   [31:0] tmp_13_fu_1252_p2;
reg   [31:0] grp_fu_710_p0;
reg   [31:0] grp_fu_710_p1;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state61;
wire   [31:0] gain_off_fu_845_p2;
wire   [30:0] tmp_fu_850_p4;
wire   [13:0] tmp_1_cast_fu_878_p1;
wire   [1:0] tmp_16_fu_893_p4;
wire   [5:0] tmp_15_fu_888_p2;
wire   [7:0] tmp_2_fu_903_p3;
wire   [9:0] tmp_6_cast_fu_1012_p1;
wire   [9:0] tmp_4_i_cast_fu_1113_p1;
wire   [9:0] tmp_44_fu_1117_p2;
wire   [13:0] tmp_4_i_cast1_fu_1109_p1;
wire   [13:0] tmp_45_fu_1128_p2;
wire   [31:0] distance_1_to_int_fu_1139_p1;
wire   [31:0] min_distance_i_to_in_fu_1156_p1;
wire   [7:0] tmp_35_fu_1142_p4;
wire   [22:0] tmp_36_fu_1152_p1;
wire   [0:0] notrhs_fu_1180_p2;
wire   [0:0] notlhs_fu_1174_p2;
wire   [7:0] tmp_37_fu_1160_p4;
wire   [22:0] tmp_38_fu_1170_p1;
wire   [0:0] notrhs1_fu_1198_p2;
wire   [0:0] notlhs1_fu_1192_p2;
wire   [0:0] tmp_39_fu_1186_p2;
wire   [0:0] tmp_40_fu_1204_p2;
wire   [0:0] tmp_41_fu_1210_p2;
wire   [0:0] tmp_42_fu_731_p2;
wire   [0:0] tmp_43_fu_1216_p2;
wire   [31:0] gain_off1_fu_1303_p2;
wire   [30:0] tmp_27_fu_1308_p4;
wire   [13:0] tmp_15_cast_fu_1344_p1;
wire   [13:0] tmp_29_fu_1348_p2;
wire  signed [10:0] grp_fu_1544_p3;
wire   [9:0] tmp_19_cast_fu_1404_p1;
wire   [9:0] tmp_27_cast_fu_1513_p1;
wire   [9:0] tmp_48_fu_1517_p2;
wire   [0:0] tmp_28_fu_1528_p2;
wire   [6:0] grp_fu_1544_p0;
wire   [5:0] grp_fu_1544_p2;
reg   [1:0] grp_fu_710_opcode;
reg   [86:0] ap_NS_fsm;
wire   [10:0] grp_fu_1544_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 87'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 valref_keep_V = 4'd0;
#0 valref_strb_V = 4'd0;
#0 valref_user_V = 2'd0;
#0 valref_id_V = 5'd0;
#0 valref_dest_V = 6'd0;
#0 endip_0 = 2'd0;
#0 endip_1 = 2'd0;
end

doKmean_points #(
    .DataWidth( 32 ),
    .AddressRange( 12500 ),
    .AddressWidth( 14 ))
points_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(points_address0),
    .ce0(points_ce0),
    .we0(points_we0),
    .d0(points_d0),
    .q0(points_q0),
    .address1(points_address1),
    .ce1(points_ce1),
    .q1(points_q1)
);

doKmean_centroids #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
centroids_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(centroids_address0),
    .ce0(centroids_ce0),
    .we0(centroids_we0),
    .d0(centroids_d0),
    .q0(centroids_q0),
    .address1(centroids_address1),
    .ce1(centroids_ce1),
    .we1(centroids_we1),
    .d1(tmp_21_reg_1859),
    .q1(centroids_q1)
);

doKmean_results #(
    .DataWidth( 32 ),
    .AddressRange( 250 ),
    .AddressWidth( 8 ))
results_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(results_address0),
    .ce0(results_ce0),
    .we0(results_we0),
    .d0(results_d0),
    .q0(results_q0)
);

doKmean_np_cluster #(
    .DataWidth( 32 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
np_cluster_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(np_cluster_address0),
    .ce0(np_cluster_ce0),
    .we0(np_cluster_we0),
    .d0(np_cluster_d0),
    .q0(np_cluster_q0)
);

doKmean_new_centrbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
new_centroids_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(new_centroids_address0),
    .ce0(new_centroids_ce0),
    .we0(new_centroids_we0),
    .d0(new_centroids_d0),
    .q0(new_centroids_q0)
);

doKmean_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
doKmean_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .gain(gain)
);

doKmean_faddfsub_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_faddfsub_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_710_p0),
    .din1(grp_fu_710_p1),
    .opcode(grp_fu_710_opcode),
    .ce(1'b1),
    .dout(grp_fu_710_p2)
);

doKmean_fsub_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fsub_32nsdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(points_load_2_reg_1706),
    .din1(centroids_load_2_reg_1711),
    .ce(1'b1),
    .dout(grp_fu_714_p2)
);

doKmean_fmul_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fmul_32nseOg_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_786),
    .din1(tmp_6_i_reg_1716),
    .ce(1'b1),
    .dout(grp_fu_719_p2)
);

doKmean_fdiv_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fdiv_32nsfYi_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_792),
    .din1(tmp_20_reg_1854),
    .ce(1'b1),
    .dout(grp_fu_723_p2)
);

doKmean_sitofp_32g8j #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_sitofp_32g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(np_cluster_q0),
    .ce(1'b1),
    .dout(grp_fu_727_p1)
);

doKmean_fcmp_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
doKmean_fcmp_32nshbi_U6(
    .din0(distance_2_reg_1731),
    .din1(min_distance_i_reg_518),
    .opcode(5'd4),
    .dout(tmp_42_fu_731_p2)
);

doKmean_fsqrt_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
doKmean_fsqrt_32nibs_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(distance_i_reg_553),
    .ce(1'b1),
    .dout(grp_fu_736_p2)
);

doKmean_mac_muladjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
doKmean_mac_muladjbC_U8(
    .din0(grp_fu_1544_p0),
    .din1(tmp_30_reg_1793),
    .din2(grp_fu_1544_p2),
    .dout(grp_fu_1544_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_state == 2'd2)) | ((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_state == 2'd3)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1) & (inStream_V_data_V_0_state == 2'd3)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_state == 2'd1)) | ((inStream_V_data_V_0_vld_in == 1'b1) & (inStream_V_data_V_0_state == 2'd2)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_state == 2'd2)) | ((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_state == 2'd3)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_state == 2'd1)) | ((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1) & (inStream_V_dest_V_0_state == 2'd3)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_state == 2'd1)) | ((inStream_V_dest_V_0_vld_in == 1'b1) & (inStream_V_dest_V_0_state == 2'd2)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_state == 2'd2)) | ((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_state == 2'd3)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_state == 2'd1)) | ((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1) & (inStream_V_id_V_0_state == 2'd3)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_state == 2'd1)) | ((inStream_V_id_V_0_vld_in == 1'b1) & (inStream_V_id_V_0_state == 2'd2)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_state == 2'd2)) | ((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_state == 2'd3)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_state == 2'd1)) | ((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_state == 2'd3)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_state == 2'd1)) | ((inStream_V_keep_V_0_vld_in == 1'b1) & (inStream_V_keep_V_0_state == 2'd2)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_state == 2'd2)) | ((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_state == 2'd3)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_state == 2'd1)) | ((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1) & (inStream_V_strb_V_0_state == 2'd3)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_state == 2'd1)) | ((inStream_V_strb_V_0_vld_in == 1'b1) & (inStream_V_strb_V_0_state == 2'd2)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_state == 2'd2)) | ((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_state == 2'd3)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_state == 2'd1)) | ((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1) & (inStream_V_user_V_0_state == 2'd3)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_state == 2'd1)) | ((inStream_V_user_V_0_vld_in == 1'b1) & (inStream_V_user_V_0_state == 2'd2)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_state == 2'd2)) | ((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_state == 2'd3)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_state == 2'd1)) | ((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1) & (outStream_V_data_V_1_state == 2'd3)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_state == 2'd1)) | ((outStream_V_data_V_1_vld_in == 1'b1) & (outStream_V_data_V_1_state == 2'd2)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_state == 2'd2)) | ((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_state == 2'd3)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_state == 2'd1)) | ((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1) & (outStream_V_dest_V_1_state == 2'd3)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_state == 2'd1)) | ((outStream_V_dest_V_1_vld_in == 1'b1) & (outStream_V_dest_V_1_state == 2'd2)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_state == 2'd2)) | ((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_state == 2'd3)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_state == 2'd1)) | ((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1) & (outStream_V_id_V_1_state == 2'd3)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_state == 2'd1)) | ((outStream_V_id_V_1_vld_in == 1'b1) & (outStream_V_id_V_1_state == 2'd2)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_state == 2'd2)) | ((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_state == 2'd3)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_state == 2'd1)) | ((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1) & (outStream_V_keep_V_1_state == 2'd3)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_state == 2'd1)) | ((outStream_V_keep_V_1_vld_in == 1'b1) & (outStream_V_keep_V_1_state == 2'd2)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_state == 2'd2)) | ((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_state == 2'd3)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_state == 2'd1)) | ((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1) & (outStream_V_last_V_1_state == 2'd3)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_state == 2'd1)) | ((outStream_V_last_V_1_vld_in == 1'b1) & (outStream_V_last_V_1_state == 2'd2)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_state == 2'd2)) | ((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_state == 2'd3)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_state == 2'd1)) | ((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1) & (outStream_V_strb_V_1_state == 2'd3)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_state == 2'd1)) | ((outStream_V_strb_V_1_vld_in == 1'b1) & (outStream_V_strb_V_1_state == 2'd2)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_state == 2'd2)) | ((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_state == 2'd3)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_state == 2'd1)) | ((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1) & (outStream_V_user_V_1_state == 2'd3)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_state == 2'd1)) | ((outStream_V_user_V_1_vld_in == 1'b1) & (outStream_V_user_V_1_state == 2'd2)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (icmp1_fu_1318_p2 == 1'd1) & (tmp_14_fu_1297_p2 == 1'd1) & (exitcond7_fu_1265_p2 == 1'd1))) begin
        c_reg_611 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1))) begin
        c_reg_611 <= c_1_reg_1816;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        cluster_1_reg_530 <= c_2_reg_1671;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd0))) begin
        cluster_1_reg_530 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        cluster_reg_505 <= cluster_2_fu_1222_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd0))) begin
        cluster_reg_505 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_1085_p2 == 1'd0))) begin
        distance_i_reg_553 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        distance_i_reg_553 <= grp_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (tmp_9_fu_1236_p2 == 1'd0))) begin
                end_fu_192[0] <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_1031_p2 == 1'd1))) begin
                end_fu_192[0] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_10_fu_1282_p2 == 1'd1) & (exitcond7_fu_1265_p2 == 1'd1))) begin
                endip_0[0] <= end_fu_192[0];
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_982_p2 == 1'd1) & (icmp_reg_1577 == 1'd1))) begin
                endip_0[0] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        f_reg_634 <= f_1_reg_1829;
    end else if (((1'b1 == ap_CS_fsm_state53) & (icmp1_reg_1781 == 1'd1) & (tmp_14_reg_1777 == 1'd1) & (exitcond9_fu_1369_p2 == 1'd0))) begin
        f_reg_634 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_860_p2 == 1'd1) & (exitcond1_fu_829_p2 == 1'd1))) begin
        i1_reg_436 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_1000_p2 == 1'd1))) begin
        i1_reg_436 <= i_2_reg_1606;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        i5_reg_470 <= i_3_reg_1627;
    end else if (((1'b1 == ap_CS_fsm_state5) & ((exitcond3_fu_982_p2 == 1'd1) | (icmp_reg_1577 == 1'd0)))) begin
        i5_reg_470 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) & (exitcond12_fu_1446_p2 == 1'd1))) begin
        i6_reg_676 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state85) & (exitcond_fu_1501_p2 == 1'd1))) begin
        i6_reg_676 <= i_6_reg_1930;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_1031_p2 == 1'd1))) begin
        i7_reg_482 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        i7_reg_482 <= i_4_reg_1648;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd1))) begin
        i8_reg_576 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (exitcond8_fu_1324_p2 == 1'd1))) begin
        i8_reg_576 <= i_5_reg_1764;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_866_p2 == 1'd1))) begin
        i_reg_401 <= i_1_reg_1567;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_401 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (tmp_22_fu_1441_p2 == 1'd1) & (exitcond11_fu_1418_p2 == 1'd1))) begin
        idx2_reg_656 <= 2'd0;
    end else if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
        idx2_reg_656 <= idx_2_reg_1894;
    end
end

always @ (posedge ap_clk) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
        idx_reg_645 <= idx_1_reg_1867;
    end else if (((1'b1 == ap_CS_fsm_state53) & ((exitcond9_fu_1369_p2 == 1'd1) | (icmp1_reg_1781 == 1'd0) | (tmp_14_reg_1777 == 1'd0)))) begin
        idx_reg_645 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        j2_reg_459 <= j_2_reg_1614;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1577 == 1'd1) & (exitcond3_fu_982_p2 == 1'd0))) begin
        j2_reg_459 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
        j5_reg_699 <= j_5_reg_1943;
    end else if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & (tmp_22_reg_1882 == 1'd1) & (exitcond13_fu_1483_p2 == 1'd0))) begin
        j5_reg_699 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        j9_reg_599 <= j_3_reg_1788;
    end else if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1265_p2 == 1'd0))) begin
        j9_reg_599 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_1085_p2 == 1'd0))) begin
        j_i_reg_565 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        j_i_reg_565 <= j_4_reg_1684;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        j_reg_425 <= j_1_reg_1584;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_829_p2 == 1'd0))) begin
        j_reg_425 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        min_distance_i_reg_518 <= min_distance_1_fu_1229_p3;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd0))) begin
        min_distance_i_reg_518 <= 32'd1371161527;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_fu_860_p2 == 1'd1) & (exitcond1_fu_829_p2 == 1'd1))) begin
        phi_mul1_reg_447 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_1000_p2 == 1'd1))) begin
        phi_mul1_reg_447 <= next_mul2_reg_1598;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) & (exitcond12_fu_1446_p2 == 1'd1))) begin
        phi_mul2_reg_687 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state85) & (exitcond_fu_1501_p2 == 1'd1))) begin
        phi_mul2_reg_687 <= next_mul3_reg_1922;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        phi_mul3_reg_541 <= next_mul4_reg_1658;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd0))) begin
        phi_mul3_reg_541 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_1031_p2 == 1'd1))) begin
        phi_mul5_reg_493 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        phi_mul5_reg_493 <= next_mul6_reg_1640;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd1))) begin
        phi_mul7_reg_587 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state43) & (exitcond8_fu_1324_p2 == 1'd1))) begin
        phi_mul7_reg_587 <= next_mul8_reg_1756;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (icmp1_fu_1318_p2 == 1'd1) & (tmp_14_fu_1297_p2 == 1'd1) & (exitcond7_fu_1265_p2 == 1'd1))) begin
        phi_mul9_reg_622 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1))) begin
        phi_mul9_reg_622 <= next_mul1_reg_1808;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_866_p2 == 1'd1))) begin
        phi_mul_reg_413 <= next_mul_reg_1559;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_413 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_779 <= points_q1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        reg_779 <= points_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) & (exitcond12_fu_1446_p2 == 1'd0))) begin
        if ((tmp_47_fu_1458_p1 == 1'd1)) begin
                        val_assign_1_in_reg_667[0] <= endip_1[0];
        end else if ((tmp_47_fu_1458_p1 == 1'd0)) begin
                        val_assign_1_in_reg_667[0] <= endip_0[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp1_reg_1781 == 1'd1) & (tmp_14_reg_1777 == 1'd1))) begin
        c_1_reg_1816 <= c_1_fu_1375_p2;
        next_mul1_reg_1808 <= next_mul1_fu_1363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c_2_reg_1671 <= c_2_fu_1091_p2;
        cluster_1_cast_reg_1663[4 : 0] <= cluster_1_cast_fu_1081_p1[4 : 0];
        next_mul4_reg_1658 <= next_mul4_fu_1075_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        centroids_load_1_reg_1701 <= centroids_q0;
        centroids_load_2_reg_1711 <= centroids_q1;
        points_load_2_reg_1706 <= points_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        distance_2_reg_1731 <= grp_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & ((exitcond9_fu_1369_p2 == 1'd1) | (icmp1_reg_1781 == 1'd0) | (tmp_14_reg_1777 == 1'd0)))) begin
        endip_1[0] <= end_fu_192[0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        f_1_reg_1829 <= f_1_fu_1398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        gain_read_reg_1552 <= gain;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_1567 <= i_1_fu_835_p2;
        next_mul_reg_1559 <= next_mul_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_reg_1577 == 1'd1))) begin
        i_2_reg_1606 <= i_2_fu_988_p2;
        next_mul2_reg_1598 <= next_mul2_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_3_reg_1627 <= i_3_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_4_reg_1648 <= i_4_fu_1065_p2;
        next_mul6_reg_1640 <= next_mul6_fu_1053_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        i_5_reg_1764 <= i_5_fu_1271_p2;
        next_mul8_reg_1756 <= next_mul8_fu_1259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & (tmp_22_reg_1882 == 1'd1))) begin
        i_6_reg_1930 <= i_6_fu_1489_p2;
        next_mul3_reg_1922 <= next_mul3_fu_1477_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_14_fu_1297_p2 == 1'd1) & (exitcond7_fu_1265_p2 == 1'd1))) begin
        icmp1_reg_1781 <= icmp1_fu_1318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_829_p2 == 1'd1))) begin
        icmp_reg_1577 <= icmp_fu_860_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        idx_1_reg_1867 <= idx_1_fu_1424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        idx_2_reg_1894 <= idx_2_fu_1452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_1584 <= j_1_fu_872_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_1614 <= j_2_fu_1006_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        j_3_reg_1788 <= j_3_fu_1330_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_4_reg_1684 <= j_4_fu_1103_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        j_5_reg_1943 <= j_5_fu_1507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        new_centroids_addr_1_reg_1849 <= tmp_58_cast_fu_1414_p1;
        tmp_58_cast_reg_1844[9 : 0] <= tmp_58_cast_fu_1414_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        new_centroids_addr_reg_1803 <= tmp_54_cast_fu_1359_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp1_reg_1781 == 1'd1) & (tmp_14_reg_1777 == 1'd1) & (exitcond9_fu_1369_p2 == 1'd0))) begin
        np_cluster_addr_1_reg_1821 <= tmp_18_fu_1381_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        np_cluster_addr_reg_1751 <= tmp_12_fu_1247_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= valref_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= valref_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= valref_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= valref_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= valref_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= valref_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= valref_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= valref_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= valref_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= valref_user_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state18))) begin
        reg_786 <= grp_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state46))) begin
        reg_792 <= new_centroids_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_1085_p2 == 1'd1))) begin
        results_addr_1_reg_1676 <= tmp_8_reg_1653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1265_p2 == 1'd0))) begin
        results_addr_2_reg_1769 <= tmp_11_fu_1277_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1265_p2 == 1'd1))) begin
        tmp_14_reg_1777 <= tmp_14_fu_1297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        tmp_20_reg_1854 <= grp_fu_727_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        tmp_21_reg_1859 <= grp_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (exitcond11_fu_1418_p2 == 1'd1))) begin
        tmp_22_reg_1882 <= tmp_22_fu_1441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_1000_p2 == 1'd0))) begin
        tmp_24_reg_1619 <= tmp_24_fu_1016_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & (tmp_22_reg_1882 == 1'd1) & (exitcond13_fu_1483_p2 == 1'd0))) begin
        tmp_26_reg_1935 <= tmp_26_fu_1495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_30_reg_1793 <= tmp_30_fu_1336_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_866_p2 == 1'd0))) begin
        tmp_3_reg_1594 <= tmp_3_fu_911_p2;
        tmp_6_reg_1589 <= tmp_6_fu_882_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd0))) begin
        tmp_46_reg_1834 <= tmp_46_fu_1408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_829_p2 == 1'd0))) begin
        tmp_4_reg_1572 <= tmp_4_fu_841_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_6_i_reg_1716 <= grp_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_7_i_reg_1721 <= grp_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd0))) begin
        tmp_8_reg_1653[7 : 0] <= tmp_8_fu_1071_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state81) & (exitcond12_fu_1446_p2 == 1'd0))) begin
        valOut_last_V_1_reg_1912 <= valOut_last_V_1_fu_1466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state85) & (exitcond_fu_1501_p2 == 1'd0))) begin
        valOut_last_V_2_reg_1953 <= valOut_last_V_2_fu_1534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (exitcond11_fu_1418_p2 == 1'd0))) begin
        valOut_last_V_reg_1877 <= valOut_last_V_fu_1435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_3_reg_1594 == 1'd1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        valref_dest_V <= inStream_V_dest_V_0_data_out;
        valref_id_V <= inStream_V_id_V_0_data_out;
        valref_keep_V <= inStream_V_keep_V_0_data_out;
        valref_strb_V <= inStream_V_strb_V_0_data_out;
        valref_user_V <= inStream_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & ((exitcond13_fu_1483_p2 == 1'd1) | (tmp_22_reg_1882 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & ((exitcond13_fu_1483_p2 == 1'd1) | (tmp_22_reg_1882 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        centroids_address0 = tmp_60_cast_fu_1523_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        centroids_address0 = tmp_55_cast_fu_1123_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_address0 = tmp_48_cast_fu_1027_p1;
    end else begin
        centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        centroids_address1 = tmp_58_cast_reg_1844;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        centroids_address1 = tmp_55_cast_fu_1123_p1;
    end else begin
        centroids_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        centroids_ce0 = 1'b1;
    end else begin
        centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state12))) begin
        centroids_ce1 = 1'b1;
    end else begin
        centroids_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        centroids_we0 = 1'b1;
    end else begin
        centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        centroids_we1 = 1'b1;
    end else begin
        centroids_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_710_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_710_opcode = 2'd0;
    end else begin
        grp_fu_710_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_710_p0 = reg_792;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_710_p0 = distance_i_reg_553;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_710_p0 = reg_779;
    end else begin
        grp_fu_710_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_710_p1 = reg_779;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_710_p1 = tmp_7_i_reg_1721;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_710_p1 = centroids_load_1_reg_1701;
    end else begin
        grp_fu_710_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9))) begin
        inStream_TDATA_blk_n = inStream_V_data_V_0_state[1'd0];
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_data_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_id_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_keep_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_strb_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        inStream_V_user_V_0_ack_out = 1'b1;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        new_centroids_address0 = new_centroids_addr_1_reg_1849;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        new_centroids_address0 = tmp_58_cast_fu_1414_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        new_centroids_address0 = new_centroids_addr_reg_1803;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        new_centroids_address0 = tmp_54_cast_fu_1359_p1;
    end else begin
        new_centroids_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state60))) begin
        new_centroids_ce0 = 1'b1;
    end else begin
        new_centroids_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        new_centroids_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        new_centroids_d0 = reg_786;
    end else begin
        new_centroids_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state60))) begin
        new_centroids_we0 = 1'b1;
    end else begin
        new_centroids_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd0)))) begin
        np_cluster_address0 = np_cluster_addr_1_reg_1821;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        np_cluster_address0 = np_cluster_addr_reg_1751;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        np_cluster_address0 = tmp_12_fu_1247_p1;
    end else begin
        np_cluster_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd0)))) begin
        np_cluster_ce0 = 1'b1;
    end else begin
        np_cluster_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1))) begin
        np_cluster_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        np_cluster_d0 = tmp_13_fu_1252_p2;
    end else begin
        np_cluster_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | ((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1)))) begin
        np_cluster_we0 = 1'b1;
    end else begin
        np_cluster_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79))) begin
        outStream_TDATA_blk_n = outStream_V_data_V_1_state[1'd1];
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        outStream_V_data_V_1_data_in = tmp_data_V_5_fu_1539_p1;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        outStream_V_data_V_1_data_in = tmp_data_V_4_fu_1472_p1;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        outStream_V_data_V_1_data_in = results_q0;
    end else begin
        outStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        outStream_V_last_V_1_data_in = valOut_last_V_2_reg_1953;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        outStream_V_last_V_1_data_in = valOut_last_V_1_reg_1912;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        outStream_V_last_V_1_data_in = valOut_last_V_reg_1877;
    end else begin
        outStream_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79)))) begin
        outStream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        points_address0 = tmp_56_cast_fu_1134_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        points_address0 = tmp_46_cast_fu_942_p1;
    end else begin
        points_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        points_address1 = tmp_52_cast_fu_1354_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        points_address1 = tmp_56_cast_fu_1134_p1;
    end else begin
        points_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state12))) begin
        points_ce1 = 1'b1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
        points_we0 = 1'b1;
    end else begin
        points_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        results_address0 = tmp_23_fu_1430_p1;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        results_address0 = results_addr_2_reg_1769;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        results_address0 = results_addr_1_reg_1676;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        results_address0 = tmp_8_reg_1653;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        results_address0 = tmp_7_fu_1048_p1;
    end else begin
        results_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        results_ce0 = 1'b1;
    end else begin
        results_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        results_d0 = cluster_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        results_d0 = inStream_V_data_V_0_data_out;
    end else begin
        results_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (tmp_9_fu_1236_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1)))) begin
        results_we0 = 1'b1;
    end else begin
        results_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_829_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_866_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ((exitcond3_fu_982_p2 == 1'd1) | (icmp_reg_1577 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond4_fu_1000_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_1031_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_1059_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond1_i_fu_1085_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_i_fu_1097_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (exitcond7_fu_1265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (exitcond8_fu_1324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & ((exitcond9_fu_1369_p2 == 1'd1) | (icmp1_reg_1781 == 1'd0) | (tmp_14_reg_1777 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (exitcond10_fu_1392_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (tmp_22_fu_1441_p2 == 1'd1) & (exitcond11_fu_1418_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else if (((1'b1 == ap_CS_fsm_state78) & (exitcond11_fu_1418_p2 == 1'd1) & (tmp_22_fu_1441_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            if (((1'b1 == ap_CS_fsm_state81) & (exitcond12_fu_1446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end
        end
        ap_ST_fsm_state84 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & ((exitcond13_fu_1483_p2 == 1'd1) | (tmp_22_reg_1882 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state84) & (tmp_22_reg_1882 == 1'd1) & (exitcond13_fu_1483_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            if (((1'b1 == ap_CS_fsm_state85) & (exitcond_fu_1501_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state86 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            if (((outStream_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state87))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state84 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_1375_p2 = (c_reg_611 + 5'd1);

assign c_2_fu_1091_p2 = (cluster_1_reg_530 + 5'd1);

assign centroids_d0 = inStream_V_data_V_0_data_out;

assign cluster_1_cast_fu_1081_p1 = cluster_1_reg_530;

assign cluster_2_fu_1222_p3 = ((tmp_43_fu_1216_p2[0:0] === 1'b1) ? cluster_1_cast_reg_1663 : cluster_reg_505);

assign distance_1_to_int_fu_1139_p1 = distance_2_reg_1731;

assign exitcond10_fu_1392_p2 = ((f_reg_634 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond11_fu_1418_p2 = ((idx_reg_645 == 8'd250) ? 1'b1 : 1'b0);

assign exitcond12_fu_1446_p2 = ((idx2_reg_656 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond13_fu_1483_p2 = ((i6_reg_676 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond1_fu_829_p2 = ((i_reg_401 == 8'd250) ? 1'b1 : 1'b0);

assign exitcond1_i_fu_1085_p2 = ((cluster_1_reg_530 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond2_fu_866_p2 = ((j_reg_425 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond3_fu_982_p2 = ((i1_reg_436 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond4_fu_1000_p2 = ((j2_reg_459 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond5_fu_1031_p2 = ((i5_reg_470 == 8'd250) ? 1'b1 : 1'b0);

assign exitcond6_fu_1059_p2 = ((i7_reg_482 == 8'd250) ? 1'b1 : 1'b0);

assign exitcond7_fu_1265_p2 = ((i8_reg_576 == 8'd250) ? 1'b1 : 1'b0);

assign exitcond8_fu_1324_p2 = ((j9_reg_599 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond9_fu_1369_p2 = ((c_reg_611 == 5'd20) ? 1'b1 : 1'b0);

assign exitcond_fu_1501_p2 = ((j5_reg_699 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond_i_fu_1097_p2 = ((j_i_reg_565 == 6'd50) ? 1'b1 : 1'b0);

assign f_1_fu_1398_p2 = (f_reg_634 + 6'd1);

assign gain_off1_fu_1303_p2 = ($signed(gain_read_reg_1552) + $signed(32'd4294967294));

assign gain_off_fu_845_p2 = ($signed(gain_read_reg_1552) + $signed(32'd4294967295));

assign grp_fu_1544_p0 = 11'd50;

assign grp_fu_1544_p2 = grp_fu_1544_p20;

assign grp_fu_1544_p20 = j9_reg_599;

assign i_1_fu_835_p2 = (i_reg_401 + 8'd1);

assign i_2_fu_988_p2 = (i1_reg_436 + 5'd1);

assign i_3_fu_1037_p2 = (i5_reg_470 + 8'd1);

assign i_4_fu_1065_p2 = (i7_reg_482 + 8'd1);

assign i_5_fu_1271_p2 = (i8_reg_576 + 8'd1);

assign i_6_fu_1489_p2 = (i6_reg_676 + 5'd1);

assign icmp1_fu_1318_p2 = ((tmp_27_fu_1308_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_fu_860_p2 = ((tmp_fu_850_p4 == 31'd0) ? 1'b1 : 1'b0);

assign idx_1_fu_1424_p2 = (idx_reg_645 + 8'd1);

assign idx_2_fu_1452_p2 = (idx2_reg_656 + 2'd1);

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign j_1_fu_872_p2 = (j_reg_425 + 6'd1);

assign j_2_fu_1006_p2 = (j2_reg_459 + 6'd1);

assign j_3_fu_1330_p2 = (j9_reg_599 + 6'd1);

assign j_4_fu_1103_p2 = (j_i_reg_565 + 6'd1);

assign j_5_fu_1507_p2 = (j5_reg_699 + 6'd1);

assign min_distance_1_fu_1229_p3 = ((tmp_43_fu_1216_p2[0:0] === 1'b1) ? distance_2_reg_1731 : min_distance_i_reg_518);

assign min_distance_i_to_in_fu_1156_p1 = min_distance_i_reg_518;

assign next_mul1_fu_1363_p2 = (phi_mul9_reg_622 + 10'd50);

assign next_mul2_fu_976_p2 = (phi_mul1_reg_447 + 10'd50);

assign next_mul3_fu_1477_p2 = (phi_mul2_reg_687 + 10'd50);

assign next_mul4_fu_1075_p2 = (phi_mul3_reg_541 + 10'd50);

assign next_mul6_fu_1053_p2 = (phi_mul5_reg_493 + 14'd50);

assign next_mul8_fu_1259_p2 = (phi_mul7_reg_587 + 14'd50);

assign next_mul_fu_823_p2 = (phi_mul_reg_413 + 14'd50);

assign notlhs1_fu_1192_p2 = ((tmp_37_fu_1160_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_1174_p2 = ((tmp_35_fu_1142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_1198_p2 = ((tmp_38_fu_1170_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_1180_p2 = ((tmp_36_fu_1152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign points_d0 = inStream_V_data_V_0_data_out;

assign tmp_10_fu_1282_p2 = ((endip_0 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_11_fu_1277_p1 = i8_reg_576;

assign tmp_12_fu_1247_p1 = cluster_reg_505;

assign tmp_13_fu_1252_p2 = (np_cluster_q0 + 32'd1);

assign tmp_14_fu_1297_p2 = ((end_fu_192 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_15_cast_fu_1344_p1 = j9_reg_599;

assign tmp_15_fu_888_p2 = (tmp_4_reg_1572 | j_reg_425);

assign tmp_16_fu_893_p4 = {{i_reg_401[7:6]}};

assign tmp_18_fu_1381_p1 = c_reg_611;

assign tmp_19_cast_fu_1404_p1 = f_reg_634;

assign tmp_1_cast_fu_878_p1 = j_reg_425;

assign tmp_22_fu_1441_p2 = ((gain_read_reg_1552 == 32'd3) ? 1'b1 : 1'b0);

assign tmp_23_fu_1430_p1 = idx_reg_645;

assign tmp_24_fu_1016_p2 = (phi_mul1_reg_447 + tmp_6_cast_fu_1012_p1);

assign tmp_26_fu_1495_p2 = ((i6_reg_676 == 5'd19) ? 1'b1 : 1'b0);

assign tmp_27_cast_fu_1513_p1 = j5_reg_699;

assign tmp_27_fu_1308_p4 = {{gain_off1_fu_1303_p2[31:1]}};

assign tmp_28_fu_1528_p2 = ((j5_reg_699 == 6'd49) ? 1'b1 : 1'b0);

assign tmp_29_fu_1348_p2 = (tmp_15_cast_fu_1344_p1 + phi_mul7_reg_587);

assign tmp_2_fu_903_p3 = {{tmp_16_fu_893_p4}, {tmp_15_fu_888_p2}};

assign tmp_30_fu_1336_p1 = results_q0[10:0];

assign tmp_35_fu_1142_p4 = {{distance_1_to_int_fu_1139_p1[30:23]}};

assign tmp_36_fu_1152_p1 = distance_1_to_int_fu_1139_p1[22:0];

assign tmp_37_fu_1160_p4 = {{min_distance_i_to_in_fu_1156_p1[30:23]}};

assign tmp_38_fu_1170_p1 = min_distance_i_to_in_fu_1156_p1[22:0];

assign tmp_39_fu_1186_p2 = (notrhs_fu_1180_p2 | notlhs_fu_1174_p2);

assign tmp_3_fu_911_p2 = ((tmp_2_fu_903_p3 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_40_fu_1204_p2 = (notrhs1_fu_1198_p2 | notlhs1_fu_1192_p2);

assign tmp_41_fu_1210_p2 = (tmp_40_fu_1204_p2 & tmp_39_fu_1186_p2);

assign tmp_43_fu_1216_p2 = (tmp_42_fu_731_p2 & tmp_41_fu_1210_p2);

assign tmp_44_fu_1117_p2 = (phi_mul3_reg_541 + tmp_4_i_cast_fu_1113_p1);

assign tmp_45_fu_1128_p2 = (phi_mul5_reg_493 + tmp_4_i_cast1_fu_1109_p1);

assign tmp_46_cast_fu_942_p1 = tmp_6_reg_1589;

assign tmp_46_fu_1408_p2 = (phi_mul9_reg_622 + tmp_19_cast_fu_1404_p1);

assign tmp_47_fu_1458_p1 = idx2_reg_656[0:0];

assign tmp_48_cast_fu_1027_p1 = tmp_24_reg_1619;

assign tmp_48_fu_1517_p2 = (phi_mul2_reg_687 + tmp_27_cast_fu_1513_p1);

assign tmp_4_fu_841_p1 = i_reg_401[5:0];

assign tmp_4_i_cast1_fu_1109_p1 = j_i_reg_565;

assign tmp_4_i_cast_fu_1113_p1 = j_i_reg_565;

assign tmp_52_cast_fu_1354_p1 = tmp_29_fu_1348_p2;

assign tmp_54_cast_fu_1359_p1 = grp_fu_1544_p3;

assign tmp_55_cast_fu_1123_p1 = tmp_44_fu_1117_p2;

assign tmp_56_cast_fu_1134_p1 = tmp_45_fu_1128_p2;

assign tmp_58_cast_fu_1414_p1 = tmp_46_reg_1834;

assign tmp_60_cast_fu_1523_p1 = tmp_48_fu_1517_p2;

assign tmp_6_cast_fu_1012_p1 = j2_reg_459;

assign tmp_6_fu_882_p2 = (phi_mul_reg_413 + tmp_1_cast_fu_878_p1);

assign tmp_7_fu_1048_p1 = i5_reg_470;

assign tmp_8_fu_1071_p1 = i7_reg_482;

assign tmp_9_fu_1236_p2 = ((cluster_reg_505 == results_q0) ? 1'b1 : 1'b0);

assign tmp_data_V_4_fu_1472_p1 = val_assign_1_in_reg_667;

assign tmp_data_V_5_fu_1539_p1 = centroids_q0;

assign tmp_fu_850_p4 = {{gain_off_fu_845_p2[31:1]}};

assign valOut_last_V_1_fu_1466_p2 = ((idx2_reg_656 == 2'd1) ? 1'b1 : 1'b0);

assign valOut_last_V_2_fu_1534_p2 = (tmp_28_fu_1528_p2 & tmp_26_reg_1935);

assign valOut_last_V_fu_1435_p2 = ((idx_reg_645 == 8'd249) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    endip_0[1] <= 1'b0;
    endip_1[1] <= 1'b0;
    tmp_8_reg_1653[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    cluster_1_cast_reg_1663[31:5] <= 27'b000000000000000000000000000;
    tmp_58_cast_reg_1844[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    val_assign_1_in_reg_667[1] <= 1'b0;
    end_fu_192[1] <= 1'b0;
end

endmodule //doKmean
