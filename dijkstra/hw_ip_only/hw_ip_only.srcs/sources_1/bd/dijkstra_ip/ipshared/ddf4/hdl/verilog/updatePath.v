// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module updatePath (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        size,
        path_address0,
        path_ce0,
        path_we0,
        path_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
input  [31:0] size;
output  [8:0] path_address0;
output   path_ce0;
output   path_we0;
output  [31:0] path_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream_TREADY;
reg path_ce0;
reg path_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inStream_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_106_p2;
wire   [30:0] i_1_fu_111_p2;
reg    ap_block_state2;
reg   [30:0] i_reg_91;
wire   [63:0] tmp_2_fu_122_p1;
wire   [31:0] i_cast_fu_102_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_91 <= i_1_fu_111_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_91 <= 31'd0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_TDATA_blk_n = inStream_TVALID;
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        inStream_TREADY = 1'b1;
    end else begin
        inStream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        path_ce0 = 1'b1;
    end else begin
        path_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        path_we0 = 1'b1;
    end else begin
        path_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0)) & (tmp_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = ((tmp_fu_106_p2 == 1'd1) & (inStream_TVALID == 1'b0));
end

assign i_1_fu_111_p2 = (i_reg_91 + 31'd1);

assign i_cast_fu_102_p1 = i_reg_91;

assign path_address0 = tmp_2_fu_122_p1;

assign path_d0 = inStream_TDATA;

assign tmp_2_fu_122_p1 = i_reg_91;

assign tmp_fu_106_p2 = (($signed(i_cast_fu_102_p1) < $signed(size)) ? 1'b1 : 1'b0);

endmodule //updatePath
