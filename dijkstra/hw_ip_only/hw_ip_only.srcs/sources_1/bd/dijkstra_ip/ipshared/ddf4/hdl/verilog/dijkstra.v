// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dijkstra,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=5016,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1211,HLS_SYN_LUT=2559,HLS_VERSION=2018_2}" *)

module dijkstra (
        ap_clk,
        ap_rst_n,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TUSER,
        inStream_TLAST,
        inStream_TID,
        inStream_TDEST,
        outStream_TDATA,
        outStream_TVALID,
        outStream_TREADY,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        outStream_TID,
        outStream_TDEST,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [3:0] inStream_TKEEP;
input  [3:0] inStream_TSTRB;
input  [1:0] inStream_TUSER;
input  [0:0] inStream_TLAST;
input  [4:0] inStream_TID;
input  [5:0] inStream_TDEST;
output  [31:0] outStream_TDATA;
output   outStream_TVALID;
input   outStream_TREADY;
output  [3:0] outStream_TKEEP;
output  [3:0] outStream_TSTRB;
output  [1:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
output  [4:0] outStream_TID;
output  [5:0] outStream_TDEST;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] inStream_V_data_V_0_data_out;
wire    inStream_V_data_V_0_vld_in;
wire    inStream_V_data_V_0_vld_out;
wire    inStream_V_data_V_0_ack_in;
reg    inStream_V_data_V_0_ack_out;
reg   [31:0] inStream_V_data_V_0_payload_A;
reg   [31:0] inStream_V_data_V_0_payload_B;
reg    inStream_V_data_V_0_sel_rd;
reg    inStream_V_data_V_0_sel_wr;
wire    inStream_V_data_V_0_sel;
wire    inStream_V_data_V_0_load_A;
wire    inStream_V_data_V_0_load_B;
reg   [1:0] inStream_V_data_V_0_state;
wire    inStream_V_data_V_0_state_cmp_full;
reg   [3:0] inStream_V_keep_V_0_data_out;
wire    inStream_V_keep_V_0_vld_in;
wire    inStream_V_keep_V_0_vld_out;
wire    inStream_V_keep_V_0_ack_in;
reg    inStream_V_keep_V_0_ack_out;
reg   [3:0] inStream_V_keep_V_0_payload_A;
reg   [3:0] inStream_V_keep_V_0_payload_B;
reg    inStream_V_keep_V_0_sel_rd;
reg    inStream_V_keep_V_0_sel_wr;
wire    inStream_V_keep_V_0_sel;
wire    inStream_V_keep_V_0_load_A;
wire    inStream_V_keep_V_0_load_B;
reg   [1:0] inStream_V_keep_V_0_state;
wire    inStream_V_keep_V_0_state_cmp_full;
reg   [3:0] inStream_V_strb_V_0_data_out;
wire    inStream_V_strb_V_0_vld_in;
wire    inStream_V_strb_V_0_vld_out;
wire    inStream_V_strb_V_0_ack_in;
reg    inStream_V_strb_V_0_ack_out;
reg   [3:0] inStream_V_strb_V_0_payload_A;
reg   [3:0] inStream_V_strb_V_0_payload_B;
reg    inStream_V_strb_V_0_sel_rd;
reg    inStream_V_strb_V_0_sel_wr;
wire    inStream_V_strb_V_0_sel;
wire    inStream_V_strb_V_0_load_A;
wire    inStream_V_strb_V_0_load_B;
reg   [1:0] inStream_V_strb_V_0_state;
wire    inStream_V_strb_V_0_state_cmp_full;
reg   [1:0] inStream_V_user_V_0_data_out;
wire    inStream_V_user_V_0_vld_in;
wire    inStream_V_user_V_0_vld_out;
wire    inStream_V_user_V_0_ack_in;
reg    inStream_V_user_V_0_ack_out;
reg   [1:0] inStream_V_user_V_0_payload_A;
reg   [1:0] inStream_V_user_V_0_payload_B;
reg    inStream_V_user_V_0_sel_rd;
reg    inStream_V_user_V_0_sel_wr;
wire    inStream_V_user_V_0_sel;
wire    inStream_V_user_V_0_load_A;
wire    inStream_V_user_V_0_load_B;
reg   [1:0] inStream_V_user_V_0_state;
wire    inStream_V_user_V_0_state_cmp_full;
reg   [0:0] inStream_V_last_V_0_data_out;
wire    inStream_V_last_V_0_vld_in;
wire    inStream_V_last_V_0_vld_out;
wire    inStream_V_last_V_0_ack_in;
reg    inStream_V_last_V_0_ack_out;
reg   [0:0] inStream_V_last_V_0_payload_A;
reg   [0:0] inStream_V_last_V_0_payload_B;
reg    inStream_V_last_V_0_sel_rd;
reg    inStream_V_last_V_0_sel_wr;
wire    inStream_V_last_V_0_sel;
wire    inStream_V_last_V_0_load_A;
wire    inStream_V_last_V_0_load_B;
reg   [1:0] inStream_V_last_V_0_state;
wire    inStream_V_last_V_0_state_cmp_full;
reg   [4:0] inStream_V_id_V_0_data_out;
wire    inStream_V_id_V_0_vld_in;
wire    inStream_V_id_V_0_vld_out;
wire    inStream_V_id_V_0_ack_in;
reg    inStream_V_id_V_0_ack_out;
reg   [4:0] inStream_V_id_V_0_payload_A;
reg   [4:0] inStream_V_id_V_0_payload_B;
reg    inStream_V_id_V_0_sel_rd;
reg    inStream_V_id_V_0_sel_wr;
wire    inStream_V_id_V_0_sel;
wire    inStream_V_id_V_0_load_A;
wire    inStream_V_id_V_0_load_B;
reg   [1:0] inStream_V_id_V_0_state;
wire    inStream_V_id_V_0_state_cmp_full;
reg   [5:0] inStream_V_dest_V_0_data_out;
wire    inStream_V_dest_V_0_vld_in;
wire    inStream_V_dest_V_0_vld_out;
wire    inStream_V_dest_V_0_ack_in;
reg    inStream_V_dest_V_0_ack_out;
reg   [5:0] inStream_V_dest_V_0_payload_A;
reg   [5:0] inStream_V_dest_V_0_payload_B;
reg    inStream_V_dest_V_0_sel_rd;
reg    inStream_V_dest_V_0_sel_wr;
wire    inStream_V_dest_V_0_sel;
wire    inStream_V_dest_V_0_load_A;
wire    inStream_V_dest_V_0_load_B;
reg   [1:0] inStream_V_dest_V_0_state;
wire    inStream_V_dest_V_0_state_cmp_full;
reg   [31:0] outStream_V_data_V_1_data_in;
reg   [31:0] outStream_V_data_V_1_data_out;
reg    outStream_V_data_V_1_vld_in;
wire    outStream_V_data_V_1_vld_out;
wire    outStream_V_data_V_1_ack_in;
wire    outStream_V_data_V_1_ack_out;
reg   [31:0] outStream_V_data_V_1_payload_A;
reg   [31:0] outStream_V_data_V_1_payload_B;
reg    outStream_V_data_V_1_sel_rd;
reg    outStream_V_data_V_1_sel_wr;
wire    outStream_V_data_V_1_sel;
wire    outStream_V_data_V_1_load_A;
wire    outStream_V_data_V_1_load_B;
reg   [1:0] outStream_V_data_V_1_state;
wire    outStream_V_data_V_1_state_cmp_full;
reg   [3:0] outStream_V_keep_V_1_data_in;
reg   [3:0] outStream_V_keep_V_1_data_out;
reg    outStream_V_keep_V_1_vld_in;
wire    outStream_V_keep_V_1_vld_out;
wire    outStream_V_keep_V_1_ack_in;
wire    outStream_V_keep_V_1_ack_out;
reg   [3:0] outStream_V_keep_V_1_payload_A;
reg   [3:0] outStream_V_keep_V_1_payload_B;
reg    outStream_V_keep_V_1_sel_rd;
reg    outStream_V_keep_V_1_sel_wr;
wire    outStream_V_keep_V_1_sel;
wire    outStream_V_keep_V_1_load_A;
wire    outStream_V_keep_V_1_load_B;
reg   [1:0] outStream_V_keep_V_1_state;
wire    outStream_V_keep_V_1_state_cmp_full;
reg   [3:0] outStream_V_strb_V_1_data_in;
reg   [3:0] outStream_V_strb_V_1_data_out;
reg    outStream_V_strb_V_1_vld_in;
wire    outStream_V_strb_V_1_vld_out;
wire    outStream_V_strb_V_1_ack_in;
wire    outStream_V_strb_V_1_ack_out;
reg   [3:0] outStream_V_strb_V_1_payload_A;
reg   [3:0] outStream_V_strb_V_1_payload_B;
reg    outStream_V_strb_V_1_sel_rd;
reg    outStream_V_strb_V_1_sel_wr;
wire    outStream_V_strb_V_1_sel;
wire    outStream_V_strb_V_1_load_A;
wire    outStream_V_strb_V_1_load_B;
reg   [1:0] outStream_V_strb_V_1_state;
wire    outStream_V_strb_V_1_state_cmp_full;
reg   [1:0] outStream_V_user_V_1_data_in;
reg   [1:0] outStream_V_user_V_1_data_out;
reg    outStream_V_user_V_1_vld_in;
wire    outStream_V_user_V_1_vld_out;
wire    outStream_V_user_V_1_ack_in;
wire    outStream_V_user_V_1_ack_out;
reg   [1:0] outStream_V_user_V_1_payload_A;
reg   [1:0] outStream_V_user_V_1_payload_B;
reg    outStream_V_user_V_1_sel_rd;
reg    outStream_V_user_V_1_sel_wr;
wire    outStream_V_user_V_1_sel;
wire    outStream_V_user_V_1_load_A;
wire    outStream_V_user_V_1_load_B;
reg   [1:0] outStream_V_user_V_1_state;
wire    outStream_V_user_V_1_state_cmp_full;
reg   [0:0] outStream_V_last_V_1_data_in;
reg   [0:0] outStream_V_last_V_1_data_out;
reg    outStream_V_last_V_1_vld_in;
wire    outStream_V_last_V_1_vld_out;
wire    outStream_V_last_V_1_ack_in;
wire    outStream_V_last_V_1_ack_out;
reg   [0:0] outStream_V_last_V_1_payload_A;
reg   [0:0] outStream_V_last_V_1_payload_B;
reg    outStream_V_last_V_1_sel_rd;
reg    outStream_V_last_V_1_sel_wr;
wire    outStream_V_last_V_1_sel;
wire    outStream_V_last_V_1_load_A;
wire    outStream_V_last_V_1_load_B;
reg   [1:0] outStream_V_last_V_1_state;
wire    outStream_V_last_V_1_state_cmp_full;
reg   [4:0] outStream_V_id_V_1_data_in;
reg   [4:0] outStream_V_id_V_1_data_out;
reg    outStream_V_id_V_1_vld_in;
wire    outStream_V_id_V_1_vld_out;
wire    outStream_V_id_V_1_ack_in;
wire    outStream_V_id_V_1_ack_out;
reg   [4:0] outStream_V_id_V_1_payload_A;
reg   [4:0] outStream_V_id_V_1_payload_B;
reg    outStream_V_id_V_1_sel_rd;
reg    outStream_V_id_V_1_sel_wr;
wire    outStream_V_id_V_1_sel;
wire    outStream_V_id_V_1_load_A;
wire    outStream_V_id_V_1_load_B;
reg   [1:0] outStream_V_id_V_1_state;
wire    outStream_V_id_V_1_state_cmp_full;
reg   [5:0] outStream_V_dest_V_1_data_in;
reg   [5:0] outStream_V_dest_V_1_data_out;
reg    outStream_V_dest_V_1_vld_in;
wire    outStream_V_dest_V_1_vld_out;
wire    outStream_V_dest_V_1_ack_in;
wire    outStream_V_dest_V_1_ack_out;
reg   [5:0] outStream_V_dest_V_1_payload_A;
reg   [5:0] outStream_V_dest_V_1_payload_B;
reg    outStream_V_dest_V_1_sel_rd;
reg    outStream_V_dest_V_1_sel_wr;
wire    outStream_V_dest_V_1_sel;
wire    outStream_V_dest_V_1_load_A;
wire    outStream_V_dest_V_1_load_B;
reg   [1:0] outStream_V_dest_V_1_state;
wire    outStream_V_dest_V_1_state_cmp_full;
wire   [31:0] size;
wire    flag;
reg   [8:0] Dset_address0;
reg    Dset_ce0;
reg    Dset_we0;
wire   [0:0] Dset_q0;
reg   [8:0] dist_address0;
reg    dist_ce0;
reg    dist_we0;
reg   [31:0] dist_d0;
wire   [31:0] dist_q0;
reg   [31:0] index;
reg   [31:0] distIndex;
reg   [8:0] graph_address0;
reg    graph_ce0;
reg    graph_we0;
wire   [31:0] graph_q0;
reg   [8:0] path_address0;
reg    path_ce0;
reg    path_we0;
reg   [31:0] path_d0;
wire   [31:0] path_q0;
wire    StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n;
reg    outStream_TDATA_blk_n;
wire    ap_CS_fsm_state27;
reg   [31:0] reg_406;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state25;
reg   [31:0] size_read_reg_528;
reg   [31:0] index_load_reg_540;
wire    ap_CS_fsm_state10;
wire    grp_updatePath_fu_343_ap_idle;
wire    grp_updatePath_fu_343_ap_ready;
wire    grp_updatePath_fu_343_ap_done;
reg   [31:0] distIndex_load_reg_545;
wire   [0:0] tmp_5_i_fu_418_p2;
reg   [0:0] tmp_5_i_reg_550;
wire   [30:0] v_fu_433_p2;
reg   [30:0] v_reg_558;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_i1_9_fu_439_p1;
reg   [63:0] tmp_i1_9_reg_563;
wire   [0:0] tmp_i1_fu_428_p2;
reg   [0:0] Dset_load_1_reg_575;
wire    ap_CS_fsm_state12;
reg   [31:0] graph_load_reg_584;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_2_i_fu_444_p2;
reg   [0:0] tmp_2_i_reg_590;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_3_i_fu_449_p2;
reg   [31:0] tmp_3_i_reg_594;
reg   [8:0] dist_addr_1_reg_600;
wire   [31:0] tempIndex_cast_fu_463_p1;
reg   [31:0] tempIndex_cast_reg_608;
wire    ap_CS_fsm_state24;
wire   [30:0] z_fu_472_p2;
reg   [30:0] z_reg_616;
wire   [0:0] tmp_i_fu_467_p2;
reg   [0:0] Dset_load_reg_631;
wire   [31:0] tempIndex_1_i_fu_511_p3;
wire    ap_CS_fsm_state26;
wire   [31:0] tempMin_1_i_fu_518_p3;
wire    grp_updateDset_fu_238_ap_start;
wire    grp_updateDset_fu_238_ap_done;
wire    grp_updateDset_fu_238_ap_idle;
wire    grp_updateDset_fu_238_ap_ready;
wire    grp_updateDset_fu_238_inStream_TVALID;
wire    grp_updateDset_fu_238_inStream_TREADY;
wire   [8:0] grp_updateDset_fu_238_Dset_address0;
wire    grp_updateDset_fu_238_Dset_ce0;
wire    grp_updateDset_fu_238_Dset_we0;
wire   [0:0] grp_updateDset_fu_238_Dset_d0;
wire    grp_sendDist_fu_259_ap_start;
wire    grp_sendDist_fu_259_ap_done;
wire    grp_sendDist_fu_259_ap_idle;
wire    grp_sendDist_fu_259_ap_ready;
wire   [31:0] grp_sendDist_fu_259_outStream_TDATA;
wire    grp_sendDist_fu_259_outStream_TVALID;
wire    grp_sendDist_fu_259_outStream_TREADY;
wire   [3:0] grp_sendDist_fu_259_outStream_TKEEP;
wire   [3:0] grp_sendDist_fu_259_outStream_TSTRB;
wire   [1:0] grp_sendDist_fu_259_outStream_TUSER;
wire   [0:0] grp_sendDist_fu_259_outStream_TLAST;
wire   [4:0] grp_sendDist_fu_259_outStream_TID;
wire   [5:0] grp_sendDist_fu_259_outStream_TDEST;
wire   [8:0] grp_sendDist_fu_259_dist_address0;
wire    grp_sendDist_fu_259_dist_ce0;
wire    grp_sendPath_fu_280_ap_start;
wire    grp_sendPath_fu_280_ap_done;
wire    grp_sendPath_fu_280_ap_idle;
wire    grp_sendPath_fu_280_ap_ready;
wire   [31:0] grp_sendPath_fu_280_outStream_TDATA;
wire    grp_sendPath_fu_280_outStream_TVALID;
wire    grp_sendPath_fu_280_outStream_TREADY;
wire   [3:0] grp_sendPath_fu_280_outStream_TKEEP;
wire   [3:0] grp_sendPath_fu_280_outStream_TSTRB;
wire   [1:0] grp_sendPath_fu_280_outStream_TUSER;
wire   [0:0] grp_sendPath_fu_280_outStream_TLAST;
wire   [4:0] grp_sendPath_fu_280_outStream_TID;
wire   [5:0] grp_sendPath_fu_280_outStream_TDEST;
wire   [8:0] grp_sendPath_fu_280_path_address0;
wire    grp_sendPath_fu_280_path_ce0;
wire    grp_updateDist_fu_301_ap_start;
wire    grp_updateDist_fu_301_ap_done;
wire    grp_updateDist_fu_301_ap_idle;
wire    grp_updateDist_fu_301_ap_ready;
wire    grp_updateDist_fu_301_inStream_TVALID;
wire    grp_updateDist_fu_301_inStream_TREADY;
wire   [8:0] grp_updateDist_fu_301_dist_address0;
wire    grp_updateDist_fu_301_dist_ce0;
wire    grp_updateDist_fu_301_dist_we0;
wire   [31:0] grp_updateDist_fu_301_dist_d0;
wire    grp_updateGraph_fu_322_ap_start;
wire    grp_updateGraph_fu_322_ap_done;
wire    grp_updateGraph_fu_322_ap_idle;
wire    grp_updateGraph_fu_322_ap_ready;
wire    grp_updateGraph_fu_322_inStream_TVALID;
wire    grp_updateGraph_fu_322_inStream_TREADY;
wire   [8:0] grp_updateGraph_fu_322_graph_address0;
wire    grp_updateGraph_fu_322_graph_ce0;
wire    grp_updateGraph_fu_322_graph_we0;
wire   [31:0] grp_updateGraph_fu_322_graph_d0;
wire    grp_updatePath_fu_343_ap_start;
wire    grp_updatePath_fu_343_inStream_TVALID;
wire    grp_updatePath_fu_343_inStream_TREADY;
wire   [8:0] grp_updatePath_fu_343_path_address0;
wire    grp_updatePath_fu_343_path_ce0;
wire    grp_updatePath_fu_343_path_we0;
wire   [31:0] grp_updatePath_fu_343_path_d0;
reg    StgValue_134_sendIndex_fu_364_ap_start;
wire    StgValue_134_sendIndex_fu_364_ap_done;
wire    StgValue_134_sendIndex_fu_364_ap_idle;
wire    StgValue_134_sendIndex_fu_364_ap_ready;
wire   [31:0] StgValue_134_sendIndex_fu_364_outStream_TDATA;
wire    StgValue_134_sendIndex_fu_364_outStream_TVALID;
wire    StgValue_134_sendIndex_fu_364_outStream_TREADY;
wire   [3:0] StgValue_134_sendIndex_fu_364_outStream_TKEEP;
wire   [3:0] StgValue_134_sendIndex_fu_364_outStream_TSTRB;
wire   [1:0] StgValue_134_sendIndex_fu_364_outStream_TUSER;
wire   [0:0] StgValue_134_sendIndex_fu_364_outStream_TLAST;
wire   [4:0] StgValue_134_sendIndex_fu_364_outStream_TID;
wire   [5:0] StgValue_134_sendIndex_fu_364_outStream_TDEST;
wire    grp_updateParameters_fu_384_ap_start;
wire    grp_updateParameters_fu_384_ap_done;
wire    grp_updateParameters_fu_384_ap_idle;
wire    grp_updateParameters_fu_384_ap_ready;
wire    grp_updateParameters_fu_384_inStream_TVALID;
wire    grp_updateParameters_fu_384_inStream_TREADY;
wire   [31:0] grp_updateParameters_fu_384_distIndex;
wire    grp_updateParameters_fu_384_distIndex_ap_vld;
wire   [31:0] grp_updateParameters_fu_384_index;
wire    grp_updateParameters_fu_384_index_ap_vld;
reg   [30:0] v_i_reg_192;
wire    ap_CS_fsm_state16;
reg   [31:0] tempIndex_i_reg_203;
reg   [31:0] tempMin_i_reg_215;
wire    ap_CS_fsm_state23;
reg   [30:0] tempIndex_reg_227;
reg    grp_updateDset_fu_238_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state21;
reg    grp_sendDist_fu_259_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_sendPath_fu_280_ap_start_reg;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
reg    grp_updateDist_fu_301_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state6;
reg    grp_updateGraph_fu_322_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_updatePath_fu_343_ap_start_reg;
wire    ap_CS_fsm_state9;
reg    grp_updateParameters_fu_384_ap_start_reg;
wire   [0:0] flag_read_read_fu_112_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] demorgan_fu_458_p2;
wire   [63:0] tmp_i_8_fu_478_p1;
wire   [31:0] v_i_cast_fu_424_p1;
wire   [0:0] slt_fu_453_p2;
wire   [0:0] tmp_6_i_fu_490_p2;
wire   [31:0] tempIndex_i_tempInd_fu_496_p3;
wire   [31:0] tempMin_i_tempMin_2_s_fu_503_p3;
wire    ap_CS_fsm_state28;
reg    ap_block_state28;
reg   [27:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 inStream_V_data_V_0_sel_rd = 1'b0;
#0 inStream_V_data_V_0_sel_wr = 1'b0;
#0 inStream_V_data_V_0_state = 2'd0;
#0 inStream_V_keep_V_0_sel_rd = 1'b0;
#0 inStream_V_keep_V_0_sel_wr = 1'b0;
#0 inStream_V_keep_V_0_state = 2'd0;
#0 inStream_V_strb_V_0_sel_rd = 1'b0;
#0 inStream_V_strb_V_0_sel_wr = 1'b0;
#0 inStream_V_strb_V_0_state = 2'd0;
#0 inStream_V_user_V_0_sel_rd = 1'b0;
#0 inStream_V_user_V_0_sel_wr = 1'b0;
#0 inStream_V_user_V_0_state = 2'd0;
#0 inStream_V_last_V_0_sel_rd = 1'b0;
#0 inStream_V_last_V_0_sel_wr = 1'b0;
#0 inStream_V_last_V_0_state = 2'd0;
#0 inStream_V_id_V_0_sel_rd = 1'b0;
#0 inStream_V_id_V_0_sel_wr = 1'b0;
#0 inStream_V_id_V_0_state = 2'd0;
#0 inStream_V_dest_V_0_sel_rd = 1'b0;
#0 inStream_V_dest_V_0_sel_wr = 1'b0;
#0 inStream_V_dest_V_0_state = 2'd0;
#0 outStream_V_data_V_1_sel_rd = 1'b0;
#0 outStream_V_data_V_1_sel_wr = 1'b0;
#0 outStream_V_data_V_1_state = 2'd0;
#0 outStream_V_keep_V_1_sel_rd = 1'b0;
#0 outStream_V_keep_V_1_sel_wr = 1'b0;
#0 outStream_V_keep_V_1_state = 2'd0;
#0 outStream_V_strb_V_1_sel_rd = 1'b0;
#0 outStream_V_strb_V_1_sel_wr = 1'b0;
#0 outStream_V_strb_V_1_state = 2'd0;
#0 outStream_V_user_V_1_sel_rd = 1'b0;
#0 outStream_V_user_V_1_sel_wr = 1'b0;
#0 outStream_V_user_V_1_state = 2'd0;
#0 outStream_V_last_V_1_sel_rd = 1'b0;
#0 outStream_V_last_V_1_sel_wr = 1'b0;
#0 outStream_V_last_V_1_state = 2'd0;
#0 outStream_V_id_V_1_sel_rd = 1'b0;
#0 outStream_V_id_V_1_sel_wr = 1'b0;
#0 outStream_V_id_V_1_state = 2'd0;
#0 outStream_V_dest_V_1_sel_rd = 1'b0;
#0 outStream_V_dest_V_1_sel_wr = 1'b0;
#0 outStream_V_dest_V_1_state = 2'd0;
#0 index = 32'd0;
#0 distIndex = 32'd0;
#0 grp_updateDset_fu_238_ap_start_reg = 1'b0;
#0 grp_sendDist_fu_259_ap_start_reg = 1'b0;
#0 grp_sendPath_fu_280_ap_start_reg = 1'b0;
#0 grp_updateDist_fu_301_ap_start_reg = 1'b0;
#0 grp_updateGraph_fu_322_ap_start_reg = 1'b0;
#0 grp_updatePath_fu_343_ap_start_reg = 1'b0;
#0 grp_updateParameters_fu_384_ap_start_reg = 1'b0;
end

dijkstra_Dset #(
    .DataWidth( 1 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
Dset_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Dset_address0),
    .ce0(Dset_ce0),
    .we0(Dset_we0),
    .d0(grp_updateDset_fu_238_Dset_d0),
    .q0(Dset_q0)
);

dijkstra_dist #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dist_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dist_address0),
    .ce0(dist_ce0),
    .we0(dist_we0),
    .d0(dist_d0),
    .q0(dist_q0)
);

dijkstra_dist #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
graph_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(graph_address0),
    .ce0(graph_ce0),
    .we0(graph_we0),
    .d0(grp_updateGraph_fu_322_graph_d0),
    .q0(graph_q0)
);

dijkstra_dist #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
path_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(path_address0),
    .ce0(path_ce0),
    .we0(path_we0),
    .d0(path_d0),
    .q0(path_q0)
);

dijkstra_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
dijkstra_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .size(size),
    .flag(flag)
);

updateDset grp_updateDset_fu_238(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_updateDset_fu_238_ap_start),
    .ap_done(grp_updateDset_fu_238_ap_done),
    .ap_idle(grp_updateDset_fu_238_ap_idle),
    .ap_ready(grp_updateDset_fu_238_ap_ready),
    .inStream_TDATA(inStream_V_data_V_0_data_out),
    .inStream_TVALID(grp_updateDset_fu_238_inStream_TVALID),
    .inStream_TREADY(grp_updateDset_fu_238_inStream_TREADY),
    .inStream_TKEEP(inStream_V_keep_V_0_data_out),
    .inStream_TSTRB(inStream_V_strb_V_0_data_out),
    .inStream_TUSER(inStream_V_user_V_0_data_out),
    .inStream_TLAST(inStream_V_last_V_0_data_out),
    .inStream_TID(inStream_V_id_V_0_data_out),
    .inStream_TDEST(inStream_V_dest_V_0_data_out),
    .size(size_read_reg_528),
    .Dset_address0(grp_updateDset_fu_238_Dset_address0),
    .Dset_ce0(grp_updateDset_fu_238_Dset_ce0),
    .Dset_we0(grp_updateDset_fu_238_Dset_we0),
    .Dset_d0(grp_updateDset_fu_238_Dset_d0)
);

sendDist grp_sendDist_fu_259(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sendDist_fu_259_ap_start),
    .ap_done(grp_sendDist_fu_259_ap_done),
    .ap_idle(grp_sendDist_fu_259_ap_idle),
    .ap_ready(grp_sendDist_fu_259_ap_ready),
    .outStream_TDATA(grp_sendDist_fu_259_outStream_TDATA),
    .outStream_TVALID(grp_sendDist_fu_259_outStream_TVALID),
    .outStream_TREADY(grp_sendDist_fu_259_outStream_TREADY),
    .outStream_TKEEP(grp_sendDist_fu_259_outStream_TKEEP),
    .outStream_TSTRB(grp_sendDist_fu_259_outStream_TSTRB),
    .outStream_TUSER(grp_sendDist_fu_259_outStream_TUSER),
    .outStream_TLAST(grp_sendDist_fu_259_outStream_TLAST),
    .outStream_TID(grp_sendDist_fu_259_outStream_TID),
    .outStream_TDEST(grp_sendDist_fu_259_outStream_TDEST),
    .size(size_read_reg_528),
    .dist_address0(grp_sendDist_fu_259_dist_address0),
    .dist_ce0(grp_sendDist_fu_259_dist_ce0),
    .dist_q0(dist_q0)
);

sendPath grp_sendPath_fu_280(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sendPath_fu_280_ap_start),
    .ap_done(grp_sendPath_fu_280_ap_done),
    .ap_idle(grp_sendPath_fu_280_ap_idle),
    .ap_ready(grp_sendPath_fu_280_ap_ready),
    .outStream_TDATA(grp_sendPath_fu_280_outStream_TDATA),
    .outStream_TVALID(grp_sendPath_fu_280_outStream_TVALID),
    .outStream_TREADY(grp_sendPath_fu_280_outStream_TREADY),
    .outStream_TKEEP(grp_sendPath_fu_280_outStream_TKEEP),
    .outStream_TSTRB(grp_sendPath_fu_280_outStream_TSTRB),
    .outStream_TUSER(grp_sendPath_fu_280_outStream_TUSER),
    .outStream_TLAST(grp_sendPath_fu_280_outStream_TLAST),
    .outStream_TID(grp_sendPath_fu_280_outStream_TID),
    .outStream_TDEST(grp_sendPath_fu_280_outStream_TDEST),
    .size(size_read_reg_528),
    .path_address0(grp_sendPath_fu_280_path_address0),
    .path_ce0(grp_sendPath_fu_280_path_ce0),
    .path_q0(path_q0)
);

updateDist grp_updateDist_fu_301(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_updateDist_fu_301_ap_start),
    .ap_done(grp_updateDist_fu_301_ap_done),
    .ap_idle(grp_updateDist_fu_301_ap_idle),
    .ap_ready(grp_updateDist_fu_301_ap_ready),
    .inStream_TDATA(inStream_V_data_V_0_data_out),
    .inStream_TVALID(grp_updateDist_fu_301_inStream_TVALID),
    .inStream_TREADY(grp_updateDist_fu_301_inStream_TREADY),
    .inStream_TKEEP(inStream_V_keep_V_0_data_out),
    .inStream_TSTRB(inStream_V_strb_V_0_data_out),
    .inStream_TUSER(inStream_V_user_V_0_data_out),
    .inStream_TLAST(inStream_V_last_V_0_data_out),
    .inStream_TID(inStream_V_id_V_0_data_out),
    .inStream_TDEST(inStream_V_dest_V_0_data_out),
    .size(size_read_reg_528),
    .dist_address0(grp_updateDist_fu_301_dist_address0),
    .dist_ce0(grp_updateDist_fu_301_dist_ce0),
    .dist_we0(grp_updateDist_fu_301_dist_we0),
    .dist_d0(grp_updateDist_fu_301_dist_d0)
);

updateGraph grp_updateGraph_fu_322(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_updateGraph_fu_322_ap_start),
    .ap_done(grp_updateGraph_fu_322_ap_done),
    .ap_idle(grp_updateGraph_fu_322_ap_idle),
    .ap_ready(grp_updateGraph_fu_322_ap_ready),
    .inStream_TDATA(inStream_V_data_V_0_data_out),
    .inStream_TVALID(grp_updateGraph_fu_322_inStream_TVALID),
    .inStream_TREADY(grp_updateGraph_fu_322_inStream_TREADY),
    .inStream_TKEEP(inStream_V_keep_V_0_data_out),
    .inStream_TSTRB(inStream_V_strb_V_0_data_out),
    .inStream_TUSER(inStream_V_user_V_0_data_out),
    .inStream_TLAST(inStream_V_last_V_0_data_out),
    .inStream_TID(inStream_V_id_V_0_data_out),
    .inStream_TDEST(inStream_V_dest_V_0_data_out),
    .size(size_read_reg_528),
    .graph_address0(grp_updateGraph_fu_322_graph_address0),
    .graph_ce0(grp_updateGraph_fu_322_graph_ce0),
    .graph_we0(grp_updateGraph_fu_322_graph_we0),
    .graph_d0(grp_updateGraph_fu_322_graph_d0)
);

updatePath grp_updatePath_fu_343(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_updatePath_fu_343_ap_start),
    .ap_done(grp_updatePath_fu_343_ap_done),
    .ap_idle(grp_updatePath_fu_343_ap_idle),
    .ap_ready(grp_updatePath_fu_343_ap_ready),
    .inStream_TDATA(inStream_V_data_V_0_data_out),
    .inStream_TVALID(grp_updatePath_fu_343_inStream_TVALID),
    .inStream_TREADY(grp_updatePath_fu_343_inStream_TREADY),
    .inStream_TKEEP(inStream_V_keep_V_0_data_out),
    .inStream_TSTRB(inStream_V_strb_V_0_data_out),
    .inStream_TUSER(inStream_V_user_V_0_data_out),
    .inStream_TLAST(inStream_V_last_V_0_data_out),
    .inStream_TID(inStream_V_id_V_0_data_out),
    .inStream_TDEST(inStream_V_dest_V_0_data_out),
    .size(size_read_reg_528),
    .path_address0(grp_updatePath_fu_343_path_address0),
    .path_ce0(grp_updatePath_fu_343_path_ce0),
    .path_we0(grp_updatePath_fu_343_path_we0),
    .path_d0(grp_updatePath_fu_343_path_d0)
);

sendIndex StgValue_134_sendIndex_fu_364(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(StgValue_134_sendIndex_fu_364_ap_start),
    .ap_done(StgValue_134_sendIndex_fu_364_ap_done),
    .ap_idle(StgValue_134_sendIndex_fu_364_ap_idle),
    .ap_ready(StgValue_134_sendIndex_fu_364_ap_ready),
    .outStream_TDATA(StgValue_134_sendIndex_fu_364_outStream_TDATA),
    .outStream_TVALID(StgValue_134_sendIndex_fu_364_outStream_TVALID),
    .outStream_TREADY(StgValue_134_sendIndex_fu_364_outStream_TREADY),
    .outStream_TKEEP(StgValue_134_sendIndex_fu_364_outStream_TKEEP),
    .outStream_TSTRB(StgValue_134_sendIndex_fu_364_outStream_TSTRB),
    .outStream_TUSER(StgValue_134_sendIndex_fu_364_outStream_TUSER),
    .outStream_TLAST(StgValue_134_sendIndex_fu_364_outStream_TLAST),
    .outStream_TID(StgValue_134_sendIndex_fu_364_outStream_TID),
    .outStream_TDEST(StgValue_134_sendIndex_fu_364_outStream_TDEST),
    .index(index),
    .outStream_TDATA_blk_n(StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n)
);

updateParameters grp_updateParameters_fu_384(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_updateParameters_fu_384_ap_start),
    .ap_done(grp_updateParameters_fu_384_ap_done),
    .ap_idle(grp_updateParameters_fu_384_ap_idle),
    .ap_ready(grp_updateParameters_fu_384_ap_ready),
    .inStream_TDATA(inStream_V_data_V_0_data_out),
    .inStream_TVALID(grp_updateParameters_fu_384_inStream_TVALID),
    .inStream_TREADY(grp_updateParameters_fu_384_inStream_TREADY),
    .inStream_TKEEP(inStream_V_keep_V_0_data_out),
    .inStream_TSTRB(inStream_V_strb_V_0_data_out),
    .inStream_TUSER(inStream_V_user_V_0_data_out),
    .inStream_TLAST(inStream_V_last_V_0_data_out),
    .inStream_TID(inStream_V_id_V_0_data_out),
    .inStream_TDEST(inStream_V_dest_V_0_data_out),
    .distIndex(grp_updateParameters_fu_384_distIndex),
    .distIndex_ap_vld(grp_updateParameters_fu_384_distIndex_ap_vld),
    .index(grp_updateParameters_fu_384_index),
    .index_ap_vld(grp_updateParameters_fu_384_index_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sendDist_fu_259_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_i1_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
            grp_sendDist_fu_259_ap_start_reg <= 1'b1;
        end else if ((grp_sendDist_fu_259_ap_ready == 1'b1)) begin
            grp_sendDist_fu_259_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sendPath_fu_280_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state18)) begin
            grp_sendPath_fu_280_ap_start_reg <= 1'b1;
        end else if ((grp_sendPath_fu_280_ap_ready == 1'b1)) begin
            grp_sendPath_fu_280_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updateDist_fu_301_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_updateDist_fu_301_ap_start_reg <= 1'b1;
        end else if ((grp_updateDist_fu_301_ap_ready == 1'b1)) begin
            grp_updateDist_fu_301_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updateDset_fu_238_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state3))) begin
            grp_updateDset_fu_238_ap_start_reg <= 1'b1;
        end else if ((grp_updateDset_fu_238_ap_ready == 1'b1)) begin
            grp_updateDset_fu_238_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updateGraph_fu_322_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_updateGraph_fu_322_ap_start_reg <= 1'b1;
        end else if ((grp_updateGraph_fu_322_ap_ready == 1'b1)) begin
            grp_updateGraph_fu_322_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updateParameters_fu_384_ap_start_reg <= 1'b0;
    end else begin
        if (((flag_read_read_fu_112_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_updateParameters_fu_384_ap_start_reg <= 1'b1;
        end else if ((grp_updateParameters_fu_384_ap_ready == 1'b1)) begin
            grp_updateParameters_fu_384_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_updatePath_fu_343_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_updatePath_fu_343_ap_start_reg <= 1'b1;
        end else if ((grp_updatePath_fu_343_ap_ready == 1'b1)) begin
            grp_updatePath_fu_343_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_out == 1'b1) & (inStream_V_data_V_0_vld_out == 1'b1))) begin
            inStream_V_data_V_0_sel_rd <= ~inStream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_data_V_0_ack_in == 1'b1) & (inStream_V_data_V_0_vld_in == 1'b1))) begin
            inStream_V_data_V_0_sel_wr <= ~inStream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd2;
        end else if ((((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b0)) | ((inStream_V_data_V_0_state == 2'd3) & (inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd1;
        end else if (((~((inStream_V_data_V_0_vld_in == 1'b0) & (inStream_V_data_V_0_ack_out == 1'b1)) & ~((inStream_V_data_V_0_ack_out == 1'b0) & (inStream_V_data_V_0_vld_in == 1'b1)) & (inStream_V_data_V_0_state == 2'd3)) | ((inStream_V_data_V_0_state == 2'd1) & (inStream_V_data_V_0_ack_out == 1'b1)) | ((inStream_V_data_V_0_state == 2'd2) & (inStream_V_data_V_0_vld_in == 1'b1)))) begin
            inStream_V_data_V_0_state <= 2'd3;
        end else begin
            inStream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_out == 1'b1) & (inStream_V_dest_V_0_vld_out == 1'b1))) begin
            inStream_V_dest_V_0_sel_rd <= ~inStream_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_dest_V_0_ack_in == 1'b1) & (inStream_V_dest_V_0_vld_in == 1'b1))) begin
            inStream_V_dest_V_0_sel_wr <= ~inStream_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd2;
        end else if ((((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b0)) | ((inStream_V_dest_V_0_state == 2'd3) & (inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd1;
        end else if (((~((inStream_V_dest_V_0_vld_in == 1'b0) & (inStream_V_dest_V_0_ack_out == 1'b1)) & ~((inStream_V_dest_V_0_ack_out == 1'b0) & (inStream_V_dest_V_0_vld_in == 1'b1)) & (inStream_V_dest_V_0_state == 2'd3)) | ((inStream_V_dest_V_0_state == 2'd1) & (inStream_V_dest_V_0_ack_out == 1'b1)) | ((inStream_V_dest_V_0_state == 2'd2) & (inStream_V_dest_V_0_vld_in == 1'b1)))) begin
            inStream_V_dest_V_0_state <= 2'd3;
        end else begin
            inStream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_out == 1'b1) & (inStream_V_id_V_0_vld_out == 1'b1))) begin
            inStream_V_id_V_0_sel_rd <= ~inStream_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_id_V_0_ack_in == 1'b1) & (inStream_V_id_V_0_vld_in == 1'b1))) begin
            inStream_V_id_V_0_sel_wr <= ~inStream_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd2;
        end else if ((((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b0)) | ((inStream_V_id_V_0_state == 2'd3) & (inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd1;
        end else if (((~((inStream_V_id_V_0_vld_in == 1'b0) & (inStream_V_id_V_0_ack_out == 1'b1)) & ~((inStream_V_id_V_0_ack_out == 1'b0) & (inStream_V_id_V_0_vld_in == 1'b1)) & (inStream_V_id_V_0_state == 2'd3)) | ((inStream_V_id_V_0_state == 2'd1) & (inStream_V_id_V_0_ack_out == 1'b1)) | ((inStream_V_id_V_0_state == 2'd2) & (inStream_V_id_V_0_vld_in == 1'b1)))) begin
            inStream_V_id_V_0_state <= 2'd3;
        end else begin
            inStream_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_out == 1'b1) & (inStream_V_keep_V_0_vld_out == 1'b1))) begin
            inStream_V_keep_V_0_sel_rd <= ~inStream_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_keep_V_0_ack_in == 1'b1) & (inStream_V_keep_V_0_vld_in == 1'b1))) begin
            inStream_V_keep_V_0_sel_wr <= ~inStream_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd2;
        end else if ((((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b0)) | ((inStream_V_keep_V_0_state == 2'd3) & (inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd1;
        end else if (((~((inStream_V_keep_V_0_vld_in == 1'b0) & (inStream_V_keep_V_0_ack_out == 1'b1)) & ~((inStream_V_keep_V_0_ack_out == 1'b0) & (inStream_V_keep_V_0_vld_in == 1'b1)) & (inStream_V_keep_V_0_state == 2'd3)) | ((inStream_V_keep_V_0_state == 2'd1) & (inStream_V_keep_V_0_ack_out == 1'b1)) | ((inStream_V_keep_V_0_state == 2'd2) & (inStream_V_keep_V_0_vld_in == 1'b1)))) begin
            inStream_V_keep_V_0_state <= 2'd3;
        end else begin
            inStream_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_out == 1'b1) & (inStream_V_last_V_0_vld_out == 1'b1))) begin
            inStream_V_last_V_0_sel_rd <= ~inStream_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_last_V_0_ack_in == 1'b1) & (inStream_V_last_V_0_vld_in == 1'b1))) begin
            inStream_V_last_V_0_sel_wr <= ~inStream_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd2;
        end else if ((((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b0)) | ((inStream_V_last_V_0_state == 2'd3) & (inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd1;
        end else if (((~((inStream_V_last_V_0_vld_in == 1'b0) & (inStream_V_last_V_0_ack_out == 1'b1)) & ~((inStream_V_last_V_0_ack_out == 1'b0) & (inStream_V_last_V_0_vld_in == 1'b1)) & (inStream_V_last_V_0_state == 2'd3)) | ((inStream_V_last_V_0_state == 2'd1) & (inStream_V_last_V_0_ack_out == 1'b1)) | ((inStream_V_last_V_0_state == 2'd2) & (inStream_V_last_V_0_vld_in == 1'b1)))) begin
            inStream_V_last_V_0_state <= 2'd3;
        end else begin
            inStream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_out == 1'b1) & (inStream_V_strb_V_0_vld_out == 1'b1))) begin
            inStream_V_strb_V_0_sel_rd <= ~inStream_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_strb_V_0_ack_in == 1'b1) & (inStream_V_strb_V_0_vld_in == 1'b1))) begin
            inStream_V_strb_V_0_sel_wr <= ~inStream_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd2;
        end else if ((((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b0)) | ((inStream_V_strb_V_0_state == 2'd3) & (inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd1;
        end else if (((~((inStream_V_strb_V_0_vld_in == 1'b0) & (inStream_V_strb_V_0_ack_out == 1'b1)) & ~((inStream_V_strb_V_0_ack_out == 1'b0) & (inStream_V_strb_V_0_vld_in == 1'b1)) & (inStream_V_strb_V_0_state == 2'd3)) | ((inStream_V_strb_V_0_state == 2'd1) & (inStream_V_strb_V_0_ack_out == 1'b1)) | ((inStream_V_strb_V_0_state == 2'd2) & (inStream_V_strb_V_0_vld_in == 1'b1)))) begin
            inStream_V_strb_V_0_state <= 2'd3;
        end else begin
            inStream_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_out == 1'b1) & (inStream_V_user_V_0_vld_out == 1'b1))) begin
            inStream_V_user_V_0_sel_rd <= ~inStream_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((inStream_V_user_V_0_ack_in == 1'b1) & (inStream_V_user_V_0_vld_in == 1'b1))) begin
            inStream_V_user_V_0_sel_wr <= ~inStream_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        inStream_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd2;
        end else if ((((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b0)) | ((inStream_V_user_V_0_state == 2'd3) & (inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd1;
        end else if (((~((inStream_V_user_V_0_vld_in == 1'b0) & (inStream_V_user_V_0_ack_out == 1'b1)) & ~((inStream_V_user_V_0_ack_out == 1'b0) & (inStream_V_user_V_0_vld_in == 1'b1)) & (inStream_V_user_V_0_state == 2'd3)) | ((inStream_V_user_V_0_state == 2'd1) & (inStream_V_user_V_0_ack_out == 1'b1)) | ((inStream_V_user_V_0_state == 2'd2) & (inStream_V_user_V_0_vld_in == 1'b1)))) begin
            inStream_V_user_V_0_state <= 2'd3;
        end else begin
            inStream_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_out == 1'b1) & (outStream_V_data_V_1_vld_out == 1'b1))) begin
            outStream_V_data_V_1_sel_rd <= ~outStream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_data_V_1_ack_in == 1'b1) & (outStream_V_data_V_1_vld_in == 1'b1))) begin
            outStream_V_data_V_1_sel_wr <= ~outStream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd2;
        end else if ((((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b0)) | ((outStream_V_data_V_1_state == 2'd3) & (outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd1;
        end else if (((~((outStream_V_data_V_1_vld_in == 1'b0) & (outStream_V_data_V_1_ack_out == 1'b1)) & ~((outStream_V_data_V_1_ack_out == 1'b0) & (outStream_V_data_V_1_vld_in == 1'b1)) & (outStream_V_data_V_1_state == 2'd3)) | ((outStream_V_data_V_1_state == 2'd1) & (outStream_V_data_V_1_ack_out == 1'b1)) | ((outStream_V_data_V_1_state == 2'd2) & (outStream_V_data_V_1_vld_in == 1'b1)))) begin
            outStream_V_data_V_1_state <= 2'd3;
        end else begin
            outStream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_out == 1'b1) & (outStream_V_dest_V_1_vld_out == 1'b1))) begin
            outStream_V_dest_V_1_sel_rd <= ~outStream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_dest_V_1_ack_in == 1'b1) & (outStream_V_dest_V_1_vld_in == 1'b1))) begin
            outStream_V_dest_V_1_sel_wr <= ~outStream_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd2;
        end else if ((((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b0)) | ((outStream_V_dest_V_1_state == 2'd3) & (outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outStream_V_dest_V_1_vld_in == 1'b0) & (outStream_V_dest_V_1_ack_out == 1'b1)) & ~((outStream_V_dest_V_1_ack_out == 1'b0) & (outStream_V_dest_V_1_vld_in == 1'b1)) & (outStream_V_dest_V_1_state == 2'd3)) | ((outStream_V_dest_V_1_state == 2'd1) & (outStream_V_dest_V_1_ack_out == 1'b1)) | ((outStream_V_dest_V_1_state == 2'd2) & (outStream_V_dest_V_1_vld_in == 1'b1)))) begin
            outStream_V_dest_V_1_state <= 2'd3;
        end else begin
            outStream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_out == 1'b1) & (outStream_V_id_V_1_vld_out == 1'b1))) begin
            outStream_V_id_V_1_sel_rd <= ~outStream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_id_V_1_ack_in == 1'b1) & (outStream_V_id_V_1_vld_in == 1'b1))) begin
            outStream_V_id_V_1_sel_wr <= ~outStream_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd2;
        end else if ((((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b0)) | ((outStream_V_id_V_1_state == 2'd3) & (outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd1;
        end else if (((~((outStream_V_id_V_1_vld_in == 1'b0) & (outStream_V_id_V_1_ack_out == 1'b1)) & ~((outStream_V_id_V_1_ack_out == 1'b0) & (outStream_V_id_V_1_vld_in == 1'b1)) & (outStream_V_id_V_1_state == 2'd3)) | ((outStream_V_id_V_1_state == 2'd1) & (outStream_V_id_V_1_ack_out == 1'b1)) | ((outStream_V_id_V_1_state == 2'd2) & (outStream_V_id_V_1_vld_in == 1'b1)))) begin
            outStream_V_id_V_1_state <= 2'd3;
        end else begin
            outStream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_out == 1'b1) & (outStream_V_keep_V_1_vld_out == 1'b1))) begin
            outStream_V_keep_V_1_sel_rd <= ~outStream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_keep_V_1_ack_in == 1'b1) & (outStream_V_keep_V_1_vld_in == 1'b1))) begin
            outStream_V_keep_V_1_sel_wr <= ~outStream_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd2;
        end else if ((((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b0)) | ((outStream_V_keep_V_1_state == 2'd3) & (outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outStream_V_keep_V_1_vld_in == 1'b0) & (outStream_V_keep_V_1_ack_out == 1'b1)) & ~((outStream_V_keep_V_1_ack_out == 1'b0) & (outStream_V_keep_V_1_vld_in == 1'b1)) & (outStream_V_keep_V_1_state == 2'd3)) | ((outStream_V_keep_V_1_state == 2'd1) & (outStream_V_keep_V_1_ack_out == 1'b1)) | ((outStream_V_keep_V_1_state == 2'd2) & (outStream_V_keep_V_1_vld_in == 1'b1)))) begin
            outStream_V_keep_V_1_state <= 2'd3;
        end else begin
            outStream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_out == 1'b1) & (outStream_V_last_V_1_vld_out == 1'b1))) begin
            outStream_V_last_V_1_sel_rd <= ~outStream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_last_V_1_ack_in == 1'b1) & (outStream_V_last_V_1_vld_in == 1'b1))) begin
            outStream_V_last_V_1_sel_wr <= ~outStream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd2;
        end else if ((((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b0)) | ((outStream_V_last_V_1_state == 2'd3) & (outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd1;
        end else if (((~((outStream_V_last_V_1_vld_in == 1'b0) & (outStream_V_last_V_1_ack_out == 1'b1)) & ~((outStream_V_last_V_1_ack_out == 1'b0) & (outStream_V_last_V_1_vld_in == 1'b1)) & (outStream_V_last_V_1_state == 2'd3)) | ((outStream_V_last_V_1_state == 2'd1) & (outStream_V_last_V_1_ack_out == 1'b1)) | ((outStream_V_last_V_1_state == 2'd2) & (outStream_V_last_V_1_vld_in == 1'b1)))) begin
            outStream_V_last_V_1_state <= 2'd3;
        end else begin
            outStream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_out == 1'b1) & (outStream_V_strb_V_1_vld_out == 1'b1))) begin
            outStream_V_strb_V_1_sel_rd <= ~outStream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_strb_V_1_ack_in == 1'b1) & (outStream_V_strb_V_1_vld_in == 1'b1))) begin
            outStream_V_strb_V_1_sel_wr <= ~outStream_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd2;
        end else if ((((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b0)) | ((outStream_V_strb_V_1_state == 2'd3) & (outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outStream_V_strb_V_1_vld_in == 1'b0) & (outStream_V_strb_V_1_ack_out == 1'b1)) & ~((outStream_V_strb_V_1_ack_out == 1'b0) & (outStream_V_strb_V_1_vld_in == 1'b1)) & (outStream_V_strb_V_1_state == 2'd3)) | ((outStream_V_strb_V_1_state == 2'd1) & (outStream_V_strb_V_1_ack_out == 1'b1)) | ((outStream_V_strb_V_1_state == 2'd2) & (outStream_V_strb_V_1_vld_in == 1'b1)))) begin
            outStream_V_strb_V_1_state <= 2'd3;
        end else begin
            outStream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_out == 1'b1) & (outStream_V_user_V_1_vld_out == 1'b1))) begin
            outStream_V_user_V_1_sel_rd <= ~outStream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outStream_V_user_V_1_ack_in == 1'b1) & (outStream_V_user_V_1_vld_in == 1'b1))) begin
            outStream_V_user_V_1_sel_wr <= ~outStream_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outStream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd2;
        end else if ((((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b0)) | ((outStream_V_user_V_1_state == 2'd3) & (outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd1;
        end else if (((~((outStream_V_user_V_1_vld_in == 1'b0) & (outStream_V_user_V_1_ack_out == 1'b1)) & ~((outStream_V_user_V_1_ack_out == 1'b0) & (outStream_V_user_V_1_vld_in == 1'b1)) & (outStream_V_user_V_1_state == 2'd3)) | ((outStream_V_user_V_1_state == 2'd1) & (outStream_V_user_V_1_ack_out == 1'b1)) | ((outStream_V_user_V_1_state == 2'd2) & (outStream_V_user_V_1_vld_in == 1'b1)))) begin
            outStream_V_user_V_1_state <= 2'd3;
        end else begin
            outStream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_fu_467_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
        index <= tempIndex_i_reg_203;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_updateParameters_fu_384_index_ap_vld == 1'b1))) begin
        index <= grp_updateParameters_fu_384_index;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tempIndex_reg_227 <= z_reg_616;
    end else if (((1'b1 == ap_CS_fsm_state23) & (grp_updateDist_fu_301_ap_done == 1'b1))) begin
        tempIndex_reg_227 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tempMin_i_reg_215 <= tempMin_1_i_fu_518_p3;
    end else if (((1'b1 == ap_CS_fsm_state23) & (grp_updateDist_fu_301_ap_done == 1'b1))) begin
        tempMin_i_reg_215 <= 32'd2147483647;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v_i_reg_192 <= v_reg_558;
    end else if (((grp_updatePath_fu_343_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        v_i_reg_192 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Dset_load_1_reg_575 <= Dset_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        Dset_load_reg_631 <= Dset_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (grp_updateParameters_fu_384_distIndex_ap_vld == 1'b1))) begin
        distIndex <= grp_updateParameters_fu_384_distIndex;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_updatePath_fu_343_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        distIndex_load_reg_545 <= distIndex;
        index_load_reg_540 <= index;
        tmp_5_i_reg_550 <= tmp_5_i_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_i_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        dist_addr_1_reg_600 <= tmp_i1_9_reg_563;
        tmp_3_i_reg_594 <= tmp_3_i_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        graph_load_reg_584 <= graph_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_A == 1'b1)) begin
        inStream_V_data_V_0_payload_A <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_data_V_0_load_B == 1'b1)) begin
        inStream_V_data_V_0_payload_B <= inStream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_A == 1'b1)) begin
        inStream_V_dest_V_0_payload_A <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_dest_V_0_load_B == 1'b1)) begin
        inStream_V_dest_V_0_payload_B <= inStream_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_A == 1'b1)) begin
        inStream_V_id_V_0_payload_A <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_id_V_0_load_B == 1'b1)) begin
        inStream_V_id_V_0_payload_B <= inStream_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_A == 1'b1)) begin
        inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_keep_V_0_load_B == 1'b1)) begin
        inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_A == 1'b1)) begin
        inStream_V_last_V_0_payload_A <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_last_V_0_load_B == 1'b1)) begin
        inStream_V_last_V_0_payload_B <= inStream_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_A == 1'b1)) begin
        inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_strb_V_0_load_B == 1'b1)) begin
        inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_A == 1'b1)) begin
        inStream_V_user_V_0_payload_A <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((inStream_V_user_V_0_load_B == 1'b1)) begin
        inStream_V_user_V_0_payload_B <= inStream_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_A == 1'b1)) begin
        outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_data_V_1_load_B == 1'b1)) begin
        outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_A == 1'b1)) begin
        outStream_V_dest_V_1_payload_A <= outStream_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_dest_V_1_load_B == 1'b1)) begin
        outStream_V_dest_V_1_payload_B <= outStream_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_A == 1'b1)) begin
        outStream_V_id_V_1_payload_A <= outStream_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_id_V_1_load_B == 1'b1)) begin
        outStream_V_id_V_1_payload_B <= outStream_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_A == 1'b1)) begin
        outStream_V_keep_V_1_payload_A <= outStream_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_keep_V_1_load_B == 1'b1)) begin
        outStream_V_keep_V_1_payload_B <= outStream_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_A == 1'b1)) begin
        outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_last_V_1_load_B == 1'b1)) begin
        outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_A == 1'b1)) begin
        outStream_V_strb_V_1_payload_A <= outStream_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_strb_V_1_load_B == 1'b1)) begin
        outStream_V_strb_V_1_payload_B <= outStream_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_A == 1'b1)) begin
        outStream_V_user_V_1_payload_A <= outStream_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((outStream_V_user_V_1_load_B == 1'b1)) begin
        outStream_V_user_V_1_payload_B <= outStream_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_406 <= dist_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read_reg_528 <= size;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tempIndex_cast_reg_608[30 : 0] <= tempIndex_cast_fu_463_p1[30 : 0];
        z_reg_616 <= z_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        tempIndex_i_reg_203 <= tempIndex_1_i_fu_511_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_2_i_reg_590 <= tmp_2_i_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i1_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_i1_9_reg_563[30 : 0] <= tmp_i1_9_fu_439_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v_reg_558 <= v_fu_433_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        Dset_address0 = tmp_i_8_fu_478_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Dset_address0 = tmp_i1_9_fu_439_p1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        Dset_address0 = grp_updateDset_fu_238_Dset_address0;
    end else begin
        Dset_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state24))) begin
        Dset_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        Dset_ce0 = grp_updateDset_fu_238_Dset_ce0;
    end else begin
        Dset_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        Dset_we0 = grp_updateDset_fu_238_Dset_we0;
    end else begin
        Dset_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        StgValue_134_sendIndex_fu_364_ap_start = 1'b1;
    end else begin
        StgValue_134_sendIndex_fu_364_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        dist_address0 = tmp_i_8_fu_478_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dist_address0 = dist_addr_1_reg_600;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dist_address0 = tmp_i1_9_reg_563;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        dist_address0 = grp_updateDist_fu_301_dist_address0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dist_address0 = grp_sendDist_fu_259_dist_address0;
    end else begin
        dist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state14))) begin
        dist_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        dist_ce0 = grp_updateDist_fu_301_dist_ce0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dist_ce0 = grp_sendDist_fu_259_dist_ce0;
    end else begin
        dist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        dist_d0 = tmp_3_i_reg_594;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        dist_d0 = grp_updateDist_fu_301_dist_d0;
    end else begin
        dist_d0 = 'bx;
    end
end

always @ (*) begin
    if (((demorgan_fu_458_p2 == 1'd1) & (1'd0 == Dset_load_1_reg_575) & (tmp_2_i_reg_590 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        dist_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        dist_we0 = grp_updateDist_fu_301_dist_we0;
    end else begin
        dist_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        graph_address0 = tmp_i1_9_reg_563;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        graph_address0 = grp_updateGraph_fu_322_graph_address0;
    end else begin
        graph_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        graph_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        graph_ce0 = grp_updateGraph_fu_322_graph_ce0;
    end else begin
        graph_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        graph_we0 = grp_updateGraph_fu_322_graph_we0;
    end else begin
        graph_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_data_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_data_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_data_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_data_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_data_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_data_V_0_sel == 1'b1)) begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B;
    end else begin
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_dest_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_dest_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_dest_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_dest_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_dest_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_dest_V_0_sel == 1'b1)) begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_B;
    end else begin
        inStream_V_dest_V_0_data_out = inStream_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_id_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_id_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_id_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_id_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_id_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_id_V_0_sel == 1'b1)) begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_B;
    end else begin
        inStream_V_id_V_0_data_out = inStream_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_keep_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_keep_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_keep_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_keep_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_keep_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_keep_V_0_sel == 1'b1)) begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_B;
    end else begin
        inStream_V_keep_V_0_data_out = inStream_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_last_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_last_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_last_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_last_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_last_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_last_V_0_sel == 1'b1)) begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_B;
    end else begin
        inStream_V_last_V_0_data_out = inStream_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_strb_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_strb_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_strb_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_strb_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_strb_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_strb_V_0_sel == 1'b1)) begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_B;
    end else begin
        inStream_V_strb_V_0_data_out = inStream_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inStream_V_user_V_0_ack_out = grp_updateParameters_fu_384_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        inStream_V_user_V_0_ack_out = grp_updatePath_fu_343_inStream_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        inStream_V_user_V_0_ack_out = grp_updateGraph_fu_322_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state23))) begin
        inStream_V_user_V_0_ack_out = grp_updateDist_fu_301_inStream_TREADY;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        inStream_V_user_V_0_ack_out = grp_updateDset_fu_238_inStream_TREADY;
    end else begin
        inStream_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_V_user_V_0_sel == 1'b1)) begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_B;
    end else begin
        inStream_V_user_V_0_data_out = inStream_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_TDATA_blk_n = StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n;
    end else begin
        outStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_data_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_data_V_1_data_in = grp_sendPath_fu_280_outStream_TDATA;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_data_V_1_data_in = grp_sendDist_fu_259_outStream_TDATA;
    end else begin
        outStream_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_data_V_1_sel == 1'b1)) begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B;
    end else begin
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_data_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_data_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_data_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_dest_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TDEST;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_dest_V_1_data_in = grp_sendPath_fu_280_outStream_TDEST;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_dest_V_1_data_in = grp_sendDist_fu_259_outStream_TDEST;
    end else begin
        outStream_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_dest_V_1_sel == 1'b1)) begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_B;
    end else begin
        outStream_V_dest_V_1_data_out = outStream_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_dest_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_dest_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_dest_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_id_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TID;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_id_V_1_data_in = grp_sendPath_fu_280_outStream_TID;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_id_V_1_data_in = grp_sendDist_fu_259_outStream_TID;
    end else begin
        outStream_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_id_V_1_sel == 1'b1)) begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_B;
    end else begin
        outStream_V_id_V_1_data_out = outStream_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_id_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_id_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_id_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_keep_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TKEEP;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_keep_V_1_data_in = grp_sendPath_fu_280_outStream_TKEEP;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_keep_V_1_data_in = grp_sendDist_fu_259_outStream_TKEEP;
    end else begin
        outStream_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_keep_V_1_sel == 1'b1)) begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_B;
    end else begin
        outStream_V_keep_V_1_data_out = outStream_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_keep_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_keep_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_keep_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_last_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TLAST;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_last_V_1_data_in = grp_sendPath_fu_280_outStream_TLAST;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_last_V_1_data_in = grp_sendDist_fu_259_outStream_TLAST;
    end else begin
        outStream_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_last_V_1_sel == 1'b1)) begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B;
    end else begin
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_last_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_last_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_last_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_strb_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TSTRB;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_strb_V_1_data_in = grp_sendPath_fu_280_outStream_TSTRB;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_strb_V_1_data_in = grp_sendDist_fu_259_outStream_TSTRB;
    end else begin
        outStream_V_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_strb_V_1_sel == 1'b1)) begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_B;
    end else begin
        outStream_V_strb_V_1_data_out = outStream_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_strb_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_strb_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_strb_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (1'b1 == StgValue_134_sendIndex_fu_364_outStream_TVALID))) begin
        outStream_V_user_V_1_data_in = StgValue_134_sendIndex_fu_364_outStream_TUSER;
    end else if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_outStream_TVALID == 1'b1))) begin
        outStream_V_user_V_1_data_in = grp_sendPath_fu_280_outStream_TUSER;
    end else if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_outStream_TVALID == 1'b1))) begin
        outStream_V_user_V_1_data_in = grp_sendDist_fu_259_outStream_TUSER;
    end else begin
        outStream_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((outStream_V_user_V_1_sel == 1'b1)) begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B;
    end else begin
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        outStream_V_user_V_1_vld_in = StgValue_134_sendIndex_fu_364_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        outStream_V_user_V_1_vld_in = grp_sendPath_fu_280_outStream_TVALID;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        outStream_V_user_V_1_vld_in = grp_sendDist_fu_259_outStream_TVALID;
    end else begin
        outStream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        path_address0 = tmp_i1_9_reg_563;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        path_address0 = grp_updatePath_fu_343_path_address0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        path_address0 = grp_sendPath_fu_280_path_address0;
    end else begin
        path_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        path_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        path_ce0 = grp_updatePath_fu_343_path_ce0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        path_ce0 = grp_sendPath_fu_280_path_ce0;
    end else begin
        path_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        path_d0 = index_load_reg_540;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        path_d0 = grp_updatePath_fu_343_path_d0;
    end else begin
        path_d0 = 'bx;
    end
end

always @ (*) begin
    if (((demorgan_fu_458_p2 == 1'd1) & (1'd0 == Dset_load_1_reg_575) & (tmp_2_i_reg_590 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        path_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        path_we0 = grp_updatePath_fu_343_path_we0;
    end else begin
        path_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((flag_read_read_fu_112_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((flag_read_read_fu_112_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_updateParameters_fu_384_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_updateDset_fu_238_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_updateDist_fu_301_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_updateGraph_fu_322_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((grp_updatePath_fu_343_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_i1_fu_428_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'd1 == Dset_q0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((tmp_2_i_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_sendDist_fu_259_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (grp_sendPath_fu_280_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (grp_updateDset_fu_238_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (grp_updateDist_fu_301_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((tmp_i_fu_467_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign StgValue_134_sendIndex_fu_364_outStream_TREADY = outStream_V_dest_V_1_state[1'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state28 = ((outStream_V_dest_V_1_ack_in == 1'b0) | (outStream_V_id_V_1_ack_in == 1'b0) | (outStream_V_last_V_1_ack_in == 1'b0) | (outStream_V_user_V_1_ack_in == 1'b0) | (outStream_V_strb_V_1_ack_in == 1'b0) | (outStream_V_keep_V_1_ack_in == 1'b0) | (outStream_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign demorgan_fu_458_p2 = (tmp_5_i_reg_550 & slt_fu_453_p2);

assign flag_read_read_fu_112_p2 = flag;

assign grp_sendDist_fu_259_ap_start = grp_sendDist_fu_259_ap_start_reg;

assign grp_sendDist_fu_259_outStream_TREADY = outStream_V_dest_V_1_state[1'd1];

assign grp_sendPath_fu_280_ap_start = grp_sendPath_fu_280_ap_start_reg;

assign grp_sendPath_fu_280_outStream_TREADY = outStream_V_dest_V_1_state[1'd1];

assign grp_updateDist_fu_301_ap_start = grp_updateDist_fu_301_ap_start_reg;

assign grp_updateDist_fu_301_inStream_TVALID = inStream_V_dest_V_0_state[1'd0];

assign grp_updateDset_fu_238_ap_start = grp_updateDset_fu_238_ap_start_reg;

assign grp_updateDset_fu_238_inStream_TVALID = inStream_V_dest_V_0_state[1'd0];

assign grp_updateGraph_fu_322_ap_start = grp_updateGraph_fu_322_ap_start_reg;

assign grp_updateGraph_fu_322_inStream_TVALID = inStream_V_dest_V_0_state[1'd0];

assign grp_updateParameters_fu_384_ap_start = grp_updateParameters_fu_384_ap_start_reg;

assign grp_updateParameters_fu_384_inStream_TVALID = inStream_V_dest_V_0_state[1'd0];

assign grp_updatePath_fu_343_ap_start = grp_updatePath_fu_343_ap_start_reg;

assign grp_updatePath_fu_343_inStream_TVALID = inStream_V_dest_V_0_state[1'd0];

assign inStream_TREADY = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state[1'd1];

assign inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full & ~inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_load_B = (inStream_V_data_V_0_state_cmp_full & inStream_V_data_V_0_sel_wr);

assign inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd;

assign inStream_V_data_V_0_state_cmp_full = ((inStream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_data_V_0_vld_in = inStream_TVALID;

assign inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state[1'd0];

assign inStream_V_dest_V_0_ack_in = inStream_V_dest_V_0_state[1'd1];

assign inStream_V_dest_V_0_load_A = (inStream_V_dest_V_0_state_cmp_full & ~inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_load_B = (inStream_V_dest_V_0_state_cmp_full & inStream_V_dest_V_0_sel_wr);

assign inStream_V_dest_V_0_sel = inStream_V_dest_V_0_sel_rd;

assign inStream_V_dest_V_0_state_cmp_full = ((inStream_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_dest_V_0_vld_in = inStream_TVALID;

assign inStream_V_dest_V_0_vld_out = inStream_V_dest_V_0_state[1'd0];

assign inStream_V_id_V_0_ack_in = inStream_V_id_V_0_state[1'd1];

assign inStream_V_id_V_0_load_A = (inStream_V_id_V_0_state_cmp_full & ~inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_load_B = (inStream_V_id_V_0_state_cmp_full & inStream_V_id_V_0_sel_wr);

assign inStream_V_id_V_0_sel = inStream_V_id_V_0_sel_rd;

assign inStream_V_id_V_0_state_cmp_full = ((inStream_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_id_V_0_vld_in = inStream_TVALID;

assign inStream_V_id_V_0_vld_out = inStream_V_id_V_0_state[1'd0];

assign inStream_V_keep_V_0_ack_in = inStream_V_keep_V_0_state[1'd1];

assign inStream_V_keep_V_0_load_A = (inStream_V_keep_V_0_state_cmp_full & ~inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_load_B = (inStream_V_keep_V_0_state_cmp_full & inStream_V_keep_V_0_sel_wr);

assign inStream_V_keep_V_0_sel = inStream_V_keep_V_0_sel_rd;

assign inStream_V_keep_V_0_state_cmp_full = ((inStream_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_keep_V_0_vld_in = inStream_TVALID;

assign inStream_V_keep_V_0_vld_out = inStream_V_keep_V_0_state[1'd0];

assign inStream_V_last_V_0_ack_in = inStream_V_last_V_0_state[1'd1];

assign inStream_V_last_V_0_load_A = (inStream_V_last_V_0_state_cmp_full & ~inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_load_B = (inStream_V_last_V_0_state_cmp_full & inStream_V_last_V_0_sel_wr);

assign inStream_V_last_V_0_sel = inStream_V_last_V_0_sel_rd;

assign inStream_V_last_V_0_state_cmp_full = ((inStream_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_last_V_0_vld_in = inStream_TVALID;

assign inStream_V_last_V_0_vld_out = inStream_V_last_V_0_state[1'd0];

assign inStream_V_strb_V_0_ack_in = inStream_V_strb_V_0_state[1'd1];

assign inStream_V_strb_V_0_load_A = (inStream_V_strb_V_0_state_cmp_full & ~inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_load_B = (inStream_V_strb_V_0_state_cmp_full & inStream_V_strb_V_0_sel_wr);

assign inStream_V_strb_V_0_sel = inStream_V_strb_V_0_sel_rd;

assign inStream_V_strb_V_0_state_cmp_full = ((inStream_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_strb_V_0_vld_in = inStream_TVALID;

assign inStream_V_strb_V_0_vld_out = inStream_V_strb_V_0_state[1'd0];

assign inStream_V_user_V_0_ack_in = inStream_V_user_V_0_state[1'd1];

assign inStream_V_user_V_0_load_A = (inStream_V_user_V_0_state_cmp_full & ~inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_load_B = (inStream_V_user_V_0_state_cmp_full & inStream_V_user_V_0_sel_wr);

assign inStream_V_user_V_0_sel = inStream_V_user_V_0_sel_rd;

assign inStream_V_user_V_0_state_cmp_full = ((inStream_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign inStream_V_user_V_0_vld_in = inStream_TVALID;

assign inStream_V_user_V_0_vld_out = inStream_V_user_V_0_state[1'd0];

assign outStream_TDATA = outStream_V_data_V_1_data_out;

assign outStream_TDEST = outStream_V_dest_V_1_data_out;

assign outStream_TID = outStream_V_id_V_1_data_out;

assign outStream_TKEEP = outStream_V_keep_V_1_data_out;

assign outStream_TLAST = outStream_V_last_V_1_data_out;

assign outStream_TSTRB = outStream_V_strb_V_1_data_out;

assign outStream_TUSER = outStream_V_user_V_1_data_out;

assign outStream_TVALID = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state[1'd1];

assign outStream_V_data_V_1_ack_out = outStream_TREADY;

assign outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full & ~outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_load_B = (outStream_V_data_V_1_state_cmp_full & outStream_V_data_V_1_sel_wr);

assign outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd;

assign outStream_V_data_V_1_state_cmp_full = ((outStream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state[1'd0];

assign outStream_V_dest_V_1_ack_in = outStream_V_dest_V_1_state[1'd1];

assign outStream_V_dest_V_1_ack_out = outStream_TREADY;

assign outStream_V_dest_V_1_load_A = (outStream_V_dest_V_1_state_cmp_full & ~outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_load_B = (outStream_V_dest_V_1_state_cmp_full & outStream_V_dest_V_1_sel_wr);

assign outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd;

assign outStream_V_dest_V_1_state_cmp_full = ((outStream_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state[1'd0];

assign outStream_V_id_V_1_ack_in = outStream_V_id_V_1_state[1'd1];

assign outStream_V_id_V_1_ack_out = outStream_TREADY;

assign outStream_V_id_V_1_load_A = (outStream_V_id_V_1_state_cmp_full & ~outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_load_B = (outStream_V_id_V_1_state_cmp_full & outStream_V_id_V_1_sel_wr);

assign outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd;

assign outStream_V_id_V_1_state_cmp_full = ((outStream_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state[1'd0];

assign outStream_V_keep_V_1_ack_in = outStream_V_keep_V_1_state[1'd1];

assign outStream_V_keep_V_1_ack_out = outStream_TREADY;

assign outStream_V_keep_V_1_load_A = (outStream_V_keep_V_1_state_cmp_full & ~outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_load_B = (outStream_V_keep_V_1_state_cmp_full & outStream_V_keep_V_1_sel_wr);

assign outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd;

assign outStream_V_keep_V_1_state_cmp_full = ((outStream_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state[1'd0];

assign outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state[1'd1];

assign outStream_V_last_V_1_ack_out = outStream_TREADY;

assign outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full & ~outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_load_B = (outStream_V_last_V_1_state_cmp_full & outStream_V_last_V_1_sel_wr);

assign outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd;

assign outStream_V_last_V_1_state_cmp_full = ((outStream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state[1'd0];

assign outStream_V_strb_V_1_ack_in = outStream_V_strb_V_1_state[1'd1];

assign outStream_V_strb_V_1_ack_out = outStream_TREADY;

assign outStream_V_strb_V_1_load_A = (outStream_V_strb_V_1_state_cmp_full & ~outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_load_B = (outStream_V_strb_V_1_state_cmp_full & outStream_V_strb_V_1_sel_wr);

assign outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd;

assign outStream_V_strb_V_1_state_cmp_full = ((outStream_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state[1'd0];

assign outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state[1'd1];

assign outStream_V_user_V_1_ack_out = outStream_TREADY;

assign outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full & ~outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_load_B = (outStream_V_user_V_1_state_cmp_full & outStream_V_user_V_1_sel_wr);

assign outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd;

assign outStream_V_user_V_1_state_cmp_full = ((outStream_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state[1'd0];

assign slt_fu_453_p2 = (($signed(tmp_3_i_reg_594) < $signed(reg_406)) ? 1'b1 : 1'b0);

assign tempIndex_1_i_fu_511_p3 = ((Dset_load_reg_631[0:0] === 1'b1) ? tempIndex_i_reg_203 : tempIndex_i_tempInd_fu_496_p3);

assign tempIndex_cast_fu_463_p1 = tempIndex_reg_227;

assign tempIndex_i_tempInd_fu_496_p3 = ((tmp_6_i_fu_490_p2[0:0] === 1'b1) ? tempIndex_i_reg_203 : tempIndex_cast_reg_608);

assign tempMin_1_i_fu_518_p3 = ((Dset_load_reg_631[0:0] === 1'b1) ? tempMin_i_reg_215 : tempMin_i_tempMin_2_s_fu_503_p3);

assign tempMin_i_tempMin_2_s_fu_503_p3 = ((tmp_6_i_fu_490_p2[0:0] === 1'b1) ? tempMin_i_reg_215 : reg_406);

assign tmp_2_i_fu_444_p2 = ((graph_load_reg_584 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_i_fu_449_p2 = (distIndex_load_reg_545 + graph_load_reg_584);

assign tmp_5_i_fu_418_p2 = ((distIndex != 32'd2147483647) ? 1'b1 : 1'b0);

assign tmp_6_i_fu_490_p2 = (($signed(reg_406) > $signed(tempMin_i_reg_215)) ? 1'b1 : 1'b0);

assign tmp_i1_9_fu_439_p1 = v_i_reg_192;

assign tmp_i1_fu_428_p2 = (($signed(v_i_cast_fu_424_p1) < $signed(size_read_reg_528)) ? 1'b1 : 1'b0);

assign tmp_i_8_fu_478_p1 = tempIndex_reg_227;

assign tmp_i_fu_467_p2 = (($signed(tempIndex_cast_fu_463_p1) < $signed(size_read_reg_528)) ? 1'b1 : 1'b0);

assign v_fu_433_p2 = (v_i_reg_192 + 31'd1);

assign v_i_cast_fu_424_p1 = v_i_reg_192;

assign z_fu_472_p2 = (tempIndex_reg_227 + 31'd1);

always @ (posedge ap_clk) begin
    tmp_i1_9_reg_563[63:31] <= 33'b000000000000000000000000000000000;
    tempIndex_cast_reg_608[31] <= 1'b0;
end

endmodule //dijkstra
