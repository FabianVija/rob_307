-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity updateDset is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    Dset_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    Dset_ce0 : OUT STD_LOGIC;
    Dset_we0 : OUT STD_LOGIC;
    Dset_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of updateDset is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_112_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_3_reg_141 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_s_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_91 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_103_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_91 <= i_3_reg_141;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_91 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_3_reg_141 <= i_3_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (tmp_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_146 <= tmp_s_fu_122_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_TVALID, ap_CS_fsm_state2, tmp_fu_107_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (tmp_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (tmp_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Dset_address0 <= tmp_1_fu_128_p1(9 - 1 downto 0);

    Dset_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Dset_ce0 <= ap_const_logic_1;
        else 
            Dset_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Dset_d0 <= tmp_s_reg_146;

    Dset_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Dset_we0 <= ap_const_logic_1;
        else 
            Dset_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(inStream_TVALID, tmp_fu_107_p2)
    begin
                ap_block_state2 <= ((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, inStream_TVALID, ap_CS_fsm_state2, tmp_fu_107_p2)
    begin
        if (((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (tmp_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(inStream_TVALID, ap_CS_fsm_state2, tmp_fu_107_p2)
    begin
        if ((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (tmp_fu_107_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_112_p2 <= std_logic_vector(unsigned(i_reg_91) + unsigned(ap_const_lv31_1));
    i_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_91),32));

    inStream_TDATA_blk_n_assign_proc : process(inStream_TVALID, ap_CS_fsm_state2, tmp_fu_107_p2)
    begin
        if (((tmp_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inStream_TDATA_blk_n <= inStream_TVALID;
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inStream_TREADY_assign_proc : process(inStream_TVALID, ap_CS_fsm_state2, tmp_fu_107_p2)
    begin
        if ((not(((tmp_fu_107_p2 = ap_const_lv1_1) and (inStream_TVALID = ap_const_logic_0))) and (tmp_fu_107_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            inStream_TREADY <= ap_const_logic_1;
        else 
            inStream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_91),64));
    tmp_fu_107_p2 <= "1" when (signed(i_cast_fu_103_p1) < signed(size)) else "0";
    tmp_s_fu_122_p2 <= "0" when (inStream_TDATA = ap_const_lv32_0) else "1";
end behav;
