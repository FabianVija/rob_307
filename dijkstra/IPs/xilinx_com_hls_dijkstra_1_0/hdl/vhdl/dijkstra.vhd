-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dijkstra is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dijkstra is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dijkstra,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=5016,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1211,HLS_SYN_LUT=2559,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_vld_in : STD_LOGIC;
    signal inStream_V_last_V_0_vld_out : STD_LOGIC;
    signal inStream_V_last_V_0_ack_in : STD_LOGIC;
    signal inStream_V_last_V_0_ack_out : STD_LOGIC;
    signal inStream_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_last_V_0_sel : STD_LOGIC;
    signal inStream_V_last_V_0_load_A : STD_LOGIC;
    signal inStream_V_last_V_0_load_B : STD_LOGIC;
    signal inStream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_in : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_in : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_in : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_in : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_in : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal flag : STD_LOGIC;
    signal Dset_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Dset_ce0 : STD_LOGIC;
    signal Dset_we0 : STD_LOGIC;
    signal Dset_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dist_ce0 : STD_LOGIC;
    signal dist_we0 : STD_LOGIC;
    signal dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal distIndex : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal graph_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal graph_ce0 : STD_LOGIC;
    signal graph_we0 : STD_LOGIC;
    signal graph_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal path_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal path_ce0 : STD_LOGIC;
    signal path_we0 : STD_LOGIC;
    signal path_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal path_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n : STD_LOGIC;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal size_read_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_load_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_updatePath_fu_343_ap_idle : STD_LOGIC;
    signal grp_updatePath_fu_343_ap_ready : STD_LOGIC;
    signal grp_updatePath_fu_343_ap_done : STD_LOGIC;
    signal distIndex_load_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal v_fu_433_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal v_reg_558 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_i1_9_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_9_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Dset_load_1_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal graph_load_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_2_i_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_reg_590 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_3_i_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal dist_addr_1_reg_600 : STD_LOGIC_VECTOR (8 downto 0);
    signal tempIndex_cast_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempIndex_cast_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal z_fu_472_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal z_reg_616 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_i_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Dset_load_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempIndex_1_i_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tempMin_1_i_fu_518_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateDset_fu_238_ap_start : STD_LOGIC;
    signal grp_updateDset_fu_238_ap_done : STD_LOGIC;
    signal grp_updateDset_fu_238_ap_idle : STD_LOGIC;
    signal grp_updateDset_fu_238_ap_ready : STD_LOGIC;
    signal grp_updateDset_fu_238_inStream_TVALID : STD_LOGIC;
    signal grp_updateDset_fu_238_inStream_TREADY : STD_LOGIC;
    signal grp_updateDset_fu_238_Dset_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateDset_fu_238_Dset_ce0 : STD_LOGIC;
    signal grp_updateDset_fu_238_Dset_we0 : STD_LOGIC;
    signal grp_updateDset_fu_238_Dset_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sendDist_fu_259_ap_start : STD_LOGIC;
    signal grp_sendDist_fu_259_ap_done : STD_LOGIC;
    signal grp_sendDist_fu_259_ap_idle : STD_LOGIC;
    signal grp_sendDist_fu_259_ap_ready : STD_LOGIC;
    signal grp_sendDist_fu_259_outStream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sendDist_fu_259_outStream_TVALID : STD_LOGIC;
    signal grp_sendDist_fu_259_outStream_TREADY : STD_LOGIC;
    signal grp_sendDist_fu_259_outStream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sendDist_fu_259_outStream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sendDist_fu_259_outStream_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sendDist_fu_259_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sendDist_fu_259_outStream_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sendDist_fu_259_outStream_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sendDist_fu_259_dist_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sendDist_fu_259_dist_ce0 : STD_LOGIC;
    signal grp_sendPath_fu_280_ap_start : STD_LOGIC;
    signal grp_sendPath_fu_280_ap_done : STD_LOGIC;
    signal grp_sendPath_fu_280_ap_idle : STD_LOGIC;
    signal grp_sendPath_fu_280_ap_ready : STD_LOGIC;
    signal grp_sendPath_fu_280_outStream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sendPath_fu_280_outStream_TVALID : STD_LOGIC;
    signal grp_sendPath_fu_280_outStream_TREADY : STD_LOGIC;
    signal grp_sendPath_fu_280_outStream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sendPath_fu_280_outStream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sendPath_fu_280_outStream_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_sendPath_fu_280_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sendPath_fu_280_outStream_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_sendPath_fu_280_outStream_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sendPath_fu_280_path_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_sendPath_fu_280_path_ce0 : STD_LOGIC;
    signal grp_updateDist_fu_301_ap_start : STD_LOGIC;
    signal grp_updateDist_fu_301_ap_done : STD_LOGIC;
    signal grp_updateDist_fu_301_ap_idle : STD_LOGIC;
    signal grp_updateDist_fu_301_ap_ready : STD_LOGIC;
    signal grp_updateDist_fu_301_inStream_TVALID : STD_LOGIC;
    signal grp_updateDist_fu_301_inStream_TREADY : STD_LOGIC;
    signal grp_updateDist_fu_301_dist_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateDist_fu_301_dist_ce0 : STD_LOGIC;
    signal grp_updateDist_fu_301_dist_we0 : STD_LOGIC;
    signal grp_updateDist_fu_301_dist_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateGraph_fu_322_ap_start : STD_LOGIC;
    signal grp_updateGraph_fu_322_ap_done : STD_LOGIC;
    signal grp_updateGraph_fu_322_ap_idle : STD_LOGIC;
    signal grp_updateGraph_fu_322_ap_ready : STD_LOGIC;
    signal grp_updateGraph_fu_322_inStream_TVALID : STD_LOGIC;
    signal grp_updateGraph_fu_322_inStream_TREADY : STD_LOGIC;
    signal grp_updateGraph_fu_322_graph_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updateGraph_fu_322_graph_ce0 : STD_LOGIC;
    signal grp_updateGraph_fu_322_graph_we0 : STD_LOGIC;
    signal grp_updateGraph_fu_322_graph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updatePath_fu_343_ap_start : STD_LOGIC;
    signal grp_updatePath_fu_343_inStream_TVALID : STD_LOGIC;
    signal grp_updatePath_fu_343_inStream_TREADY : STD_LOGIC;
    signal grp_updatePath_fu_343_path_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_updatePath_fu_343_path_ce0 : STD_LOGIC;
    signal grp_updatePath_fu_343_path_we0 : STD_LOGIC;
    signal grp_updatePath_fu_343_path_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_134_sendIndex_fu_364_ap_start : STD_LOGIC;
    signal StgValue_134_sendIndex_fu_364_ap_done : STD_LOGIC;
    signal StgValue_134_sendIndex_fu_364_ap_idle : STD_LOGIC;
    signal StgValue_134_sendIndex_fu_364_ap_ready : STD_LOGIC;
    signal StgValue_134_sendIndex_fu_364_outStream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TVALID : STD_LOGIC;
    signal StgValue_134_sendIndex_fu_364_outStream_TREADY : STD_LOGIC;
    signal StgValue_134_sendIndex_fu_364_outStream_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TUSER : STD_LOGIC_VECTOR (1 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TID : STD_LOGIC_VECTOR (4 downto 0);
    signal StgValue_134_sendIndex_fu_364_outStream_TDEST : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_updateParameters_fu_384_ap_start : STD_LOGIC;
    signal grp_updateParameters_fu_384_ap_done : STD_LOGIC;
    signal grp_updateParameters_fu_384_ap_idle : STD_LOGIC;
    signal grp_updateParameters_fu_384_ap_ready : STD_LOGIC;
    signal grp_updateParameters_fu_384_inStream_TVALID : STD_LOGIC;
    signal grp_updateParameters_fu_384_inStream_TREADY : STD_LOGIC;
    signal grp_updateParameters_fu_384_distIndex : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameters_fu_384_distIndex_ap_vld : STD_LOGIC;
    signal grp_updateParameters_fu_384_index : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_updateParameters_fu_384_index_ap_vld : STD_LOGIC;
    signal v_i_reg_192 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tempIndex_i_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMin_i_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tempIndex_reg_227 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_updateDset_fu_238_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_sendDist_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_sendPath_fu_280_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_updateDist_fu_301_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_updateGraph_fu_322_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_updatePath_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_updateParameters_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal flag_read_read_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal demorgan_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_8_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_i_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tempIndex_i_tempInd_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tempMin_i_tempMin_2_s_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_state28 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);

    component updateDset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        Dset_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        Dset_ce0 : OUT STD_LOGIC;
        Dset_we0 : OUT STD_LOGIC;
        Dset_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sendDist IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        dist_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        dist_ce0 : OUT STD_LOGIC;
        dist_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sendPath IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        path_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        path_ce0 : OUT STD_LOGIC;
        path_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component updateDist IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        dist_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        dist_ce0 : OUT STD_LOGIC;
        dist_we0 : OUT STD_LOGIC;
        dist_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component updateGraph IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        graph_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        graph_ce0 : OUT STD_LOGIC;
        graph_we0 : OUT STD_LOGIC;
        graph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component updatePath IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        path_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        path_ce0 : OUT STD_LOGIC;
        path_we0 : OUT STD_LOGIC;
        path_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sendIndex IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
        outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
        index : IN STD_LOGIC_VECTOR (31 downto 0);
        outStream_TDATA_blk_n : OUT STD_LOGIC );
    end component;


    component updateParameters IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
        inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
        distIndex : OUT STD_LOGIC_VECTOR (31 downto 0);
        distIndex_ap_vld : OUT STD_LOGIC;
        index : OUT STD_LOGIC_VECTOR (31 downto 0);
        index_ap_vld : OUT STD_LOGIC );
    end component;


    component dijkstra_Dset IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dijkstra_dist IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dijkstra_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        flag : OUT STD_LOGIC );
    end component;



begin
    Dset_U : component dijkstra_Dset
    generic map (
        DataWidth => 1,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Dset_address0,
        ce0 => Dset_ce0,
        we0 => Dset_we0,
        d0 => grp_updateDset_fu_238_Dset_d0,
        q0 => Dset_q0);

    dist_U : component dijkstra_dist
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dist_address0,
        ce0 => dist_ce0,
        we0 => dist_we0,
        d0 => dist_d0,
        q0 => dist_q0);

    graph_U : component dijkstra_dist
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => graph_address0,
        ce0 => graph_ce0,
        we0 => graph_we0,
        d0 => grp_updateGraph_fu_322_graph_d0,
        q0 => graph_q0);

    path_U : component dijkstra_dist
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => path_address0,
        ce0 => path_ce0,
        we0 => path_we0,
        d0 => path_d0,
        q0 => path_q0);

    dijkstra_CTRL_BUS_s_axi_U : component dijkstra_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        size => size,
        flag => flag);

    grp_updateDset_fu_238 : component updateDset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_updateDset_fu_238_ap_start,
        ap_done => grp_updateDset_fu_238_ap_done,
        ap_idle => grp_updateDset_fu_238_ap_idle,
        ap_ready => grp_updateDset_fu_238_ap_ready,
        inStream_TDATA => inStream_V_data_V_0_data_out,
        inStream_TVALID => grp_updateDset_fu_238_inStream_TVALID,
        inStream_TREADY => grp_updateDset_fu_238_inStream_TREADY,
        inStream_TKEEP => inStream_V_keep_V_0_data_out,
        inStream_TSTRB => inStream_V_strb_V_0_data_out,
        inStream_TUSER => inStream_V_user_V_0_data_out,
        inStream_TLAST => inStream_V_last_V_0_data_out,
        inStream_TID => inStream_V_id_V_0_data_out,
        inStream_TDEST => inStream_V_dest_V_0_data_out,
        size => size_read_reg_528,
        Dset_address0 => grp_updateDset_fu_238_Dset_address0,
        Dset_ce0 => grp_updateDset_fu_238_Dset_ce0,
        Dset_we0 => grp_updateDset_fu_238_Dset_we0,
        Dset_d0 => grp_updateDset_fu_238_Dset_d0);

    grp_sendDist_fu_259 : component sendDist
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sendDist_fu_259_ap_start,
        ap_done => grp_sendDist_fu_259_ap_done,
        ap_idle => grp_sendDist_fu_259_ap_idle,
        ap_ready => grp_sendDist_fu_259_ap_ready,
        outStream_TDATA => grp_sendDist_fu_259_outStream_TDATA,
        outStream_TVALID => grp_sendDist_fu_259_outStream_TVALID,
        outStream_TREADY => grp_sendDist_fu_259_outStream_TREADY,
        outStream_TKEEP => grp_sendDist_fu_259_outStream_TKEEP,
        outStream_TSTRB => grp_sendDist_fu_259_outStream_TSTRB,
        outStream_TUSER => grp_sendDist_fu_259_outStream_TUSER,
        outStream_TLAST => grp_sendDist_fu_259_outStream_TLAST,
        outStream_TID => grp_sendDist_fu_259_outStream_TID,
        outStream_TDEST => grp_sendDist_fu_259_outStream_TDEST,
        size => size_read_reg_528,
        dist_address0 => grp_sendDist_fu_259_dist_address0,
        dist_ce0 => grp_sendDist_fu_259_dist_ce0,
        dist_q0 => dist_q0);

    grp_sendPath_fu_280 : component sendPath
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sendPath_fu_280_ap_start,
        ap_done => grp_sendPath_fu_280_ap_done,
        ap_idle => grp_sendPath_fu_280_ap_idle,
        ap_ready => grp_sendPath_fu_280_ap_ready,
        outStream_TDATA => grp_sendPath_fu_280_outStream_TDATA,
        outStream_TVALID => grp_sendPath_fu_280_outStream_TVALID,
        outStream_TREADY => grp_sendPath_fu_280_outStream_TREADY,
        outStream_TKEEP => grp_sendPath_fu_280_outStream_TKEEP,
        outStream_TSTRB => grp_sendPath_fu_280_outStream_TSTRB,
        outStream_TUSER => grp_sendPath_fu_280_outStream_TUSER,
        outStream_TLAST => grp_sendPath_fu_280_outStream_TLAST,
        outStream_TID => grp_sendPath_fu_280_outStream_TID,
        outStream_TDEST => grp_sendPath_fu_280_outStream_TDEST,
        size => size_read_reg_528,
        path_address0 => grp_sendPath_fu_280_path_address0,
        path_ce0 => grp_sendPath_fu_280_path_ce0,
        path_q0 => path_q0);

    grp_updateDist_fu_301 : component updateDist
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_updateDist_fu_301_ap_start,
        ap_done => grp_updateDist_fu_301_ap_done,
        ap_idle => grp_updateDist_fu_301_ap_idle,
        ap_ready => grp_updateDist_fu_301_ap_ready,
        inStream_TDATA => inStream_V_data_V_0_data_out,
        inStream_TVALID => grp_updateDist_fu_301_inStream_TVALID,
        inStream_TREADY => grp_updateDist_fu_301_inStream_TREADY,
        inStream_TKEEP => inStream_V_keep_V_0_data_out,
        inStream_TSTRB => inStream_V_strb_V_0_data_out,
        inStream_TUSER => inStream_V_user_V_0_data_out,
        inStream_TLAST => inStream_V_last_V_0_data_out,
        inStream_TID => inStream_V_id_V_0_data_out,
        inStream_TDEST => inStream_V_dest_V_0_data_out,
        size => size_read_reg_528,
        dist_address0 => grp_updateDist_fu_301_dist_address0,
        dist_ce0 => grp_updateDist_fu_301_dist_ce0,
        dist_we0 => grp_updateDist_fu_301_dist_we0,
        dist_d0 => grp_updateDist_fu_301_dist_d0);

    grp_updateGraph_fu_322 : component updateGraph
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_updateGraph_fu_322_ap_start,
        ap_done => grp_updateGraph_fu_322_ap_done,
        ap_idle => grp_updateGraph_fu_322_ap_idle,
        ap_ready => grp_updateGraph_fu_322_ap_ready,
        inStream_TDATA => inStream_V_data_V_0_data_out,
        inStream_TVALID => grp_updateGraph_fu_322_inStream_TVALID,
        inStream_TREADY => grp_updateGraph_fu_322_inStream_TREADY,
        inStream_TKEEP => inStream_V_keep_V_0_data_out,
        inStream_TSTRB => inStream_V_strb_V_0_data_out,
        inStream_TUSER => inStream_V_user_V_0_data_out,
        inStream_TLAST => inStream_V_last_V_0_data_out,
        inStream_TID => inStream_V_id_V_0_data_out,
        inStream_TDEST => inStream_V_dest_V_0_data_out,
        size => size_read_reg_528,
        graph_address0 => grp_updateGraph_fu_322_graph_address0,
        graph_ce0 => grp_updateGraph_fu_322_graph_ce0,
        graph_we0 => grp_updateGraph_fu_322_graph_we0,
        graph_d0 => grp_updateGraph_fu_322_graph_d0);

    grp_updatePath_fu_343 : component updatePath
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_updatePath_fu_343_ap_start,
        ap_done => grp_updatePath_fu_343_ap_done,
        ap_idle => grp_updatePath_fu_343_ap_idle,
        ap_ready => grp_updatePath_fu_343_ap_ready,
        inStream_TDATA => inStream_V_data_V_0_data_out,
        inStream_TVALID => grp_updatePath_fu_343_inStream_TVALID,
        inStream_TREADY => grp_updatePath_fu_343_inStream_TREADY,
        inStream_TKEEP => inStream_V_keep_V_0_data_out,
        inStream_TSTRB => inStream_V_strb_V_0_data_out,
        inStream_TUSER => inStream_V_user_V_0_data_out,
        inStream_TLAST => inStream_V_last_V_0_data_out,
        inStream_TID => inStream_V_id_V_0_data_out,
        inStream_TDEST => inStream_V_dest_V_0_data_out,
        size => size_read_reg_528,
        path_address0 => grp_updatePath_fu_343_path_address0,
        path_ce0 => grp_updatePath_fu_343_path_ce0,
        path_we0 => grp_updatePath_fu_343_path_we0,
        path_d0 => grp_updatePath_fu_343_path_d0);

    StgValue_134_sendIndex_fu_364 : component sendIndex
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => StgValue_134_sendIndex_fu_364_ap_start,
        ap_done => StgValue_134_sendIndex_fu_364_ap_done,
        ap_idle => StgValue_134_sendIndex_fu_364_ap_idle,
        ap_ready => StgValue_134_sendIndex_fu_364_ap_ready,
        outStream_TDATA => StgValue_134_sendIndex_fu_364_outStream_TDATA,
        outStream_TVALID => StgValue_134_sendIndex_fu_364_outStream_TVALID,
        outStream_TREADY => StgValue_134_sendIndex_fu_364_outStream_TREADY,
        outStream_TKEEP => StgValue_134_sendIndex_fu_364_outStream_TKEEP,
        outStream_TSTRB => StgValue_134_sendIndex_fu_364_outStream_TSTRB,
        outStream_TUSER => StgValue_134_sendIndex_fu_364_outStream_TUSER,
        outStream_TLAST => StgValue_134_sendIndex_fu_364_outStream_TLAST,
        outStream_TID => StgValue_134_sendIndex_fu_364_outStream_TID,
        outStream_TDEST => StgValue_134_sendIndex_fu_364_outStream_TDEST,
        index => index,
        outStream_TDATA_blk_n => StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n);

    grp_updateParameters_fu_384 : component updateParameters
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_updateParameters_fu_384_ap_start,
        ap_done => grp_updateParameters_fu_384_ap_done,
        ap_idle => grp_updateParameters_fu_384_ap_idle,
        ap_ready => grp_updateParameters_fu_384_ap_ready,
        inStream_TDATA => inStream_V_data_V_0_data_out,
        inStream_TVALID => grp_updateParameters_fu_384_inStream_TVALID,
        inStream_TREADY => grp_updateParameters_fu_384_inStream_TREADY,
        inStream_TKEEP => inStream_V_keep_V_0_data_out,
        inStream_TSTRB => inStream_V_strb_V_0_data_out,
        inStream_TUSER => inStream_V_user_V_0_data_out,
        inStream_TLAST => inStream_V_last_V_0_data_out,
        inStream_TID => inStream_V_id_V_0_data_out,
        inStream_TDEST => inStream_V_dest_V_0_data_out,
        distIndex => grp_updateParameters_fu_384_distIndex,
        distIndex_ap_vld => grp_updateParameters_fu_384_distIndex_ap_vld,
        index => grp_updateParameters_fu_384_index,
        index_ap_vld => grp_updateParameters_fu_384_index_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sendDist_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sendDist_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_i1_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_sendDist_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sendDist_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_sendDist_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sendPath_fu_280_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sendPath_fu_280_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    grp_sendPath_fu_280_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sendPath_fu_280_ap_ready = ap_const_logic_1)) then 
                    grp_sendPath_fu_280_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateDist_fu_301_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updateDist_fu_301_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_updateDist_fu_301_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateDist_fu_301_ap_ready = ap_const_logic_1)) then 
                    grp_updateDist_fu_301_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateDset_fu_238_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updateDset_fu_238_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_updateDset_fu_238_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateDset_fu_238_ap_ready = ap_const_logic_1)) then 
                    grp_updateDset_fu_238_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateGraph_fu_322_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updateGraph_fu_322_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_updateGraph_fu_322_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateGraph_fu_322_ap_ready = ap_const_logic_1)) then 
                    grp_updateGraph_fu_322_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateParameters_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updateParameters_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((flag_read_read_fu_112_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_updateParameters_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateParameters_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_updateParameters_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updatePath_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_updatePath_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_updatePath_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updatePath_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_updatePath_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_in = ap_const_logic_1) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_last_V_0_ack_out = ap_const_logic_1) and (inStream_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_last_V_0_sel_rd <= not(inStream_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_last_V_0_ack_in = ap_const_logic_1) and (inStream_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_last_V_0_sel_wr <= not(inStream_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_last_V_0_state = ap_const_lv2_2) and (inStream_V_last_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_last_V_0_state = ap_const_lv2_3) and (inStream_V_last_V_0_vld_in = ap_const_logic_0) and (inStream_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_last_V_0_state = ap_const_lv2_1) and (inStream_V_last_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_last_V_0_state = ap_const_lv2_3) and (inStream_V_last_V_0_ack_out = ap_const_logic_0) and (inStream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_last_V_0_vld_in = ap_const_logic_0) and (inStream_V_last_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_last_V_0_ack_out = ap_const_logic_0) and (inStream_V_last_V_0_vld_in = ap_const_logic_1))) and (inStream_V_last_V_0_state = ap_const_lv2_3)) or ((inStream_V_last_V_0_state = ap_const_lv2_1) and (inStream_V_last_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_last_V_0_state = ap_const_lv2_2) and (inStream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outStream_V_data_V_1_state = ap_const_lv2_3)) or ((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    index_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                index <= tempIndex_i_reg_203;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_updateParameters_fu_384_index_ap_vld = ap_const_logic_1))) then 
                index <= grp_updateParameters_fu_384_index;
            end if; 
        end if;
    end process;

    tempIndex_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                tempIndex_reg_227 <= z_reg_616;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_updateDist_fu_301_ap_done = ap_const_logic_1))) then 
                tempIndex_reg_227 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tempMin_i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                tempMin_i_reg_215 <= tempMin_1_i_fu_518_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_updateDist_fu_301_ap_done = ap_const_logic_1))) then 
                tempMin_i_reg_215 <= ap_const_lv32_7FFFFFFF;
            end if; 
        end if;
    end process;

    v_i_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                v_i_reg_192 <= v_reg_558;
            elsif (((grp_updatePath_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                v_i_reg_192 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Dset_load_1_reg_575 <= Dset_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                Dset_load_reg_631 <= Dset_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_updateParameters_fu_384_distIndex_ap_vld = ap_const_logic_1))) then
                distIndex <= grp_updateParameters_fu_384_distIndex;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updatePath_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                distIndex_load_reg_545 <= distIndex;
                index_load_reg_540 <= index;
                tmp_5_i_reg_550 <= tmp_5_i_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_i_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                dist_addr_1_reg_600 <= tmp_i1_9_reg_563(9 - 1 downto 0);
                tmp_3_i_reg_594 <= tmp_3_i_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                graph_load_reg_584 <= graph_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_last_V_0_load_A = ap_const_logic_1)) then
                inStream_V_last_V_0_payload_A <= inStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_last_V_0_load_B = ap_const_logic_1)) then
                inStream_V_last_V_0_payload_B <= inStream_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= outStream_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= outStream_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= outStream_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= outStream_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= outStream_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= outStream_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= outStream_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= outStream_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= outStream_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= outStream_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_406 <= dist_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                size_read_reg_528 <= size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                    tempIndex_cast_reg_608(30 downto 0) <= tempIndex_cast_fu_463_p1(30 downto 0);
                z_reg_616 <= z_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tempIndex_i_reg_203 <= tempIndex_1_i_fu_511_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_2_i_reg_590 <= tmp_2_i_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i1_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_i1_9_reg_563(30 downto 0) <= tmp_i1_9_fu_439_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                v_reg_558 <= v_fu_433_p2;
            end if;
        end if;
    end process;
    tmp_i1_9_reg_563(63 downto 31) <= "000000000000000000000000000000000";
    tempIndex_cast_reg_608(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, Dset_q0, StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n, ap_CS_fsm_state27, ap_CS_fsm_state10, grp_updatePath_fu_343_ap_done, ap_CS_fsm_state11, tmp_i1_fu_428_p2, ap_CS_fsm_state12, tmp_2_i_fu_444_p2, ap_CS_fsm_state14, ap_CS_fsm_state24, tmp_i_fu_467_p2, grp_updateDset_fu_238_ap_done, grp_sendDist_fu_259_ap_done, grp_sendPath_fu_280_ap_done, grp_updateDist_fu_301_ap_done, grp_updateGraph_fu_322_ap_done, grp_updateParameters_fu_384_ap_done, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state8, flag_read_read_fu_112_p2, ap_CS_fsm_state2, ap_CS_fsm_state28)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((flag_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((flag_read_read_fu_112_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_updateParameters_fu_384_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_updateDset_fu_238_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_updateDist_fu_301_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_updateGraph_fu_322_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_updatePath_fu_343_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((tmp_i1_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_lv1_1 = Dset_q0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((tmp_2_i_fu_444_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (grp_updateDset_fu_238_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (grp_updateDist_fu_301_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((tmp_i_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Dset_address0_assign_proc : process(ap_CS_fsm_state11, tmp_i1_9_fu_439_p1, ap_CS_fsm_state24, grp_updateDset_fu_238_Dset_address0, ap_CS_fsm_state4, ap_CS_fsm_state21, tmp_i_8_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Dset_address0 <= tmp_i_8_fu_478_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Dset_address0 <= tmp_i1_9_fu_439_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Dset_address0 <= grp_updateDset_fu_238_Dset_address0;
        else 
            Dset_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    Dset_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state24, grp_updateDset_fu_238_Dset_ce0, ap_CS_fsm_state4, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            Dset_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Dset_ce0 <= grp_updateDset_fu_238_Dset_ce0;
        else 
            Dset_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Dset_we0_assign_proc : process(grp_updateDset_fu_238_Dset_we0, ap_CS_fsm_state4, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Dset_we0 <= grp_updateDset_fu_238_Dset_we0;
        else 
            Dset_we0 <= ap_const_logic_0;
        end if; 
    end process;


    StgValue_134_sendIndex_fu_364_ap_start_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            StgValue_134_sendIndex_fu_364_ap_start <= ap_const_logic_1;
        else 
            StgValue_134_sendIndex_fu_364_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    StgValue_134_sendIndex_fu_364_outStream_TREADY <= outStream_V_dest_V_1_state(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state28_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_block_state28 <= ((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state28)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state28)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    demorgan_fu_458_p2 <= (tmp_5_i_reg_550 and slt_fu_453_p2);

    dist_address0_assign_proc : process(tmp_i1_9_reg_563, ap_CS_fsm_state14, dist_addr_1_reg_600, ap_CS_fsm_state24, grp_sendDist_fu_259_dist_address0, grp_updateDist_fu_301_dist_address0, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state17, ap_CS_fsm_state6, tmp_i_8_fu_478_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dist_address0 <= tmp_i_8_fu_478_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dist_address0 <= dist_addr_1_reg_600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dist_address0 <= tmp_i1_9_reg_563(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            dist_address0 <= grp_updateDist_fu_301_dist_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dist_address0 <= grp_sendDist_fu_259_dist_address0;
        else 
            dist_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    dist_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state24, grp_sendDist_fu_259_dist_ce0, grp_updateDist_fu_301_dist_ce0, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state17, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            dist_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            dist_ce0 <= grp_updateDist_fu_301_dist_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dist_ce0 <= grp_sendDist_fu_259_dist_ce0;
        else 
            dist_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dist_d0_assign_proc : process(tmp_3_i_reg_594, grp_updateDist_fu_301_dist_d0, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dist_d0 <= tmp_3_i_reg_594;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            dist_d0 <= grp_updateDist_fu_301_dist_d0;
        else 
            dist_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dist_we0_assign_proc : process(Dset_load_1_reg_575, tmp_2_i_reg_590, grp_updateDist_fu_301_dist_we0, ap_CS_fsm_state16, ap_CS_fsm_state23, ap_CS_fsm_state6, demorgan_fu_458_p2)
    begin
        if (((demorgan_fu_458_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = Dset_load_1_reg_575) and (tmp_2_i_reg_590 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dist_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            dist_we0 <= grp_updateDist_fu_301_dist_we0;
        else 
            dist_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flag_read_read_fu_112_p2 <= (0=>flag, others=>'-');

    graph_address0_assign_proc : process(tmp_i1_9_reg_563, ap_CS_fsm_state12, grp_updateGraph_fu_322_graph_address0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            graph_address0 <= tmp_i1_9_reg_563(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            graph_address0 <= grp_updateGraph_fu_322_graph_address0;
        else 
            graph_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    graph_ce0_assign_proc : process(ap_CS_fsm_state12, grp_updateGraph_fu_322_graph_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            graph_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            graph_ce0 <= grp_updateGraph_fu_322_graph_ce0;
        else 
            graph_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    graph_we0_assign_proc : process(grp_updateGraph_fu_322_graph_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            graph_we0 <= grp_updateGraph_fu_322_graph_we0;
        else 
            graph_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_sendDist_fu_259_ap_start <= grp_sendDist_fu_259_ap_start_reg;
    grp_sendDist_fu_259_outStream_TREADY <= outStream_V_dest_V_1_state(1);
    grp_sendPath_fu_280_ap_start <= grp_sendPath_fu_280_ap_start_reg;
    grp_sendPath_fu_280_outStream_TREADY <= outStream_V_dest_V_1_state(1);
    grp_updateDist_fu_301_ap_start <= grp_updateDist_fu_301_ap_start_reg;
    grp_updateDist_fu_301_inStream_TVALID <= inStream_V_dest_V_0_state(0);
    grp_updateDset_fu_238_ap_start <= grp_updateDset_fu_238_ap_start_reg;
    grp_updateDset_fu_238_inStream_TVALID <= inStream_V_dest_V_0_state(0);
    grp_updateGraph_fu_322_ap_start <= grp_updateGraph_fu_322_ap_start_reg;
    grp_updateGraph_fu_322_inStream_TVALID <= inStream_V_dest_V_0_state(0);
    grp_updateParameters_fu_384_ap_start <= grp_updateParameters_fu_384_ap_start_reg;
    grp_updateParameters_fu_384_inStream_TVALID <= inStream_V_dest_V_0_state(0);
    grp_updatePath_fu_343_ap_start <= grp_updatePath_fu_343_ap_start_reg;
    grp_updatePath_fu_343_inStream_TVALID <= inStream_V_dest_V_0_state(0);
    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_data_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_data_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_data_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_data_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_data_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((inStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_state_cmp_full and inStream_V_data_V_0_sel_wr);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_dest_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_dest_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_dest_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_dest_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_dest_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_id_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_id_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_id_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_id_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_id_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_keep_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_keep_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_keep_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_keep_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_keep_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_last_V_0_ack_in <= inStream_V_last_V_0_state(1);

    inStream_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_last_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_last_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_last_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_last_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_last_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_last_V_0_data_out_assign_proc : process(inStream_V_last_V_0_payload_A, inStream_V_last_V_0_payload_B, inStream_V_last_V_0_sel)
    begin
        if ((inStream_V_last_V_0_sel = ap_const_logic_1)) then 
            inStream_V_last_V_0_data_out <= inStream_V_last_V_0_payload_B;
        else 
            inStream_V_last_V_0_data_out <= inStream_V_last_V_0_payload_A;
        end if; 
    end process;

    inStream_V_last_V_0_load_A <= (inStream_V_last_V_0_state_cmp_full and not(inStream_V_last_V_0_sel_wr));
    inStream_V_last_V_0_load_B <= (inStream_V_last_V_0_state_cmp_full and inStream_V_last_V_0_sel_wr);
    inStream_V_last_V_0_sel <= inStream_V_last_V_0_sel_rd;
    inStream_V_last_V_0_state_cmp_full <= '0' when (inStream_V_last_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_last_V_0_vld_in <= inStream_TVALID;
    inStream_V_last_V_0_vld_out <= inStream_V_last_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_strb_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_strb_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_strb_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_strb_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_strb_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_state10, grp_updateDset_fu_238_inStream_TREADY, grp_updateDist_fu_301_inStream_TREADY, grp_updateGraph_fu_322_inStream_TREADY, grp_updatePath_fu_343_inStream_TREADY, grp_updateParameters_fu_384_inStream_TREADY, ap_CS_fsm_state23, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            inStream_V_user_V_0_ack_out <= grp_updateParameters_fu_384_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            inStream_V_user_V_0_ack_out <= grp_updatePath_fu_343_inStream_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            inStream_V_user_V_0_ack_out <= grp_updateGraph_fu_322_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            inStream_V_user_V_0_ack_out <= grp_updateDist_fu_301_inStream_TREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            inStream_V_user_V_0_ack_out <= grp_updateDset_fu_238_inStream_TREADY;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_TDATA_blk_n <= StgValue_134_sendIndex_fu_364_outStream_TDATA_blk_n;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TDATA, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TDATA, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TDATA, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_data_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_data_V_1_data_in <= grp_sendPath_fu_280_outStream_TDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_data_V_1_data_in <= grp_sendDist_fu_259_outStream_TDATA;
        else 
            outStream_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((outStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_state_cmp_full and outStream_V_data_V_1_sel_wr);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_data_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_data_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_data_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendDist_fu_259_outStream_TDEST, grp_sendPath_fu_280_outStream_TVALID, grp_sendPath_fu_280_outStream_TDEST, StgValue_134_sendIndex_fu_364_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TDEST, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_dest_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TDEST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_dest_V_1_data_in <= grp_sendPath_fu_280_outStream_TDEST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_dest_V_1_data_in <= grp_sendDist_fu_259_outStream_TDEST;
        else 
            outStream_V_dest_V_1_data_in <= "XXXXXX";
        end if; 
    end process;


    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_dest_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_dest_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_dest_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendDist_fu_259_outStream_TID, grp_sendPath_fu_280_outStream_TVALID, grp_sendPath_fu_280_outStream_TID, StgValue_134_sendIndex_fu_364_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_id_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_id_V_1_data_in <= grp_sendPath_fu_280_outStream_TID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_id_V_1_data_in <= grp_sendDist_fu_259_outStream_TID;
        else 
            outStream_V_id_V_1_data_in <= "XXXXX";
        end if; 
    end process;


    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_id_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_id_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_id_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendDist_fu_259_outStream_TKEEP, grp_sendPath_fu_280_outStream_TVALID, grp_sendPath_fu_280_outStream_TKEEP, StgValue_134_sendIndex_fu_364_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TKEEP, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_keep_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TKEEP;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_keep_V_1_data_in <= grp_sendPath_fu_280_outStream_TKEEP;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_keep_V_1_data_in <= grp_sendDist_fu_259_outStream_TKEEP;
        else 
            outStream_V_keep_V_1_data_in <= "XXXX";
        end if; 
    end process;


    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_keep_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_keep_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_keep_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendDist_fu_259_outStream_TLAST, grp_sendPath_fu_280_outStream_TVALID, grp_sendPath_fu_280_outStream_TLAST, StgValue_134_sendIndex_fu_364_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TLAST, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_last_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_last_V_1_data_in <= grp_sendPath_fu_280_outStream_TLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_last_V_1_data_in <= grp_sendDist_fu_259_outStream_TLAST;
        else 
            outStream_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_last_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_last_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_last_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendDist_fu_259_outStream_TSTRB, grp_sendPath_fu_280_outStream_TVALID, grp_sendPath_fu_280_outStream_TSTRB, StgValue_134_sendIndex_fu_364_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TSTRB, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_strb_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_strb_V_1_data_in <= grp_sendPath_fu_280_outStream_TSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_strb_V_1_data_in <= grp_sendDist_fu_259_outStream_TSTRB;
        else 
            outStream_V_strb_V_1_data_in <= "XXXX";
        end if; 
    end process;


    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_strb_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_strb_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_strb_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendDist_fu_259_outStream_TUSER, grp_sendPath_fu_280_outStream_TVALID, grp_sendPath_fu_280_outStream_TUSER, StgValue_134_sendIndex_fu_364_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TUSER, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_logic_1 = StgValue_134_sendIndex_fu_364_outStream_TVALID))) then 
            outStream_V_user_V_1_data_in <= StgValue_134_sendIndex_fu_364_outStream_TUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (grp_sendPath_fu_280_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_user_V_1_data_in <= grp_sendPath_fu_280_outStream_TUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (grp_sendDist_fu_259_outStream_TVALID = ap_const_logic_1))) then 
            outStream_V_user_V_1_data_in <= grp_sendDist_fu_259_outStream_TUSER;
        else 
            outStream_V_user_V_1_data_in <= "XX";
        end if; 
    end process;


    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state27, grp_sendDist_fu_259_outStream_TVALID, grp_sendPath_fu_280_outStream_TVALID, StgValue_134_sendIndex_fu_364_outStream_TVALID, ap_CS_fsm_state17, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            outStream_V_user_V_1_vld_in <= StgValue_134_sendIndex_fu_364_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outStream_V_user_V_1_vld_in <= grp_sendPath_fu_280_outStream_TVALID;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outStream_V_user_V_1_vld_in <= grp_sendDist_fu_259_outStream_TVALID;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);

    path_address0_assign_proc : process(ap_CS_fsm_state10, tmp_i1_9_reg_563, grp_sendPath_fu_280_path_address0, grp_updatePath_fu_343_path_address0, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            path_address0 <= tmp_i1_9_reg_563(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            path_address0 <= grp_updatePath_fu_343_path_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            path_address0 <= grp_sendPath_fu_280_path_address0;
        else 
            path_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    path_ce0_assign_proc : process(ap_CS_fsm_state10, grp_sendPath_fu_280_path_ce0, grp_updatePath_fu_343_path_ce0, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            path_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            path_ce0 <= grp_updatePath_fu_343_path_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            path_ce0 <= grp_sendPath_fu_280_path_ce0;
        else 
            path_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    path_d0_assign_proc : process(index_load_reg_540, ap_CS_fsm_state10, grp_updatePath_fu_343_path_d0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            path_d0 <= index_load_reg_540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            path_d0 <= grp_updatePath_fu_343_path_d0;
        else 
            path_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    path_we0_assign_proc : process(ap_CS_fsm_state10, Dset_load_1_reg_575, tmp_2_i_reg_590, grp_updatePath_fu_343_path_we0, ap_CS_fsm_state16, demorgan_fu_458_p2)
    begin
        if (((demorgan_fu_458_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = Dset_load_1_reg_575) and (tmp_2_i_reg_590 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            path_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            path_we0 <= grp_updatePath_fu_343_path_we0;
        else 
            path_we0 <= ap_const_logic_0;
        end if; 
    end process;

    slt_fu_453_p2 <= "1" when (signed(tmp_3_i_reg_594) < signed(reg_406)) else "0";
    tempIndex_1_i_fu_511_p3 <= 
        tempIndex_i_reg_203 when (Dset_load_reg_631(0) = '1') else 
        tempIndex_i_tempInd_fu_496_p3;
    tempIndex_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempIndex_reg_227),32));
    tempIndex_i_tempInd_fu_496_p3 <= 
        tempIndex_i_reg_203 when (tmp_6_i_fu_490_p2(0) = '1') else 
        tempIndex_cast_reg_608;
    tempMin_1_i_fu_518_p3 <= 
        tempMin_i_reg_215 when (Dset_load_reg_631(0) = '1') else 
        tempMin_i_tempMin_2_s_fu_503_p3;
    tempMin_i_tempMin_2_s_fu_503_p3 <= 
        tempMin_i_reg_215 when (tmp_6_i_fu_490_p2(0) = '1') else 
        reg_406;
    tmp_2_i_fu_444_p2 <= "1" when (graph_load_reg_584 = ap_const_lv32_0) else "0";
    tmp_3_i_fu_449_p2 <= std_logic_vector(unsigned(distIndex_load_reg_545) + unsigned(graph_load_reg_584));
    tmp_5_i_fu_418_p2 <= "0" when (distIndex = ap_const_lv32_7FFFFFFF) else "1";
    tmp_6_i_fu_490_p2 <= "1" when (signed(reg_406) > signed(tempMin_i_reg_215)) else "0";
    tmp_i1_9_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_i_reg_192),64));
    tmp_i1_fu_428_p2 <= "1" when (signed(v_i_cast_fu_424_p1) < signed(size_read_reg_528)) else "0";
    tmp_i_8_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tempIndex_reg_227),64));
    tmp_i_fu_467_p2 <= "1" when (signed(tempIndex_cast_fu_463_p1) < signed(size_read_reg_528)) else "0";
    v_fu_433_p2 <= std_logic_vector(unsigned(v_i_reg_192) + unsigned(ap_const_lv31_1));
    v_i_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_i_reg_192),32));
    z_fu_472_p2 <= std_logic_vector(unsigned(tempIndex_reg_227) + unsigned(ap_const_lv31_1));
end behav;
