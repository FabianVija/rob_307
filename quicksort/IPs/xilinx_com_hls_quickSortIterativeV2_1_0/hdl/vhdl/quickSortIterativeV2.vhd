-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quickSortIterativeV2 is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    inStream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    inStream_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    inStream_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    outStream_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of quickSortIterativeV2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "quickSortIterativeV2,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.321000,HLS_SYN_LAT=3003,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=653,HLS_SYN_LUT=1069,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal inStream_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_vld_in : STD_LOGIC;
    signal inStream_V_data_V_0_vld_out : STD_LOGIC;
    signal inStream_V_data_V_0_ack_in : STD_LOGIC;
    signal inStream_V_data_V_0_ack_out : STD_LOGIC;
    signal inStream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_data_V_0_sel : STD_LOGIC;
    signal inStream_V_data_V_0_load_A : STD_LOGIC;
    signal inStream_V_data_V_0_load_B : STD_LOGIC;
    signal inStream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_vld_in : STD_LOGIC;
    signal inStream_V_keep_V_0_vld_out : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_in : STD_LOGIC;
    signal inStream_V_keep_V_0_ack_out : STD_LOGIC;
    signal inStream_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_keep_V_0_sel : STD_LOGIC;
    signal inStream_V_keep_V_0_load_A : STD_LOGIC;
    signal inStream_V_keep_V_0_load_B : STD_LOGIC;
    signal inStream_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_vld_in : STD_LOGIC;
    signal inStream_V_strb_V_0_vld_out : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_in : STD_LOGIC;
    signal inStream_V_strb_V_0_ack_out : STD_LOGIC;
    signal inStream_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal inStream_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_strb_V_0_sel : STD_LOGIC;
    signal inStream_V_strb_V_0_load_A : STD_LOGIC;
    signal inStream_V_strb_V_0_load_B : STD_LOGIC;
    signal inStream_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_vld_in : STD_LOGIC;
    signal inStream_V_user_V_0_vld_out : STD_LOGIC;
    signal inStream_V_user_V_0_ack_in : STD_LOGIC;
    signal inStream_V_user_V_0_ack_out : STD_LOGIC;
    signal inStream_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_user_V_0_sel : STD_LOGIC;
    signal inStream_V_user_V_0_load_A : STD_LOGIC;
    signal inStream_V_user_V_0_load_B : STD_LOGIC;
    signal inStream_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_vld_in : STD_LOGIC;
    signal inStream_V_id_V_0_vld_out : STD_LOGIC;
    signal inStream_V_id_V_0_ack_in : STD_LOGIC;
    signal inStream_V_id_V_0_ack_out : STD_LOGIC;
    signal inStream_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal inStream_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_id_V_0_sel : STD_LOGIC;
    signal inStream_V_id_V_0_load_A : STD_LOGIC;
    signal inStream_V_id_V_0_load_B : STD_LOGIC;
    signal inStream_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal inStream_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_vld_in : STD_LOGIC;
    signal inStream_V_dest_V_0_vld_out : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_in : STD_LOGIC;
    signal inStream_V_dest_V_0_ack_out : STD_LOGIC;
    signal inStream_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal inStream_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_dest_V_0_sel : STD_LOGIC;
    signal inStream_V_dest_V_0_load_A : STD_LOGIC;
    signal inStream_V_dest_V_0_load_B : STD_LOGIC;
    signal inStream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_V_data_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_vld_in : STD_LOGIC;
    signal outStream_V_data_V_1_vld_out : STD_LOGIC;
    signal outStream_V_data_V_1_ack_in : STD_LOGIC;
    signal outStream_V_data_V_1_ack_out : STD_LOGIC;
    signal outStream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_data_V_1_sel : STD_LOGIC;
    signal outStream_V_data_V_1_load_A : STD_LOGIC;
    signal outStream_V_data_V_1_load_B : STD_LOGIC;
    signal outStream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_keep_V_1_data_in : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outStream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outStream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outStream_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_keep_V_1_sel : STD_LOGIC;
    signal outStream_V_keep_V_1_load_A : STD_LOGIC;
    signal outStream_V_keep_V_1_load_B : STD_LOGIC;
    signal outStream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_strb_V_1_data_in : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outStream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outStream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outStream_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal outStream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_strb_V_1_sel : STD_LOGIC;
    signal outStream_V_strb_V_1_load_A : STD_LOGIC;
    signal outStream_V_strb_V_1_load_B : STD_LOGIC;
    signal outStream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_user_V_1_data_in : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_vld_in : STD_LOGIC;
    signal outStream_V_user_V_1_vld_out : STD_LOGIC;
    signal outStream_V_user_V_1_ack_in : STD_LOGIC;
    signal outStream_V_user_V_1_ack_out : STD_LOGIC;
    signal outStream_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_user_V_1_sel : STD_LOGIC;
    signal outStream_V_user_V_1_load_A : STD_LOGIC;
    signal outStream_V_user_V_1_load_B : STD_LOGIC;
    signal outStream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_vld_in : STD_LOGIC;
    signal outStream_V_last_V_1_vld_out : STD_LOGIC;
    signal outStream_V_last_V_1_ack_in : STD_LOGIC;
    signal outStream_V_last_V_1_ack_out : STD_LOGIC;
    signal outStream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_last_V_1_sel : STD_LOGIC;
    signal outStream_V_last_V_1_load_A : STD_LOGIC;
    signal outStream_V_last_V_1_load_B : STD_LOGIC;
    signal outStream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_id_V_1_data_in : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_vld_in : STD_LOGIC;
    signal outStream_V_id_V_1_vld_out : STD_LOGIC;
    signal outStream_V_id_V_1_ack_in : STD_LOGIC;
    signal outStream_V_id_V_1_ack_out : STD_LOGIC;
    signal outStream_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal outStream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_id_V_1_sel : STD_LOGIC;
    signal outStream_V_id_V_1_load_A : STD_LOGIC;
    signal outStream_V_id_V_1_load_B : STD_LOGIC;
    signal outStream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_V_dest_V_1_data_in : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outStream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_in : STD_LOGIC;
    signal outStream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outStream_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal outStream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_V_dest_V_1_sel : STD_LOGIC;
    signal outStream_V_dest_V_1_load_A : STD_LOGIC;
    signal outStream_V_dest_V_1_load_B : STD_LOGIC;
    signal outStream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal pivot : STD_LOGIC_VECTOR (31 downto 0);
    signal arr_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal arr_ce0 : STD_LOGIC;
    signal arr_we0 : STD_LOGIC;
    signal arr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal inStream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal tmp_1_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal pivot_read_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_read_reg_368 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_377 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state3_io : BOOLEAN;
    signal tmp_keep_V_reg_387 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_393 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_399 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_id_V_reg_405 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_dest_V_reg_411 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_io : BOOLEAN;
    signal tmp_data_V_1_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_dest_V_1_reg_175 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal tmp_id_V_1_reg_188 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_user_V_1_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_strb_V_1_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_reg_227 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal k1_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal counter_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal counter_1_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component quickSortIterativbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component quickSortIterativeV2_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        pivot : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    arr_U : component quickSortIterativbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => arr_address0,
        ce0 => arr_ce0,
        we0 => arr_we0,
        d0 => inStream_V_data_V_0_data_out,
        q0 => arr_q0);

    quickSortIterativeV2_CTRL_BUS_s_axi_U : component quickSortIterativeV2_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        size => size,
        pivot => pivot);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_out = ap_const_logic_1) and (inStream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_rd <= not(inStream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_data_V_0_ack_in = ap_const_logic_1) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_data_V_0_sel_wr <= not(inStream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_data_V_0_state = ap_const_lv2_3) and (inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_data_V_0_vld_in = ap_const_logic_0) and (inStream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_data_V_0_ack_out = ap_const_logic_0) and (inStream_V_data_V_0_vld_in = ap_const_logic_1))) and (inStream_V_data_V_0_state = ap_const_lv2_3)) or ((inStream_V_data_V_0_state = ap_const_lv2_1) and (inStream_V_data_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_data_V_0_state = ap_const_lv2_2) and (inStream_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_out = ap_const_logic_1) and (inStream_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_rd <= not(inStream_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_dest_V_0_ack_in = ap_const_logic_1) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_dest_V_0_sel_wr <= not(inStream_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_dest_V_0_state = ap_const_lv2_3) and (inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_dest_V_0_vld_in = ap_const_logic_0) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_dest_V_0_ack_out = ap_const_logic_0) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1))) and (inStream_V_dest_V_0_state = ap_const_lv2_3)) or ((inStream_V_dest_V_0_state = ap_const_lv2_1) and (inStream_V_dest_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_dest_V_0_state = ap_const_lv2_2) and (inStream_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_out = ap_const_logic_1) and (inStream_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_rd <= not(inStream_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_id_V_0_ack_in = ap_const_logic_1) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_id_V_0_sel_wr <= not(inStream_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_id_V_0_state = ap_const_lv2_3) and (inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_id_V_0_vld_in = ap_const_logic_0) and (inStream_V_id_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_id_V_0_ack_out = ap_const_logic_0) and (inStream_V_id_V_0_vld_in = ap_const_logic_1))) and (inStream_V_id_V_0_state = ap_const_lv2_3)) or ((inStream_V_id_V_0_state = ap_const_lv2_1) and (inStream_V_id_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_id_V_0_state = ap_const_lv2_2) and (inStream_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_out = ap_const_logic_1) and (inStream_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_rd <= not(inStream_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_keep_V_0_ack_in = ap_const_logic_1) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_keep_V_0_sel_wr <= not(inStream_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_keep_V_0_state = ap_const_lv2_3) and (inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_keep_V_0_vld_in = ap_const_logic_0) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_keep_V_0_ack_out = ap_const_logic_0) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1))) and (inStream_V_keep_V_0_state = ap_const_lv2_3)) or ((inStream_V_keep_V_0_state = ap_const_lv2_1) and (inStream_V_keep_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_keep_V_0_state = ap_const_lv2_2) and (inStream_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_out = ap_const_logic_1) and (inStream_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_rd <= not(inStream_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_strb_V_0_ack_in = ap_const_logic_1) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_strb_V_0_sel_wr <= not(inStream_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_strb_V_0_state = ap_const_lv2_3) and (inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_strb_V_0_vld_in = ap_const_logic_0) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_strb_V_0_ack_out = ap_const_logic_0) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1))) and (inStream_V_strb_V_0_state = ap_const_lv2_3)) or ((inStream_V_strb_V_0_state = ap_const_lv2_1) and (inStream_V_strb_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_strb_V_0_state = ap_const_lv2_2) and (inStream_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_out = ap_const_logic_1) and (inStream_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_rd <= not(inStream_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_user_V_0_ack_in = ap_const_logic_1) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_user_V_0_sel_wr <= not(inStream_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_user_V_0_state = ap_const_lv2_3) and (inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_user_V_0_vld_in = ap_const_logic_0) and (inStream_V_user_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_user_V_0_ack_out = ap_const_logic_0) and (inStream_V_user_V_0_vld_in = ap_const_logic_1))) and (inStream_V_user_V_0_state = ap_const_lv2_3)) or ((inStream_V_user_V_0_state = ap_const_lv2_1) and (inStream_V_user_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_user_V_0_state = ap_const_lv2_2) and (inStream_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_out = ap_const_logic_1) and (outStream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_rd <= not(outStream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_data_V_1_sel_wr <= not(outStream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_data_V_1_state = ap_const_lv2_3) and (outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_data_V_1_vld_in = ap_const_logic_0) and (outStream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_data_V_1_ack_out = ap_const_logic_0) and (outStream_V_data_V_1_vld_in = ap_const_logic_1))) and (outStream_V_data_V_1_state = ap_const_lv2_3)) or ((outStream_V_data_V_1_state = ap_const_lv2_1) and (outStream_V_data_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_data_V_1_state = ap_const_lv2_2) and (outStream_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_out = ap_const_logic_1) and (outStream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_rd <= not(outStream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_dest_V_1_ack_in = ap_const_logic_1) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_dest_V_1_sel_wr <= not(outStream_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_dest_V_1_state = ap_const_lv2_3) and (outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_dest_V_1_vld_in = ap_const_logic_0) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_dest_V_1_ack_out = ap_const_logic_0) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outStream_V_dest_V_1_state = ap_const_lv2_3)) or ((outStream_V_dest_V_1_state = ap_const_lv2_1) and (outStream_V_dest_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_dest_V_1_state = ap_const_lv2_2) and (outStream_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_out = ap_const_logic_1) and (outStream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_rd <= not(outStream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_id_V_1_ack_in = ap_const_logic_1) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_id_V_1_sel_wr <= not(outStream_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_id_V_1_state = ap_const_lv2_3) and (outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_id_V_1_vld_in = ap_const_logic_0) and (outStream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_id_V_1_ack_out = ap_const_logic_0) and (outStream_V_id_V_1_vld_in = ap_const_logic_1))) and (outStream_V_id_V_1_state = ap_const_lv2_3)) or ((outStream_V_id_V_1_state = ap_const_lv2_1) and (outStream_V_id_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_id_V_1_state = ap_const_lv2_2) and (outStream_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_out = ap_const_logic_1) and (outStream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_rd <= not(outStream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_keep_V_1_ack_in = ap_const_logic_1) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_keep_V_1_sel_wr <= not(outStream_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_keep_V_1_state = ap_const_lv2_3) and (outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_keep_V_1_vld_in = ap_const_logic_0) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_keep_V_1_ack_out = ap_const_logic_0) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outStream_V_keep_V_1_state = ap_const_lv2_3)) or ((outStream_V_keep_V_1_state = ap_const_lv2_1) and (outStream_V_keep_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_keep_V_1_state = ap_const_lv2_2) and (outStream_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_out = ap_const_logic_1) and (outStream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_rd <= not(outStream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_last_V_1_ack_in = ap_const_logic_1) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_last_V_1_sel_wr <= not(outStream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_last_V_1_state = ap_const_lv2_3) and (outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_last_V_1_vld_in = ap_const_logic_0) and (outStream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_last_V_1_ack_out = ap_const_logic_0) and (outStream_V_last_V_1_vld_in = ap_const_logic_1))) and (outStream_V_last_V_1_state = ap_const_lv2_3)) or ((outStream_V_last_V_1_state = ap_const_lv2_1) and (outStream_V_last_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_last_V_1_state = ap_const_lv2_2) and (outStream_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_out = ap_const_logic_1) and (outStream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_rd <= not(outStream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_strb_V_1_ack_in = ap_const_logic_1) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_strb_V_1_sel_wr <= not(outStream_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_strb_V_1_state = ap_const_lv2_3) and (outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_strb_V_1_vld_in = ap_const_logic_0) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_strb_V_1_ack_out = ap_const_logic_0) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outStream_V_strb_V_1_state = ap_const_lv2_3)) or ((outStream_V_strb_V_1_state = ap_const_lv2_1) and (outStream_V_strb_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_strb_V_1_state = ap_const_lv2_2) and (outStream_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_out = ap_const_logic_1) and (outStream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_rd <= not(outStream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_V_user_V_1_ack_in = ap_const_logic_1) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_V_user_V_1_sel_wr <= not(outStream_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_0)) or ((outStream_V_user_V_1_state = ap_const_lv2_3) and (outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_V_user_V_1_vld_in = ap_const_logic_0) and (outStream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outStream_V_user_V_1_ack_out = ap_const_logic_0) and (outStream_V_user_V_1_vld_in = ap_const_logic_1))) and (outStream_V_user_V_1_state = ap_const_lv2_3)) or ((outStream_V_user_V_1_state = ap_const_lv2_1) and (outStream_V_user_V_1_ack_out = ap_const_logic_1)) or ((outStream_V_user_V_1_state = ap_const_lv2_2) and (outStream_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    counter_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                counter_fu_92 <= counter_1_fu_322_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                counter_fu_92 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k1_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k1_reg_251 <= ap_const_lv32_0;
            elsif (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k1_reg_251 <= k_1_reg_424;
            end if; 
        end if;
    end process;

    k_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_reg_240 <= k_2_reg_377;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_240 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_A = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_A <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_data_V_0_load_B = ap_const_logic_1)) then
                inStream_V_data_V_0_payload_B <= inStream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_A = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_A <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_dest_V_0_load_B = ap_const_logic_1)) then
                inStream_V_dest_V_0_payload_B <= inStream_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_A = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_A <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_id_V_0_load_B = ap_const_logic_1)) then
                inStream_V_id_V_0_payload_B <= inStream_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_A = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_A <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_keep_V_0_load_B = ap_const_logic_1)) then
                inStream_V_keep_V_0_payload_B <= inStream_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_A = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_A <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_strb_V_0_load_B = ap_const_logic_1)) then
                inStream_V_strb_V_0_payload_B <= inStream_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_A = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_A <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_user_V_0_load_B = ap_const_logic_1)) then
                inStream_V_user_V_0_payload_B <= inStream_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                k_1_reg_424 <= k_1_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_2_reg_377 <= k_2_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_A = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_A <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_data_V_1_load_B = ap_const_logic_1)) then
                outStream_V_data_V_1_payload_B <= outStream_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_A = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_A <= outStream_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_dest_V_1_load_B = ap_const_logic_1)) then
                outStream_V_dest_V_1_payload_B <= outStream_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_A = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_A <= outStream_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_id_V_1_load_B = ap_const_logic_1)) then
                outStream_V_id_V_1_payload_B <= outStream_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_A = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_A <= outStream_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_keep_V_1_load_B = ap_const_logic_1)) then
                outStream_V_keep_V_1_payload_B <= outStream_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_A = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_A <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_last_V_1_load_B = ap_const_logic_1)) then
                outStream_V_last_V_1_payload_B <= outStream_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_A = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_A <= outStream_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_strb_V_1_load_B = ap_const_logic_1)) then
                outStream_V_strb_V_1_payload_B <= outStream_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_A = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_A <= outStream_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_V_user_V_1_load_B = ap_const_logic_1)) then
                outStream_V_user_V_1_payload_B <= outStream_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                pivot_read_reg_363 <= pivot;
                size_read_reg_368 <= size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1_reg_417 <= tmp_1_fu_312_p2;
                tmp_dest_V_reg_411 <= inStream_V_dest_V_0_data_out;
                tmp_id_V_reg_405 <= inStream_V_id_V_0_data_out;
                tmp_keep_V_reg_387 <= inStream_V_keep_V_0_data_out;
                tmp_strb_V_reg_393 <= inStream_V_strb_V_0_data_out;
                tmp_user_V_reg_399 <= inStream_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_dest_V_1_reg_175 <= tmp_dest_V_reg_411;
                tmp_id_V_1_reg_188 <= tmp_id_V_reg_405;
                tmp_keep_V_1_reg_227 <= tmp_keep_V_reg_387;
                tmp_strb_V_1_reg_214 <= tmp_strb_V_reg_393;
                tmp_user_V_1_reg_201 <= tmp_user_V_reg_399;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_block_state3_io, ap_block_state5_io, ap_block_state4_io, exitcond1_fu_270_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_io) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state3_io_assign_proc : process(outStream_V_data_V_1_ack_in, tmp_1_fu_312_p2)
    begin
                ap_block_state3_io <= ((tmp_1_fu_312_p2 = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(outStream_V_data_V_1_ack_in, tmp_1_reg_417)
    begin
                ap_block_state4_io <= ((tmp_1_reg_417 = ap_const_lv1_0) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(outStream_V_data_V_1_ack_in, exitcond_fu_333_p2)
    begin
                ap_block_state5_io <= ((exitcond_fu_333_p2 = ap_const_lv1_1) and (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in)
    begin
                ap_block_state8 <= ((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state8)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(outStream_V_data_V_1_ack_in, outStream_V_keep_V_1_ack_in, outStream_V_strb_V_1_ack_in, outStream_V_user_V_1_ack_in, outStream_V_last_V_1_ack_in, outStream_V_id_V_1_ack_in, outStream_V_dest_V_1_ack_in, ap_CS_fsm_state8)
    begin
        if ((not(((outStream_V_dest_V_1_ack_in = ap_const_logic_0) or (outStream_V_id_V_1_ack_in = ap_const_logic_0) or (outStream_V_last_V_1_ack_in = ap_const_logic_0) or (outStream_V_user_V_1_ack_in = ap_const_logic_0) or (outStream_V_strb_V_1_ack_in = ap_const_logic_0) or (outStream_V_keep_V_1_ack_in = ap_const_logic_0) or (outStream_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    arr_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, tmp_2_fu_317_p1, tmp_6_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            arr_address0 <= tmp_6_fu_345_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            arr_address0 <= tmp_2_fu_317_p1(10 - 1 downto 0);
        else 
            arr_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    arr_ce0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            arr_ce0 <= ap_const_logic_1;
        else 
            arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    arr_we0_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            arr_we0 <= ap_const_logic_1;
        else 
            arr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    counter_1_fu_322_p2 <= std_logic_vector(unsigned(counter_fu_92) + unsigned(ap_const_lv32_1));
    exitcond1_fu_270_p2 <= "1" when (k_reg_240 = size_read_reg_368) else "0";
    exitcond_fu_333_p2 <= "1" when (k1_reg_251 = counter_fu_92) else "0";

    inStream_TDATA_blk_n_assign_proc : process(inStream_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inStream_TDATA_blk_n <= inStream_V_data_V_0_state(0);
        else 
            inStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_TREADY <= inStream_V_dest_V_0_state(1);
    inStream_V_data_V_0_ack_in <= inStream_V_data_V_0_state(1);

    inStream_V_data_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_data_V_0_data_out_assign_proc : process(inStream_V_data_V_0_payload_A, inStream_V_data_V_0_payload_B, inStream_V_data_V_0_sel)
    begin
        if ((inStream_V_data_V_0_sel = ap_const_logic_1)) then 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_B;
        else 
            inStream_V_data_V_0_data_out <= inStream_V_data_V_0_payload_A;
        end if; 
    end process;

    inStream_V_data_V_0_load_A <= (inStream_V_data_V_0_state_cmp_full and not(inStream_V_data_V_0_sel_wr));
    inStream_V_data_V_0_load_B <= (inStream_V_data_V_0_state_cmp_full and inStream_V_data_V_0_sel_wr);
    inStream_V_data_V_0_sel <= inStream_V_data_V_0_sel_rd;
    inStream_V_data_V_0_state_cmp_full <= '0' when (inStream_V_data_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_data_V_0_vld_in <= inStream_TVALID;
    inStream_V_data_V_0_vld_out <= inStream_V_data_V_0_state(0);
    inStream_V_dest_V_0_ack_in <= inStream_V_dest_V_0_state(1);

    inStream_V_dest_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_dest_V_0_data_out_assign_proc : process(inStream_V_dest_V_0_payload_A, inStream_V_dest_V_0_payload_B, inStream_V_dest_V_0_sel)
    begin
        if ((inStream_V_dest_V_0_sel = ap_const_logic_1)) then 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_B;
        else 
            inStream_V_dest_V_0_data_out <= inStream_V_dest_V_0_payload_A;
        end if; 
    end process;

    inStream_V_dest_V_0_load_A <= (inStream_V_dest_V_0_state_cmp_full and not(inStream_V_dest_V_0_sel_wr));
    inStream_V_dest_V_0_load_B <= (inStream_V_dest_V_0_state_cmp_full and inStream_V_dest_V_0_sel_wr);
    inStream_V_dest_V_0_sel <= inStream_V_dest_V_0_sel_rd;
    inStream_V_dest_V_0_state_cmp_full <= '0' when (inStream_V_dest_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_dest_V_0_vld_in <= inStream_TVALID;
    inStream_V_dest_V_0_vld_out <= inStream_V_dest_V_0_state(0);
    inStream_V_id_V_0_ack_in <= inStream_V_id_V_0_state(1);

    inStream_V_id_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_id_V_0_data_out_assign_proc : process(inStream_V_id_V_0_payload_A, inStream_V_id_V_0_payload_B, inStream_V_id_V_0_sel)
    begin
        if ((inStream_V_id_V_0_sel = ap_const_logic_1)) then 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_B;
        else 
            inStream_V_id_V_0_data_out <= inStream_V_id_V_0_payload_A;
        end if; 
    end process;

    inStream_V_id_V_0_load_A <= (inStream_V_id_V_0_state_cmp_full and not(inStream_V_id_V_0_sel_wr));
    inStream_V_id_V_0_load_B <= (inStream_V_id_V_0_state_cmp_full and inStream_V_id_V_0_sel_wr);
    inStream_V_id_V_0_sel <= inStream_V_id_V_0_sel_rd;
    inStream_V_id_V_0_state_cmp_full <= '0' when (inStream_V_id_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_id_V_0_vld_in <= inStream_TVALID;
    inStream_V_id_V_0_vld_out <= inStream_V_id_V_0_state(0);
    inStream_V_keep_V_0_ack_in <= inStream_V_keep_V_0_state(1);

    inStream_V_keep_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_keep_V_0_data_out_assign_proc : process(inStream_V_keep_V_0_payload_A, inStream_V_keep_V_0_payload_B, inStream_V_keep_V_0_sel)
    begin
        if ((inStream_V_keep_V_0_sel = ap_const_logic_1)) then 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_B;
        else 
            inStream_V_keep_V_0_data_out <= inStream_V_keep_V_0_payload_A;
        end if; 
    end process;

    inStream_V_keep_V_0_load_A <= (inStream_V_keep_V_0_state_cmp_full and not(inStream_V_keep_V_0_sel_wr));
    inStream_V_keep_V_0_load_B <= (inStream_V_keep_V_0_state_cmp_full and inStream_V_keep_V_0_sel_wr);
    inStream_V_keep_V_0_sel <= inStream_V_keep_V_0_sel_rd;
    inStream_V_keep_V_0_state_cmp_full <= '0' when (inStream_V_keep_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_keep_V_0_vld_in <= inStream_TVALID;
    inStream_V_keep_V_0_vld_out <= inStream_V_keep_V_0_state(0);
    inStream_V_strb_V_0_ack_in <= inStream_V_strb_V_0_state(1);

    inStream_V_strb_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_strb_V_0_data_out_assign_proc : process(inStream_V_strb_V_0_payload_A, inStream_V_strb_V_0_payload_B, inStream_V_strb_V_0_sel)
    begin
        if ((inStream_V_strb_V_0_sel = ap_const_logic_1)) then 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_B;
        else 
            inStream_V_strb_V_0_data_out <= inStream_V_strb_V_0_payload_A;
        end if; 
    end process;

    inStream_V_strb_V_0_load_A <= (inStream_V_strb_V_0_state_cmp_full and not(inStream_V_strb_V_0_sel_wr));
    inStream_V_strb_V_0_load_B <= (inStream_V_strb_V_0_state_cmp_full and inStream_V_strb_V_0_sel_wr);
    inStream_V_strb_V_0_sel <= inStream_V_strb_V_0_sel_rd;
    inStream_V_strb_V_0_state_cmp_full <= '0' when (inStream_V_strb_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_strb_V_0_vld_in <= inStream_TVALID;
    inStream_V_strb_V_0_vld_out <= inStream_V_strb_V_0_state(0);
    inStream_V_user_V_0_ack_in <= inStream_V_user_V_0_state(1);

    inStream_V_user_V_0_ack_out_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_block_state3_io)
    begin
        if ((not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            inStream_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_user_V_0_data_out_assign_proc : process(inStream_V_user_V_0_payload_A, inStream_V_user_V_0_payload_B, inStream_V_user_V_0_sel)
    begin
        if ((inStream_V_user_V_0_sel = ap_const_logic_1)) then 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_B;
        else 
            inStream_V_user_V_0_data_out <= inStream_V_user_V_0_payload_A;
        end if; 
    end process;

    inStream_V_user_V_0_load_A <= (inStream_V_user_V_0_state_cmp_full and not(inStream_V_user_V_0_sel_wr));
    inStream_V_user_V_0_load_B <= (inStream_V_user_V_0_state_cmp_full and inStream_V_user_V_0_sel_wr);
    inStream_V_user_V_0_sel <= inStream_V_user_V_0_sel_rd;
    inStream_V_user_V_0_state_cmp_full <= '0' when (inStream_V_user_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_user_V_0_vld_in <= inStream_TVALID;
    inStream_V_user_V_0_vld_out <= inStream_V_user_V_0_state(0);
    k_1_fu_339_p2 <= std_logic_vector(unsigned(k1_reg_251) + unsigned(ap_const_lv32_1));
    k_2_fu_275_p2 <= std_logic_vector(unsigned(k_reg_240) + unsigned(ap_const_lv32_1));
    outStream_TDATA <= outStream_V_data_V_1_data_out;

    outStream_TDATA_blk_n_assign_proc : process(outStream_V_data_V_1_state, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state4, tmp_1_reg_417, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_1_reg_417 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_TDATA_blk_n <= outStream_V_data_V_1_state(1);
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TDEST <= outStream_V_dest_V_1_data_out;
    outStream_TID <= outStream_V_id_V_1_data_out;
    outStream_TKEEP <= outStream_V_keep_V_1_data_out;
    outStream_TLAST <= outStream_V_last_V_1_data_out;
    outStream_TSTRB <= outStream_V_strb_V_1_data_out;
    outStream_TUSER <= outStream_V_user_V_1_data_out;
    outStream_TVALID <= outStream_V_dest_V_1_state(0);
    outStream_V_data_V_1_ack_in <= outStream_V_data_V_1_state(1);
    outStream_V_data_V_1_ack_out <= outStream_TREADY;

    outStream_V_data_V_1_data_in_assign_proc : process(inStream_V_data_V_0_data_out, inStream_V_data_V_0_vld_out, arr_q0, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, tmp_data_V_1_fu_350_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            outStream_V_data_V_1_data_in <= arr_q0;
        elsif (((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_data_V_1_data_in <= tmp_data_V_1_fu_350_p2;
        elsif (((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_V_data_V_1_data_in <= inStream_V_data_V_0_data_out;
        else 
            outStream_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    outStream_V_data_V_1_data_out_assign_proc : process(outStream_V_data_V_1_payload_A, outStream_V_data_V_1_payload_B, outStream_V_data_V_1_sel)
    begin
        if ((outStream_V_data_V_1_sel = ap_const_logic_1)) then 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_B;
        else 
            outStream_V_data_V_1_data_out <= outStream_V_data_V_1_payload_A;
        end if; 
    end process;

    outStream_V_data_V_1_load_A <= (outStream_V_data_V_1_state_cmp_full and not(outStream_V_data_V_1_sel_wr));
    outStream_V_data_V_1_load_B <= (outStream_V_data_V_1_state_cmp_full and outStream_V_data_V_1_sel_wr);
    outStream_V_data_V_1_sel <= outStream_V_data_V_1_sel_rd;
    outStream_V_data_V_1_state_cmp_full <= '0' when (outStream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_data_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_data_V_1_vld_out <= outStream_V_data_V_1_state(0);
    outStream_V_dest_V_1_ack_in <= outStream_V_dest_V_1_state(1);
    outStream_V_dest_V_1_ack_out <= outStream_TREADY;

    outStream_V_dest_V_1_data_in_assign_proc : process(inStream_V_data_V_0_vld_out, inStream_V_dest_V_0_data_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, tmp_dest_V_1_reg_175)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outStream_V_dest_V_1_data_in <= tmp_dest_V_1_reg_175;
        elsif (((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_V_dest_V_1_data_in <= inStream_V_dest_V_0_data_out;
        else 
            outStream_V_dest_V_1_data_in <= "XXXXXX";
        end if; 
    end process;


    outStream_V_dest_V_1_data_out_assign_proc : process(outStream_V_dest_V_1_payload_A, outStream_V_dest_V_1_payload_B, outStream_V_dest_V_1_sel)
    begin
        if ((outStream_V_dest_V_1_sel = ap_const_logic_1)) then 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_B;
        else 
            outStream_V_dest_V_1_data_out <= outStream_V_dest_V_1_payload_A;
        end if; 
    end process;

    outStream_V_dest_V_1_load_A <= (outStream_V_dest_V_1_state_cmp_full and not(outStream_V_dest_V_1_sel_wr));
    outStream_V_dest_V_1_load_B <= (outStream_V_dest_V_1_state_cmp_full and outStream_V_dest_V_1_sel_wr);
    outStream_V_dest_V_1_sel <= outStream_V_dest_V_1_sel_rd;
    outStream_V_dest_V_1_state_cmp_full <= '0' when (outStream_V_dest_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_dest_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_dest_V_1_vld_out <= outStream_V_dest_V_1_state(0);
    outStream_V_id_V_1_ack_in <= outStream_V_id_V_1_state(1);
    outStream_V_id_V_1_ack_out <= outStream_TREADY;

    outStream_V_id_V_1_data_in_assign_proc : process(inStream_V_data_V_0_vld_out, inStream_V_id_V_0_data_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, tmp_id_V_1_reg_188)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outStream_V_id_V_1_data_in <= tmp_id_V_1_reg_188;
        elsif (((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_V_id_V_1_data_in <= inStream_V_id_V_0_data_out;
        else 
            outStream_V_id_V_1_data_in <= "XXXXX";
        end if; 
    end process;


    outStream_V_id_V_1_data_out_assign_proc : process(outStream_V_id_V_1_payload_A, outStream_V_id_V_1_payload_B, outStream_V_id_V_1_sel)
    begin
        if ((outStream_V_id_V_1_sel = ap_const_logic_1)) then 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_B;
        else 
            outStream_V_id_V_1_data_out <= outStream_V_id_V_1_payload_A;
        end if; 
    end process;

    outStream_V_id_V_1_load_A <= (outStream_V_id_V_1_state_cmp_full and not(outStream_V_id_V_1_sel_wr));
    outStream_V_id_V_1_load_B <= (outStream_V_id_V_1_state_cmp_full and outStream_V_id_V_1_sel_wr);
    outStream_V_id_V_1_sel <= outStream_V_id_V_1_sel_rd;
    outStream_V_id_V_1_state_cmp_full <= '0' when (outStream_V_id_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_id_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_id_V_1_vld_out <= outStream_V_id_V_1_state(0);
    outStream_V_keep_V_1_ack_in <= outStream_V_keep_V_1_state(1);
    outStream_V_keep_V_1_ack_out <= outStream_TREADY;

    outStream_V_keep_V_1_data_in_assign_proc : process(inStream_V_data_V_0_vld_out, inStream_V_keep_V_0_data_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, tmp_keep_V_1_reg_227)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outStream_V_keep_V_1_data_in <= tmp_keep_V_1_reg_227;
        elsif (((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_V_keep_V_1_data_in <= inStream_V_keep_V_0_data_out;
        else 
            outStream_V_keep_V_1_data_in <= "XXXX";
        end if; 
    end process;


    outStream_V_keep_V_1_data_out_assign_proc : process(outStream_V_keep_V_1_payload_A, outStream_V_keep_V_1_payload_B, outStream_V_keep_V_1_sel)
    begin
        if ((outStream_V_keep_V_1_sel = ap_const_logic_1)) then 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_B;
        else 
            outStream_V_keep_V_1_data_out <= outStream_V_keep_V_1_payload_A;
        end if; 
    end process;

    outStream_V_keep_V_1_load_A <= (outStream_V_keep_V_1_state_cmp_full and not(outStream_V_keep_V_1_sel_wr));
    outStream_V_keep_V_1_load_B <= (outStream_V_keep_V_1_state_cmp_full and outStream_V_keep_V_1_sel_wr);
    outStream_V_keep_V_1_sel <= outStream_V_keep_V_1_sel_rd;
    outStream_V_keep_V_1_state_cmp_full <= '0' when (outStream_V_keep_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_keep_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_keep_V_1_vld_out <= outStream_V_keep_V_1_state(0);
    outStream_V_last_V_1_ack_in <= outStream_V_last_V_1_state(1);
    outStream_V_last_V_1_ack_out <= outStream_TREADY;

    outStream_V_last_V_1_data_in_assign_proc : process(inStream_V_data_V_0_vld_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2)
    begin
        if (((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            outStream_V_last_V_1_data_in <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            outStream_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    outStream_V_last_V_1_data_out_assign_proc : process(outStream_V_last_V_1_payload_A, outStream_V_last_V_1_payload_B, outStream_V_last_V_1_sel)
    begin
        if ((outStream_V_last_V_1_sel = ap_const_logic_1)) then 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_B;
        else 
            outStream_V_last_V_1_data_out <= outStream_V_last_V_1_payload_A;
        end if; 
    end process;

    outStream_V_last_V_1_load_A <= (outStream_V_last_V_1_state_cmp_full and not(outStream_V_last_V_1_sel_wr));
    outStream_V_last_V_1_load_B <= (outStream_V_last_V_1_state_cmp_full and outStream_V_last_V_1_sel_wr);
    outStream_V_last_V_1_sel <= outStream_V_last_V_1_sel_rd;
    outStream_V_last_V_1_state_cmp_full <= '0' when (outStream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_last_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_last_V_1_vld_out <= outStream_V_last_V_1_state(0);
    outStream_V_strb_V_1_ack_in <= outStream_V_strb_V_1_state(1);
    outStream_V_strb_V_1_ack_out <= outStream_TREADY;

    outStream_V_strb_V_1_data_in_assign_proc : process(inStream_V_data_V_0_vld_out, inStream_V_strb_V_0_data_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, tmp_strb_V_1_reg_214)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outStream_V_strb_V_1_data_in <= tmp_strb_V_1_reg_214;
        elsif (((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_V_strb_V_1_data_in <= inStream_V_strb_V_0_data_out;
        else 
            outStream_V_strb_V_1_data_in <= "XXXX";
        end if; 
    end process;


    outStream_V_strb_V_1_data_out_assign_proc : process(outStream_V_strb_V_1_payload_A, outStream_V_strb_V_1_payload_B, outStream_V_strb_V_1_sel)
    begin
        if ((outStream_V_strb_V_1_sel = ap_const_logic_1)) then 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_B;
        else 
            outStream_V_strb_V_1_data_out <= outStream_V_strb_V_1_payload_A;
        end if; 
    end process;

    outStream_V_strb_V_1_load_A <= (outStream_V_strb_V_1_state_cmp_full and not(outStream_V_strb_V_1_sel_wr));
    outStream_V_strb_V_1_load_B <= (outStream_V_strb_V_1_state_cmp_full and outStream_V_strb_V_1_sel_wr);
    outStream_V_strb_V_1_sel <= outStream_V_strb_V_1_sel_rd;
    outStream_V_strb_V_1_state_cmp_full <= '0' when (outStream_V_strb_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_strb_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_strb_V_1_vld_out <= outStream_V_strb_V_1_state(0);
    outStream_V_user_V_1_ack_in <= outStream_V_user_V_1_state(1);
    outStream_V_user_V_1_ack_out <= outStream_TREADY;

    outStream_V_user_V_1_data_in_assign_proc : process(inStream_V_data_V_0_vld_out, inStream_V_user_V_0_data_out, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, tmp_user_V_1_reg_201)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            outStream_V_user_V_1_data_in <= tmp_user_V_1_reg_201;
        elsif (((tmp_1_fu_312_p2 = ap_const_lv1_0) and (inStream_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_V_user_V_1_data_in <= inStream_V_user_V_0_data_out;
        else 
            outStream_V_user_V_1_data_in <= "XX";
        end if; 
    end process;


    outStream_V_user_V_1_data_out_assign_proc : process(outStream_V_user_V_1_payload_A, outStream_V_user_V_1_payload_B, outStream_V_user_V_1_sel)
    begin
        if ((outStream_V_user_V_1_sel = ap_const_logic_1)) then 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_B;
        else 
            outStream_V_user_V_1_data_out <= outStream_V_user_V_1_payload_A;
        end if; 
    end process;

    outStream_V_user_V_1_load_A <= (outStream_V_user_V_1_state_cmp_full and not(outStream_V_user_V_1_sel_wr));
    outStream_V_user_V_1_load_B <= (outStream_V_user_V_1_state_cmp_full and outStream_V_user_V_1_sel_wr);
    outStream_V_user_V_1_sel <= outStream_V_user_V_1_sel_rd;
    outStream_V_user_V_1_state_cmp_full <= '0' when (outStream_V_user_V_1_state = ap_const_lv2_1) else '1';

    outStream_V_user_V_1_vld_in_assign_proc : process(inStream_V_data_V_0_vld_out, outStream_V_data_V_1_ack_in, ap_CS_fsm_state3, tmp_1_fu_312_p2, ap_CS_fsm_state6, ap_CS_fsm_state5, exitcond_fu_333_p2, ap_block_state3_io, ap_block_state5_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state5_io) and (exitcond_fu_333_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((outStream_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((inStream_V_data_V_0_vld_out = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))) and (tmp_1_fu_312_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_V_user_V_1_vld_out <= outStream_V_user_V_1_state(0);
    tmp_1_fu_312_p2 <= "1" when (signed(inStream_V_data_V_0_data_out) > signed(pivot_read_reg_363)) else "0";
    tmp_2_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(counter_fu_92),64));
    tmp_6_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_reg_251),64));
    tmp_data_V_1_fu_350_p2 <= std_logic_vector(unsigned(size_read_reg_368) - unsigned(counter_fu_92));
end behav;
